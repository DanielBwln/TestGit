Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: JOB

; Microsoft Dynamics AX Job: sysContextMenuJob unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #sysContextMenuJob
    #static void sysContextMenuJob(Args _args)
    #{
    #    SysContextMenu sysContextMenu;
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{705A17E8-081B-4537-ACE5-386E2601F5D8}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: executeCmdJob1 unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #executeCmdJob1
    #static void executeCmdJob1(Args _args)
    #{
    #    WinAPI::shellExecute(
    #        @"E:\Soft1ware\Git\Git\cmd\git.exe",
    #        @"add SysVersionControlFileBasedBackEndGit.xpo",
    #        @"E:\Projects\HuameiSoft\Solutions\GitForAX\syp\Classes");
    #
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{F2EA2982-CFE3-4319-AB33-1236C247142F}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: executeCmdJob unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #executeCmdJob
    #static void executeCmdJob(Args _args)
    #{
    #    System.Diagnostics.Process          process;
    #    System.Diagnostics.ProcessStartInfo processStartInfo;
    #    System.Exception                    ex;
    #    System.IO.StreamReader              streamRead;
    #    int                                 exitCode;
    #    str                                 ret;
    #
    #    str fileCMD = @"add SysVersionControlFileBasedBackEndGit.xpo";
    #
    #    try
    #    {
    #        new InteropPermission(InteropKind::ClrInterop).assert();
    #
    #        process = new System.Diagnostics.Process();
    #
    #        processStartInfo = new System.Diagnostics.ProcessStartInfo();
    #        processStartInfo.set_WorkingDirectory(@"E:\Projects\HuameiSoft\Solutions\GitForAX\syp\Classes");
    #        processStartInfo.set_FileName(@"E:\Software\Git\Git\cmd\git.exe");
    #        processStartInfo.set_Arguments(fileCMD);
    #        processStartInfo.set_UseShellExecute(false);
    #        processStartInfo.set_RedirectStandardOutput(true);
    #        processStartInfo.set_RedirectStandardError(true);
    #        processStartInfo.set_CreateNoWindow(true);
    #
    #        process.set_StartInfo(processStartInfo);
    #        process.Start();
    #
    #        while (!process.get_HasExited())
    #        {
    #            streamRead = process.get_StandardOutput();
    #            ret += streamRead.ReadToEnd();
    #        }
    #
    #        exitCode = CLRInterop::getAnyTypeForObject(process.get_ExitCode());
    #        if (exitCode)
    #        {
    #            streamRead = process.get_StandardError();
    #            /*throw*/ error(streamRead.ReadToEnd());
    #        }
    #        else
    #        {
    #            streamRead = process.get_StandardOutput();
    #            ret += streamRead.ReadToEnd();
    #        }
    #
    #        CodeAccessPermission::revertAssert();
    #
    #    }
    #    catch(Exception::CLRError)
    #    {
    #        // BP Deviation documented
    #        ex = ClrInterop::getLastException();
    #
    #        while (ex != null)
    #        {
    #            error(ex.ToString());
    #
    #            ex = ex.get_InnerException();
    #        }
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{8716D876-1EFB-4E24-9251-67DFE0CC41E4}
  ENDPROPERTIES
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : SysVersionControlType unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #SysVersionControlType
    PROPERTIES
      Name                #SysVersionControlType
      Label               #@SYS85912
      Help                #@SYS94419
      UseEnumValue        #Yes
      Origin              #{2815054D-0000-1000-6C63-0BB1D30B529A}
      LegacyId            #1357
    ENDPROPERTIES
    
    TYPEELEMENTS
      #SysVersionControlSourceDepot
      PROPERTIES
        Name                #SysVersionControlSourceDepot
        Label               #@SYS85682
        EnumValue           #0
      ENDPROPERTIES
      
      #SysVersionControlSourceSafe
      PROPERTIES
        Name                #SysVersionControlSourceSafe
        Label               #@SYS94374
        EnumValue           #1
      ENDPROPERTIES
      
      #SysVersionControlMorphX
      PROPERTIES
        Name                #SysVersionControlMorphX
        Label               #@SYS119116
        EnumValue           #2
      ENDPROPERTIES
      
      #SysVersionControlTfs
      PROPERTIES
        Name                #SysVersionControlTfs
        Label               #@SYS117839
        EnumValue           #3
      ENDPROPERTIES
      
      #SysVersionControlGit
      PROPERTIES
        Name                #SysVersionControlGit
        Label               #Git
        EnumValue           #4
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlTmpItem unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlTmpItem
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlTmpItem
      Label               #@SYS85910
      FormRef             #sysversionControlitemHistory
      TitleField1         #Version
      TitleField2         #ItemPath
      TableType           #InMemory
      Systemtable         #Yes
      SaveDataPerCompany  #No
      TableGroup          #Main
      Origin              #{2C1807C0-0000-1000-6C63-C7DBDD00AD98}
      LegacyId            #1984
    ENDPROPERTIES
    
    FIELDS
      FIELD #ActionText
        STRING
        PROPERTIES
          Name                #ActionText
          Table               #SysVersionControlTmpItem
          Origin              #{D1B46432-5D2F-46E6-B2FE-BA98E6994BBC}
          LegacyId            #9
          ExtendedDataType    #SysVersionControlActionText
          StringSize          #200
        ENDPROPERTIES
        
      FIELD #ChangeNumber
        INT64
        PROPERTIES
          Name                #ChangeNumber
          Table               #SysVersionControlTmpItem
          Origin              #{BDE266FA-5CFB-4FCB-B973-BD17D2058F20}
          LegacyId            #10
          ExtendedDataType    #SysVersionControlChangeNumber
        ENDPROPERTIES
        
      FIELD #Comment
        STRING
        PROPERTIES
          Name                #Comment
          Table               #SysVersionControlTmpItem
          Origin              #{05D8BDEA-DAF8-44E4-8061-DD0A80EE6D9E}
          LegacyId            #2
          ExtendedDataType    #SysVersionControlItemComment
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #ComputerName
        STRING
        PROPERTIES
          Name                #ComputerName
          Table               #SysVersionControlTmpItem
          Origin              #{D7DD9959-A705-4A6E-B333-484EB21BFCCB}
          LegacyId            #8
          ExtendedDataType    #ComputerName
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #Filename
        STRING
        PROPERTIES
          Name                #Filename
          Table               #SysVersionControlTmpItem
          Origin              #{EDD71E76-68C2-4AB6-AB5F-C848C54C9B17}
          LegacyId            #4
          ExtendedDataType    #Filename
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #ImageRes
        INT
        PROPERTIES
          Name                #ImageRes
          Table               #SysVersionControlTmpItem
          Origin              #{C2F03D5C-4758-4EFE-BF53-CC4CED41FBBB}
          LegacyId            #12
          ExtendedDataType    #ImageRes
        ENDPROPERTIES
        
      FIELD #InternalFilename
        STRING
        PROPERTIES
          Name                #InternalFilename
          Visible             #No
          Table               #SysVersionControlTmpItem
          Origin              #{0ED7BE2A-1349-4674-B981-8A3B5E16B926}
          LegacyId            #11
          ExtendedDataType    #Filename
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #ItemPath
        STRING
        PROPERTIES
          Name                #ItemPath
          Table               #SysVersionControlTmpItem
          Origin              #{0E5E74D4-6D53-4356-B608-334E10683826}
          LegacyId            #1
          ExtendedDataType    #SysVersionControlItemPath
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #Label
        STRING
        PROPERTIES
          Name                #Label
          Table               #SysVersionControlTmpItem
          Origin              #{68A5E31D-BAAB-49D7-92C5-A9D490D04E3E}
          LegacyId            #16
          ExtendedDataType    #SysVersionControlLabel
          StringSize          #31
        ENDPROPERTIES
        
      FIELD #Selected
        ENUM
        PROPERTIES
          Name                #Selected
          Label               #@SYS28109
          HelpText            #@SYS111700
          Table               #SysVersionControlTmpItem
          Origin              #{0F364A2F-B79D-4E08-8BC0-F16716CAB447}
          LegacyId            #7
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ShortComment
        STRING
        PROPERTIES
          Name                #ShortComment
          Table               #SysVersionControlTmpItem
          Origin              #{01DD3A48-FA63-4D3D-B0A5-CFB5AA2C1C59}
          LegacyId            #14
          ExtendedDataType    #SysVersionControlItemShortComment
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #StatusText
        STRING
        PROPERTIES
          Name                #StatusText
          Table               #SysVersionControlTmpItem
          Origin              #{F6A94DBC-EEE9-43CF-9AC9-A62B7A9DD366}
          LegacyId            #13
          ExtendedDataType    #SysVersionControlStatusText
        ENDPROPERTIES
        
      FIELD #User
        STRING
        PROPERTIES
          Name                #User
          Table               #SysVersionControlTmpItem
          Origin              #{FD8D0EC7-E01E-4229-876A-F8395059FED1}
          LegacyId            #3
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #VCSDate
        DATE
        PROPERTIES
          Name                #VCSDate
          Table               #SysVersionControlTmpItem
          Origin              #{8F3DD330-D10D-4C5A-A0EA-8392F78F3F41}
          LegacyId            #6
          ExtendedDataType    #SysVersionControlItemDate
        ENDPROPERTIES
        
      FIELD #VCSTime
        TIME
        PROPERTIES
          Name                #VCSTime
          Label               #@SYS8758
          Table               #SysVersionControlTmpItem
          Origin              #{70028030-BDB5-453D-BF5E-C66DED7C244C}
          LegacyId            #15
          ExtendedDataType    #TimeOfDay
        ENDPROPERTIES
        
      FIELD #Version
        INT
        PROPERTIES
          Name                #Version
          Table               #SysVersionControlTmpItem
          Origin              #{C743EFD9-605A-4B2A-AD3F-8EB296A54D61}
          LegacyId            #5
          ExtendedDataType    #SysVersionControlItemVersion
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #ChangelistGrid
        PROPERTIES
          Name                #ChangelistGrid
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Version
          #ActionText
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ChangelistHeader
        PROPERTIES
          Name                #ChangelistHeader
          Label               #@SYS2952
        ENDPROPERTIES
        
        GROUPFIELDS
          #ChangeNumber
          #User
          #ComputerName
          #VCSDate
          #VCSTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Comment
        PROPERTIES
          Name                #Comment
          Label               #@SYS7576
        ENDPROPERTIES
        
        GROUPFIELDS
          #Comment
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemPath
          #Filename
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ModifiedBy
        PROPERTIES
          Name                #ModifiedBy
          Label               #@SYS75729
        ENDPROPERTIES
        
        GROUPFIELDS
          #User
          #ComputerName
          #VCSDate
          #VCSTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Overview
        PROPERTIES
          Name                #Overview
          Label               #@SYS9039
        ENDPROPERTIES
        
        GROUPFIELDS
          #Version
          #ActionText
          #VCSDate
          #VCSTime
          #User
          #ChangeNumber
          #itemPathUsingObjectName
          #ShortComment
          #Label
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #DateIdx
      PROPERTIES
        Name                #DateIdx
        Origin              #{2B070001-07C0-1000-4461-746549647800}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #VCSDate
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #fileName
        #public FilenameOpen fileName()
        #{
        #    if (!this.Filename)
        #    {
        #        this.Filename = versioncontrol.getItemVersion(this.getControllable(), this);
        #        if (!this.Filename)
        #        {
        #            //
        #            // The file could not be retrieved, e.g. in case of a deletion.
        #            //
        #            throw error("@SYS86327");
        #        }
        #    }
        #    return this.Filename;
        #}
      ENDSOURCE
      SOURCE #generateShortComment
        #private SysVersionControlItemShortComment generateShortComment()
        #{
        #    return strRem(this.Comment, '\n\r');
        #}
      ENDSOURCE
      SOURCE #getComparable
        #public SysComparable getComparable()
        #{
        #    #SysVersionControl
        #    #AOT
        #
        #    if (match(#LabelMatch, this.ItemPath))
        #    {
        #        return SysLabelFile::newVCSItem(this);
        #    }
        #
        #    if (match(#DefFileMatch, this.ItemPath))
        #    {
        #        return SysVersionControlDefFile::newVCSItem(this);
        #    }
        #
        #    if (match(#VSProjectPathMatch, this.ItemPath))
        #    {
        #        return SysTreeNodeVirtualVCS::newVCSItem(this);
        #    }
        #
        #    if (this.ItemPath && SysVersionControlTmpItem::isValidXPOFile(this.InternalFilename))
        #    {
        #        return SysTreeNodeVirtualVCS::newVCSItem(this);
        #    }
        #
        #
        #    return SysVersionControlFile::newVCSItem(this);
        #}
      ENDSOURCE
      SOURCE #getControllable
        #/// <summary>
        #/// Constructs a <c>SysVersionControllable</c> object.
        #/// </summary>
        #/// <param name="_forceVirtualDeletedForDeleteOperation">
        #/// A Boolean value that indicates whether to always use a <c>SysTreeNodeVirtualDeleted</c> instance
        #/// when the file is opened for delete.
        #/// </param>
        #/// <returns>
        #/// An instance of a class that implements the <c>SysVersionControllable</c> interface.
        #/// </returns>
        #/// <remarks>
        #/// If the caller expects a <c>SysTreeNodeVirtualDeleted</c> object in case of delete, use true for the
        #/// value of the <paramref name="_forceVirtualDeletedForDeleteOperation" /> parameter.Otherwise, this
        #/// method will return a non-virtual object when the delete object actually exists in the AOT. This can
        #/// occur, for example, when the delete operation was a result of moving an object to a different model.
        #/// </remarks>
        #public SysVersionControllable getControllable(boolean _forceVirtualDeletedForDeleteOperation = false)
        #{
        #    SysVersionControllable      controllable;
        #    boolean                     forceVirtualDeleted;
        #
        #    forceVirtualDeleted = _forceVirtualDeletedForDeleteOperation && versioncontrol.parmSysVersionControlSystem().isTmpItemOpenedForDelete(this);
        #
        #    controllable = SysVersionControlTmpItem::newControllable(this.itemPathUsingObjectName(), this.InternalFilename, !forceVirtualDeleted);
        #
        #    if (!controllable)
        #    {
        #        controllable = SysVersionControlFile::newVCSItem(this);
        #    }
        #    return controllable;
        #}
      ENDSOURCE
      SOURCE #getVirtualTreenode
        #public TreeNode getVirtualTreenode(Filename _filename = this.fileName())
        #{
        #    #AOT
        #    #AotExport
        #    #File
        #
        #    TmpAotImport        tmpImportAot;
        #    SysImportElements   sysImportElements = new SysImportElements();
        #
        #    TreeNode  treeNodeImport  = null;
        #    int       exportId;
        #    int       flag            = (#impGetCompareNode + #impKeepIds);
        #    str       name;
        #    str       extension;
        #
        #    extension = System.IO.Path::GetExtension(_filename);
        #
        #    if (match(#vsProjFileExtMatch, extension))
        #    {
        #        return SysTreeNodeVSProject::getVirtualProject(_filename);
        #    }
        #
        #    // Set the filename.
        #    sysImportElements.newFile(_filename);
        #
        #    // Get info from the file
        #    tmpImportAot = sysImportElements.getTmpImportAot();
        #
        #    // Create an import context
        #    exportId     = infolog.startImport(_filename, flag);
        #
        #    // Get the right name - for doc nodes it is the path excl the first part
        #    switch (tmpImportAot.UtilFileType)
        #    {
        #        case UtilFileType::Application:
        #            name = tmpImportAot.TreeNodeName;
        #            break;
        #        case UtilFileType::KernelHelp:
        #            name = strDel(tmpImportAot.TreeNodePath, 1, strLen(#SystemDocPath));
        #            break;
        #        default:
        #            name = tmpImportAot.TreeNodeName;
        #            break;
        #    }
        #
        #    // Import the node in memory
        #    treeNodeImport  = infolog.getImportedNode(
        #        exportId,
        #        tmpImportAot.UtilFileType,
        #        tmpImportAot.UtilElementType,
        #        name,
        #        tmpImportAot.FilePos,
        #        flag);
        #
        #    // Close the import context
        #    infolog.endImport(exportId, 1);
        #
        #    return treeNodeImport;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    this.ShortComment = this.generateShortComment();
        #    super();
        #}
      ENDSOURCE
      SOURCE #itemPathUsingObjectName
        #// BP deviation documented
        #display SysVersionControlItemPath itemPathUsingObjectName()
        #{
        #    int len = strLen(this.ItemPath);
        #    int i = strScan(this.ItemPath, '\\', len, -len);
        #
        #    return subStr(this.ItemPath,1,i)+this.objectName();
        #}
      ENDSOURCE
      SOURCE #objectName
        #// BP deviation documented
        #display IdentifierName objectName()
        #{
        #    #file
        #
        #    int len = strLen(this.InternalFilename);
        #    int i = strScan(this.InternalFilename, '\\', len, -len);
        #    int j = strScan(this.InternalFilename, #xpo, 1 , len);
        #    if (!j)
        #        j = strScan(this.InternalFilename, #ald, 1 , len);
        #    if (!j)
        #        j = strScan(this.InternalFilename, #xml, 1 , len);
        #    if (!i)
        #        i = strScan(this.InternalFilename, '/', len, -len);
        #
        #    // If the name does not contain well known extensions return the whole name
        #    if (!j)
        #        j = len + 1;
        #
        #    if (i && j && i<j)
        #        return subStr(this.InternalFilename, i+1, j-i-1);
        #    return '';
        #}
      ENDSOURCE
      SOURCE #openNewWindow
        #public void openNewWindow()
        #{
        #    TreeNode treeNode = this.getVirtualTreenode();
        #    if (treeNode)
        #        treeNode.AOTnewWindow();
        #}
      ENDSOURCE
      SOURCE #viewFile
        #public void viewFile()
        #{
        #    #WinApi
        #    #define.Command('cmd')
        #    #define.Notepad('/c notepad \%1')
        #
        #;
        #    if (WinAPI::fileExists(this.fileName()))
        #        WinAPI::shellExecute(#Command,strFmt(#Notepad,this.fileName()),'',#ShellExeOpen,#SW_HIDE);
        #    else
        #        error(strFmt("@SYS19312", this.fileName()));
        #}
      ENDSOURCE
      SOURCE #compareContext
        #public static SysCompareContextProvider compareContext(SysVersionControlTmpItem _item1, SysVersionControlTmpItem _item2 = null)
        #{
        #    SysComparable comparable1 = _item1 ? _item1.getComparable() : null;
        #    SysComparable comparable2 = _item2 ? _item2.getComparable() : null;
        #    SysLabelFile  labelFile1, labelFile2;
        #    SysTreeNode   treeNode1, treeNode2;
        #    TreeNode      treeNode;
        #
        #    if (comparable1 is SysLabelFile)
        #    {
        #        labelFile1 = comparable1 as SysLabelFile;
        #        labelFile2 = comparable2 as SysLabelFile;
        #        if (labelFile1)
        #        {
        #            if (!labelFile2)
        #            {
        #                labelFile2 = SysLabelFile::newLanguageModule(labelFile1.parmLanguageId(), labelFile1.parmModuleId());
        #            }
        #            return SysLabelFileCompareContext::newSysLabelFiles(labelFile1, labelFile2);
        #        }
        #    }
        #
        #    if (comparable1 is SysTreeNode)
        #    {
        #        treeNode1 = comparable1 as SysTreeNode;
        #        treeNode2 = comparable2 as SysTreeNode;
        #
        #        if (treeNode1)
        #        {
        #            if (!treeNode2)
        #            {
        #                if (_item2 && _item2.ItemPath)
        #                {
        #                    treeNode  = TreeNode::findNode(_item2.ItemPath);
        #                }
        #                else
        #                {
        #                    treeNode  = TreeNode::findNode(_item1.ItemPath);
        #                }
        #                treeNode2 = SysTreeNode::newTreeNode(treeNode);
        #            }
        #            return SysTreenodeCompareContext::newSysTreeNode(treeNode1, treeNode2);
        #        }
        #    }
        #
        #    if (comparable1 && comparable2)
        #    {
        #        return SysComparableCompareContext::newComparables(comparable1, comparable2);
        #    }
        #
        #    // If the second comparable is null, try to find the node in repository for comparison.
        #    if (comparable1 && !comparable2)
        #    {
        #        treeNode  = TreeNode::findNode(_item1.ItemPath);
        #
        #        if (treeNode)
        #        {
        #            treeNode2 = SysTreeNode::newTreeNode(treeNode);
        #
        #            if (treeNode2)
        #            {
        #                return SysComparableCompareContext::newComparables(comparable1, treeNode2);
        #            }
        #        }
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #hasSeveralNames
        #public static boolean hasSeveralNames(SysVersionControlTmpItem _item)
        #{
        #    Set set = new Set(Types::String);
        #
        #    while select _item
        #    {
        #        set.add(_item.itemPathUsingObjectName());
        #    }
        #    return set.elements() > 1;
        #}
      ENDSOURCE
      SOURCE #isValidXPOFile
        #static public boolean isValidXPOFile(Filename _filename)
        #{
        #    #File
        #    UtilEntryLevel layer;
        #    int i;
        #    MapEnumerator enum;
        #    Filename filename = _filename;
        #
        #
        #    //
        #    // Is it an xpo file?
        #    //
        #    if (strScan(filename, #xpo, 1, strLen(filename)))
        #    {
        #        // Is it placed in a layer folder?
        #        //
        #        filename = strReplace(filename, '\\', '/');
        #        for (i=0; i<enumCnt(UtilEntryLevel); i++)
        #        {
        #            layer = i;
        #            if (strScan(filename, strFmt('/%1/', layer), 1, strLen(filename)))
        #                return true;
        #        }
        #
        #        //
        #        // Is it part of model
        #        //
        #        if (versioncontrol.parmSysVersionControlSystem() && versioncontrol.parmSysVersionControlSystem().parmModelFolders())
        #        {
        #            enum = versioncontrol.parmSysVersionControlSystem().parmModelFolders().getEnumerator();
        #            while (enum.moveNext())
        #            {
        #                if (strScan(filename, strFmt('/%1/', enum.currentKey()), 1, strLen(filename)))
        #                    return true;
        #            }
        #        }
        #
        #        //
        #        // Is it placed in an additional folder?
        #        //
        #        if (versioncontrol.parmSysVersionControlSystem() && versioncontrol.parmSysVersionControlSystem().parmAdditionalFolders())
        #        {
        #            enum = versioncontrol.parmSysVersionControlSystem().parmAdditionalFolders().getEnumerator();
        #            while (enum.moveNext())
        #            {
        #                if (strScan(filename, strFmt('/%1/', enum.currentKey()), 1, strLen(filename)))
        #                    return true;
        #            }
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #newControllable
        #/// <summary>
        #/// Constructs a new Controllable.
        #/// </summary>
        #/// <param name="_itemPath">
        #/// A <c>SysVersionControlItemPath</c> for the controllable.
        #/// </param>
        #/// <param name="_filename">
        #/// The local file path of the element under version control.
        #/// </param>
        #/// <param name="_useTreeNode">
        #/// A Boolean value that indicates whether a controllable can be created by using a tree node from the
        #/// AOT.
        #/// </param>
        #/// <returns>
        #/// An instance of a class implementing the <c>SysVersionControllable</c> interface when the element is
        #/// supported; otherwise null.
        #/// </returns>
        #/// <remarks>
        #/// Set the value of the <paramref name="_useTreeNode" /> parameter to false to make sure that a
        #/// <c>SysTreeNodeVirtualDeleted</c> object is created for AOT elements.
        #/// </remarks>
        #public static client server SysVersionControllable newControllable(
        #    SysVersionControlItemPath _itemPath,
        #    Filename                  _filename,
        #    boolean                   _useTreeNode = true)
        #{
        #    TreeNode        treeNode;
        #    LanguageId      languageId;
        #    LabelModuleId   labelModuleId;
        #    #SysVersionControl
        #    #AOT
        #
        #    if (_itemPath && _useTreeNode)
        #    {
        #        treeNode = TreeNode::findNode(_itemPath);
        #        if (treeNode)
        #        {
        #            return SysTreeNode::newTreeNode(treeNode);
        #        }
        #    }
        #    //
        #    // _itemPath = "\labels\axsysen-us.ald"
        #    //
        #    if (match(#LabelMatch, _itemPath))
        #    {
        #        [labelModuleId, languageId] = SysLabelFile::splitLabelFileName(_itemPath);
        #        return SysLabelFile::newLanguageModule(languageId, labelModuleId);
        #    }
        #
        #    //
        #    // _itemPath = "\definition\VCSDef.xml"
        #    //
        #    if (match(#DefFileMatch, _itemPath))
        #    {
        #        return SysVersionControlDefFile::newVCSDefFile();
        #    }
        #
        #    //
        #    // _itemPath = "*\Model"
        #    //
        #    if (match(#ModelMatch, _itemPath))
        #    {
        #        return SysVersionControlModelFile::newItemPath(_itemPath);
        #    }
        #
        #    if (match(#VSProjectsPath, _itemPath))
        #    {
        #        return SysTreeNodeVirtualDeleted::newTreeNodePath(_itemPath);
        #    }
        #
        #    if (_itemPath && SysVersionControlTmpItem::isValidXPOFile(_filename))
        #    {
        #        return SysTreeNodeVirtualDeleted::newTreeNodePath(_itemPath);
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #releaseControllable
        #/// <summary>
        #///    Releases a tree node object from memory if the specified <c>SysVersionControllable</c> object is a
        #///    node of a <c>SysTreeNode</c> class tree.
        #/// </summary>
        #/// <param name="_controllable">
        #///    The specified <c>SysVersionControllable</c> object.
        #/// </param>
        #public static client void releaseControllable(SysVersionControllable _controllable)
        #{
        #    SysTreeNode sysTreeNode;
        #    TreeNode nodeToRelease;
        #
        #    // if the controllable is a treenode, then release it.
        #    sysTreeNode = _controllable as SysTreeNode;
        #    if (sysTreeNode)
        #    {
        #        nodeToRelease = sysTreeNode.parmTreeNode() as TreeNode;
        #        if (nodeToRelease &&
        #            TreeNode::isNodeReferenceValid(nodeToRelease) &&
        #            nodeToRelease.treeNodeType().isConsumingMemory())
        #        {
        #            nodeToRelease.treeNodeRelease();
        #        }
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : SysVersionControlParameters unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #SysVersionControlParameters
    EnforceFKRelation 0
    PROPERTIES
      Name                #SysVersionControlParameters
      Label               #@SYS85914
      Systemtable         #Yes
      SecurityKey         #SysDevelopmentTables
      MaxAccessMode       #Edit
      CacheLookup         #Found
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      SaveDataPerPartition #No
      TableGroup          #Parameter
      PrimaryIndex        #Key
      ClusterIndex        #Key
      ModifiedDateTime    #Yes
      DEL_modifiedTime    #Yes
      ModifiedBy          #Yes
      ModifiedTransactionId #Yes
      DeveloperDocumentation  #@SYS123440
      Origin              #{2C1B07BD-0000-1000-136B-81DEC3EE9E54}
      LegacyId            #1981
    ENDPROPERTIES
    
    FIELDS
      FIELD #AppRoot
        STRING
        PROPERTIES
          Name                #AppRoot
          Table               #SysVersionControlParameters
          Origin              #{372075C2-1491-4F0B-BF42-D126534DC81F}
          LegacyId            #14
          ExtendedDataType    #SysVersionControlAppRoot
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #Key
        INT
        PROPERTIES
          Name                #Key
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #SysVersionControlParameters
          Origin              #{5A5C9A55-2238-4A72-ADDB-889AF4BE12AF}
          LegacyId            #1
          ExtendedDataType    #ParametersKey
        ENDPROPERTIES
        
      FIELD #RepositoryFolder
        STRING
        PROPERTIES
          Name                #RepositoryFolder
          Table               #SysVersionControlParameters
          Origin              #{F75A44FB-EFB7-4581-A21A-DEE9F6731C51}
          LegacyId            #3
          ExtendedDataType    #SysVersionControlRepositoryFolder
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #TfsBranch
        STRING
        PROPERTIES
          Name                #TfsBranch
          Table               #SysVersionControlParameters
          Origin              #{18E4BFF1-ADF0-48B5-A72F-718351B42D89}
          LegacyId            #13
          ExtendedDataType    #SysVersionControlTfsBranch
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #TfsProject
        STRING
        PROPERTIES
          Name                #TfsProject
          Label               #@SYS118668
          Table               #SysVersionControlParameters
          Origin              #{8B414758-EBC2-4396-9129-11BBB587FE3A}
          LegacyId            #12
          ExtendedDataType    #SysVersionControlTfsProject
          StringSize          #65
        ENDPROPERTIES
        
      FIELD #TfsServer
        STRING
        PROPERTIES
          Name                #TfsServer
          Label               #@SYS118666
          Table               #SysVersionControlParameters
          Origin              #{C908CBEB-516E-4A34-AB07-EAB4BD8AF5C5}
          LegacyId            #2
          ExtendedDataType    #SysVersionControlTfsServer
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #UIFlags
        INT
        PROPERTIES
          Name                #UIFlags
          Table               #SysVersionControlParameters
          Origin              #{9035DAC0-B840-40AF-816B-19A864362F8B}
          LegacyId            #9
          ExtendedDataType    #SysVersionControlUISettings
        ENDPROPERTIES
        
      FIELD #VCSEnabled
        ENUM
        PROPERTIES
          Name                #VCSEnabled
          Label               #@SYS94367
          HelpText            #@SYS94418
          Table               #SysVersionControlParameters
          Origin              #{9FC8E85B-57ED-4EFF-9051-5572C32A11D7}
          LegacyId            #4
          EnumType            #EnableDisable
        ENDPROPERTIES
        
      FIELD #VCSType
        ENUM
        PROPERTIES
          Name                #VCSType
          Table               #SysVersionControlParameters
          Origin              #{D419D147-FDD0-4986-9EC2-CF2B3776699C}
          LegacyId            #5
          EnumType            #SysVersionControlType
        ENDPROPERTIES
        
      FIELD #VSSIniFile
        STRING
        PROPERTIES
          Name                #VSSIniFile
          Label               #@SYS94757
          HelpText            #@SYS94758
          Table               #SysVersionControlParameters
          Origin              #{968CD623-9D3E-4156-B8BE-743873733F6C}
          LegacyId            #10
          ExtendedDataType    #FilenameOpen
          StringSize          #259
        ENDPROPERTIES
        
      FIELD #VSSProjectRoot
        STRING
        PROPERTIES
          Name                #VSSProjectRoot
          Label               #@SYS94759
          HelpText            #@SYS98662
          Table               #SysVersionControlParameters
          Origin              #{8DD13460-7FFD-483B-9418-4F7293B056D5}
          LegacyId            #11
          ExtendedDataType    #Filename
          StringSize          #259
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #VCSEnabled
          #VCSType
          #RepositoryFolder
          #UIFlags
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DevSettings
        PROPERTIES
          Name                #DevSettings
          Label               #@SYS94379
        ENDPROPERTIES
        
        GROUPFIELDS
          #VCSEnabled
          #VCSType
          #RepositoryFolder
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Setup
        PROPERTIES
          Name                #Setup
          Label               #@SYS2186
        ENDPROPERTIES
        
        GROUPFIELDS
          #VCSEnabled
          #RepositoryFolder
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Tfs
        PROPERTIES
          Name                #Tfs
          Label               #@SYS117837
        ENDPROPERTIES
        
        GROUPFIELDS
          #TfsServer
          #TfsProject
          #TfsBranch
          #AppRoot
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #UIFlags
        PROPERTIES
          Name                #UIFlags
          Label               #@SYS94421
        ENDPROPERTIES
        
        GROUPFIELDS
          #UIFlags
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VSS
        PROPERTIES
          Name                #VSS
          Label               #@SYS94760
        ENDPROPERTIES
        
        GROUPFIELDS
          #VSSProjectRoot
          #VSSIniFile
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #Key
      PROPERTIES
        Name                #Key
        AllowDuplicates     #No
        Origin              #{2B030001-07BD-1000-4B65-790000000000}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #Key
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #getRepositoryFolder
        #private str getRepositoryFolder(str repositoryRoot, str appRoot)
        #{
        #    #File
        #    str pathSection1 = this.serverPathToLocalPath(repositoryRoot);
        #    str pathSection2 = this.serverPathToLocalPath(appRoot);
        #    str result;
        #
        #    result = pathSection1 + #FilePathDelimiter + pathSection2;
        #    return result;
        #}
      ENDSOURCE
      SOURCE #getTargetRepositoryFolder
        #public FilePath getTargetRepositoryFolder()
        #{
        #
        #    str result = this.RepositoryFolder;
        #
        #    if (this.VCSType == SysVersionControlType::SysVersionControlTfs && this.AppRoot)
        #    {
        #        result = this.getRepositoryFolder(this.RepositoryFolder, this.AppRoot);
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #serverPathToLocalPath
        #private str serverPathToLocalPath(str path)
        #{
        #    #File
        #    #define.serverPathDelimiter('/')
        #    str result = path;
        #
        #    result = strReplace(result, #ServerPathDelimiter, #FilePathDelimiter);
        #
        #    if (strEndsWith(result, #FilePathDelimiter))
        #    {
        #        result = strDel(result, strLen(result), 1);
        #    }
        #
        #    if (strStartsWith(result, #FilePathDelimiter))
        #    {
        #        result = strDel(result, 1, 1);
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean validateWrite()
        #{
        #    boolean ret;
        #
        #    ret = super();
        #
        #    if (ret && this.RepositoryFolder && strEndsWith(this.RepositoryFolder, @'\'))
        #    {
        #        ret = checkFailed(strFmt("@SYS4000115", this.RepositoryFolder));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #find
        #public client server static SysVersionControlParameters find(boolean _forupdate = false)
        #{
        #    #SysVersionControl
        #    SysVersionControlParameters parameter;
        #
        #    parameter.selectForUpdate(_forupdate);
        #    select firstonly parameter
        #        index Key
        #        where parameter.Key == 0;
        #
        #    // Do not create record if we're in config mode
        #    if (!parameter && !parameter.isTmp() && !appl.isConfigMode())
        #    {
        #        ttsbegin;
        #        Company::createParameter(parameter);
        #
        #        if(parameter)
        #        {
        #            parameter.selectForUpdate(true);
        #            //default start value for first time setup
        #            parameter.vcsEnabled = EnableDisable::Disable;
        #            parameter.vssProjectRoot = '$/';
        #            parameter.TfsServer = 'http://';
        #            parameter.uiFlags = #VCWarnWhenReverting | #VCAOTColoring;
        #            parameter.update();
        #        }
        #        ttscommit;
        #    }
        #
        #    return parameter;
        #}
      ENDSOURCE
      SOURCE #getTargetRepositoryFolderPath
        #public static FilePath getTargetRepositoryFolderPath()
        #{
        #    SysVersionControlParameters sysVersionControlParameters = SysVersionControlParameters::find();
        #
        #    return sysVersionControlParameters.getTargetRepositoryFolder();
        #}
      ENDSOURCE
      SOURCE #getVCSType
        #public client server static SysVersionControlType getVCSType()
        #{
        #    SysVersionControlParameters sysVersionControlParameters = SysVersionControlParameters::find();
        #    return sysVersionControlParameters.VCSType;
        #}
      ENDSOURCE
      SOURCE #isVCSEnabled
        #public client server static boolean isVCSEnabled()
        #{
        #    SysVersionControlParameters sysVersionControlParameters = SysVersionControlParameters::find();
        #    ;
        #
        #    return sysVersionControlParameters && sysVersionControlParameters.vcsEnabled == EnableDisable::Enable;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlFileBasedBackEndSD unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlFileBasedBackEndSD
    PROPERTIES
      Name                #SysVersionControlFileBasedBackEndSD
      RunOn               #Client
      Origin              #{2D2347D2-0000-1000-9FEA-6CA08B7850CB}
      LegacyId            #18386
    ENDPROPERTIES
    
    METHODS
      SOURCE #actionText
        #/// <summary>
        #/// Microsoft internal use only.
        #/// </summary>
        #/// <param name="_action">
        #/// The action to convert.
        #/// </param>
        #/// <returns>
        #/// The description of the back end of the action.
        #/// </returns>
        #/// <remarks>
        #/// Converts an action to the description of the back end of the action.The description of the back end
        #/// of the action must match the populated values in the <c>SysVersionControlTmpItem.ActionText</c>
        #/// table field.
        #/// </remarks>
        #public str actionText(SysVersionControlSystemFileAction _action)
        #{
        #    switch (_action)
        #    {
        #        case SysVersionControlSystemFileAction::Delete:
        #            return #SDActionDelete;
        #        case SysVersionControlSystemFileAction::Add:
        #            return #SDActionAdd;
        #        case SysVersionControlSystemFileAction::Branch:
        #            return #SDActionBranch;
        #        case SysVersionControlSystemFileAction::Edit:
        #            return #SDActionEdit;
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #actionTextForCheckedOutFile
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve the action text for.
        #/// </param>
        #/// <returns>
        #///    The action text for this file.
        #/// </returns>
        #/// <remarks>
        #///    Gets the action text for a checked out file.This method is used with the Source Depot version
        #///    control
        #/// </remarks>
        #public str actionTextForCheckedOutFile(Filename _filename)
        #{
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDOpenedFile, _filename));
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        if (sdCommandOutputs.count())
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(0);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            return this.getVar(sdVariables, #SdVarAction);
        #        }
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #buildHistoryItem
        #private void buildHistoryItem(
        #    COM _sdVariables,
        #    SysVersionControlTmpItem _item,
        #    int _variableX = -1) //zero based
        #{
        #;
        #    _item.clear();
        #    if (!prmisDefault(_variableX))
        #    {
        #        _item.Version        = str2int(this.getVarX(_sdVariables, #SdVarRev, _variableX));
        #        _item.Comment        = this.getVarX(_sdVariables, #SdVarDesc, _variableX);
        #        _item.User           = this.getVarX(_sdVariables, #SdVarUser, _variableX);
        #        _item.ComputerName   = this.getVarX(_sdVariables, #SdVarClient, _variableX);
        #        _item.ActionText     = this.getVarX(_sdVariables, #SdVarAction, _variableX);
        #        _item.ChangeNumber   = str2int(this.getVarX(_sdVariables, #SdVarChange, _variableX));
        #
        #        [_item.vcsDate,
        #         _item.vcsTime]      = this.int2DateTime(str2int(this.getVarX(_sdVariables, #SdVarTime, _variableX)));
        #    }
        #    else
        #    {
        #        _item.Version        = str2int(this.getVar(_sdVariables, #SdVarRev));
        #        _item.Comment        = this.getVar(_sdVariables, #SdVarDesc);
        #        _item.User           = this.getVar(_sdVariables, #SdVarUser);
        #        _item.ComputerName   = this.getVar(_sdVariables, #SdVarClient);
        #        _item.ActionText     = this.getVar(_sdVariables, #SdVarAction);
        #        _item.ChangeNumber   = str2int(this.getVar(_sdVariables, #SdVarChange));
        #
        #        [_item.vcsDate,
        #         _item.vcsTime]      = this.int2DateTime(str2int(this.getVar(_sdVariables, #SdVarTime)));
        #    }
        #}
      ENDSOURCE
      SOURCE #canRevert
        #// Verify that a revert of a deleted object can be done. A revert is not only successful from the
        #// file backend, it also has to be able to be imported successfully in the AOT.
        #// Get a virtual temporary tree node and validate if the ID is held by another name of the same type.
        #private boolean canRevert(Filename _filename)
        #{
        #    SysVersionControlTmpItem tmpItem;
        #    Filename tmpFilename;
        #    TreeNode tmpNode;
        #    UtilIdElements idElement;
        #
        #    // The ID can be validated only for XPO files.
        #    if (this.actionTextForCheckedOutFile(_filename) == #SDActionDelete && strEndsWith(_filename, #XPO))
        #    {
        #        tmpItem.Version = 0;
        #        tmpItem.InternalFilename = _filename;
        #
        #        tmpFilename = this.fileGetVersion(_filename, tmpItem);
        #
        #        tmpNode = tmpItem.getVirtualTreenode(tmpFilename);
        #
        #        if (tmpNode &&
        #            tmpNode.applObjectId() &&
        #            tmpNode.treeNodeType().isUtilElement())
        #        {
        #            // Get name of possible existing object name
        #            select firstonly Name from idElement where idElement.Id == tmpNode.utilIdElement().Id
        #                && idElement.ParentId == 0
        #                && idElement.RecordType == tmpNode.utilIdElement().RecordType;
        #
        #            // Check if the ID is already used in the AOD with a different name
        #            if (idElement.Name && idElement.Name != tmpNode.treeNodeName())
        #            {
        #                error(strFmtLB(strFmt("@SYS112908",
        #                    tmpNode.utilIdElement().Id,
        #                    tmpNode.utilIdElement().RecordType,
        #                    idElement.Name,
        #                    tmpNode.treeNodePath())));
        #                return false;
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #changeListContents
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <param name="_number">
        #///    The specified change list number of which to retrieve the contents.
        #/// </param>
        #/// <returns>
        #///    The contents of the change list.
        #/// </returns>
        #/// <remarks>
        #///    Gets the contents of a checked in change list.The returned table contains one record for each file
        #///    in the change list.This method is used with the Source Depot version control.
        #/// </remarks>
        #public SysVersionControlTmpItem changeListContents(SysVersionControlChangeNumber _number)
        #{
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDDescribe, _number));
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #    int i = 0;
        #    SysVersionControlTmpItem item;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        sdCommandOutput  = sdCommandOutputs.item(0);
        #        sdVariables      = sdCommandOutput.variables();
        #
        #        while (this.getVarX(sdVariables, #SdVarRev, i))
        #        {
        #            this.buildHistoryItem(sdVariables, item);
        #
        #            item.Version        = str2int(this.getVarX(sdVariables, #SdVarRev, i));
        #            item.ActionText     = this.getVarX(sdVariables, #SdVarAction, i);
        #            item.InternalFilename = this.getVarX(sdVariables, #SdVarDepotFile, i);
        #            item.StatusText = this.getVarX(sdVariables, #SdVarStatus, i);
        #
        #            item.insert();
        #            i++;
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #changeListsPending
        #/// <summary>
        #/// Gets the pending change lists.
        #/// </summary>
        #/// <returns>
        #/// The pending change lists.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each pending change list.
        #/// </remarks>
        #public SysVersionControlPendingChangeList changeListsPending()
        #{
        #    COM sdResult;
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    SysVersionControlPendingChangeList changeList;
        #    str message;
        #    str userName;
        #    str clientName;
        #    int i;
        #    int pos;
        #
        #    sdResult = this.executeStructuredCommand(#SDInfo, '', false, true);
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.infoOutput();
        #        for (i=0; i<sdCommandOutputs.count(); i++)
        #        {
        #            if (!userName || !clientName)
        #            {
        #                sdCommandOutput  = sdCommandOutputs.item(i);
        #                message    = sdCommandOutput.message();
        #                pos = strScan(message, #SdVarUserName, 1, maxInt());
        #                if(pos)
        #                {
        #                    userName = subStr(message, pos+strLen(#SdVarUserName),maxInt());
        #                }
        #                pos = strScan(message, #sdVarClientName, 1, maxInt());
        #                if (pos)
        #                {
        #                    clientName = subStr(message, pos+strLen(#SdVarClientName),maxInt());
        #                }
        #            }
        #        }
        #
        #        sdResult = this.executeStructuredCommand(strFmt(#SDChangeLists,userName, clientName));
        #
        #        if (sdResult)
        #        {
        #            changeList.clear();
        #            changeList.Id = #DefaultChangeList;
        #            changeList.insert();
        #
        #            sdCommandOutputs = sdResult.structuredOutput();
        #            for (i=0; i< sdCommandOutputs.count(); i++)
        #            {
        #                sdCommandOutput = sdCommandOutputs.item(i);
        #                sdVariables = sdCommandOutput.variables();
        #
        #                changeList.clear();
        #                changeList.Id = this.getVar(sdVariables, #SdVarChange);
        #                changeList.Description = this.getVar(sdVariables, #SdVarDesc);
        #                changeList.insert();
        #            }
        #        }
        #    }
        #
        #    return changeList;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    Microsoft internal use only.
        #/// </summary>
        #/// <remarks>
        #///    This method controls a file-based version control system back end for Source depot. All operations
        #///    of this class are based on files and folders.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysVersionControlFileBasedBackEndSD
        #implements SysVersionControlFilebasedBackEnd
        #{
        #    COM sdConnection;
        #    COM sdCheckInResult;
        #
        #    boolean useCheckInWizard;
        #    SysVersionControlBranch branch;
        #    SysVersionControlRepositoryFolder folder;
        #
        #    #SysVersionControl
        #    #WinApi
        #    #File
        #
        #    #define.dpk('.dpk')
        #
        #    #define.XMLSDPort('SDPort')
        #    #define.XMLSDProxy('SDProxy')
        #
        #    #SysVersionControlSourceDepotXML
        #
        #    #define.SDProgramId('SourceDepot.SDConnection')
        #
        #    #define.SDActionBranchFrom  ('Branch from')
        #    #define.SDActionBranch      ('Branch')
        #    #define.SDActionDelete      ('Delete')
        #    #define.SDActionAdd         ('Add')
        #    #define.SDActionEdit        ('Edit')
        #
        #    #define.SDEdit              ('edit')
        #    #define.SDAdd               ('add')
        #    #define.SDDelete            ('delete')
        #    #define.SDRevert            ('revert')
        #    #define.SDSync              ('sync')
        #    #define.SDSyncForced        ('sync -f')
        #    #define.SDSyncAll           ('sync \%1')
        #    #define.SDSyncAllForced     ('sync -f \%1')
        #    #define.SDAddAll            ('add "\%1"\\...')
        #    #define.SDChange            ('change -o')
        #    #define.SDSubmit            ('submit -C "\%1"')
        #    #define.SDSubmitAll         ('submit -C "\%1" "\%2"\\...')
        #    #define.SDSubmitChangeList  ('submit -c "\%1"')
        #    #define.SDSubmitSpecData    ('submit -i')
        #    #define.SDFileLog           ('filelog -i -l "\%1"')
        #    #define.SDPrint             ('print -o "\%1"')
        #    #define.SDIntegrate         ('integrate "\%1"')
        #    #define.SDDescribe          ('describe "\%1"')
        #    #define.SDOpened            ('opened "\%1"\\...')
        #    #define.SDOpenedChangeList  ('opened -c \%1 "\%2"\\...')
        #    #define.SDOpenedAll         ('opened -a')
        #    #define.SDChanges           ('changes -l "\%1"\\...')
        #    #define.SDChangeLists       ('changes -r -s pending -u \%1 -c \%2')
        #    #define.SDOpenedFile        ('opened "\%1"')
        #    #define.SDResolveMerged     ('resolve -am')
        #    #define.SDResolveYours      ('resolve -ay')
        #    #define.SDInfo              ('info')
        #    #define.SDLock              ('lock')
        #    #define.SDUnlock            ('unlock')
        #    #define.SDFiles             ('files -d')
        #    #define.SDFstat             ('fstat -s')
        #
        #    #define.SDVarStatus         ('status')
        #    #define.SDVarRev            ('rev')
        #    #define.SDVarClient         ('client')
        #    #define.SDVarUser           ('user')
        #    #define.SDVarDesc           ('desc')
        #    #define.SDVarAction         ('action')
        #    #define.SDVarTime           ('time')
        #    #define.SDVarDepotFile      ('depotFile')
        #    #define.SDVarBranchFile     ('branchFile')
        #    #define.SDVarClientFile     ('clientFile')
        #    #define.SDVarChange         ('change')
        #    #define.SDVarHow            ('how')
        #    #define.SDVarFile           ('file')
        #    #define.SdVarUserName       ('User name: ')
        #    #define.SdVarClientName     ('Client name: ')
        #
        #    #define.SDSpecDataDescription ('Description')
        #    #define.SDSpecDataFiles       ('Files')
        #
        #    #define.SDCommmandAdded       ('Added')
        #    #define.SDCommmandUpdating    ('Updating')
        #    #define.SDCommmandRefreshing  ('Refreshing')
        #    #define.SDCommmandDeleted     ('Deleted')
        #
        #    #define.SDCommmandAdd         ('Add')
        #    #define.SDCommmandEdit        ('Edit')
        #    #define.SDCommmandDelete      ('Delete')
        #
        #    #define.SDRevisionHave        ('\%1#have')
        #    #define.SDRevisionHead        ('\%1#head')
        #
        #    #define.SDP                   ('sdp')
        #    #define.SDPCmdLine            ('pack -C \%1 \"\%2\" \%3')
        #
        #    #define.checkinw              ('cmd')
        #    #define.checkinwCmdline       (@'/k set inetroot=folder&folder\tools\path1st\myenv.cmd&checkin submit&exit')
        #    #define.checkinwCmdlineChangeList(@'/k set inetroot=folder&folder\tools\path1st\myenv.cmd&checkin submit -c change&exit')
        #
        #    #define.DefaultChangeList   ('default')
        #
        #    #define.MustResolveText('must resolve')
        #
        #    #define.delimiter(' - ')
        #    #define.uptodate('up-to-date.')
        #    #define.space(' ')
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #/// <summary>
        #///    Checks the repository in.
        #/// </summary>
        #/// <param name="_comment">
        #///    The comment to use for the check-in.
        #/// </param>
        #/// <remarks>
        #///    This method is invoked at the end of the create repository operation.
        #/// </remarks>
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    COM specData = this.getSpecData(#SDChange);
        #
        #    specData.item(#SDSpecDataDescription, _comment);
        #    sdConnection.specData(specData);
        #    this.executeCommand(#SDSubmitSpecData);
        #}
      ENDSOURCE
      SOURCE #description
        #/// <summary>
        #/// Provides a description of the class.
        #/// </summary>
        #/// <returns>
        #/// The class description.
        #/// </returns>
        #public ClassDescription description()
        #{
        #    return "@SYS85682";
        #}
      ENDSOURCE
      SOURCE #errorHandling
        #protected boolean errorHandling(COM _sdResult, boolean _warningsAsErrors = false, boolean _noInfo = false)
        #{
        #    COM errorOutput = _sdResult.errorOutput();
        #    COM warningOutput = _sdResult.warningOutput();
        #
        #    if (errorOutput.count() > 0 ||
        #       (_warningsAsErrors && warningOutput.count() > 0 ))
        #    {
        #        if(!_noInfo)
        #            this.processOutput(_sdResult.infoOutput(),      Exception::Info);
        #        this.processOutput(_sdResult.warningOutput(),   Exception::Warning);
        #        this.processOutput(errorOutput,                 Exception::Error);
        #        return false;
        #    }
        #
        #    if(!_noInfo)
        #        this.processOutput(_sdResult.infoOutput(),      Exception::Info);
        #    this.processOutput(_sdResult.warningOutput(),   Exception::Warning);
        #    return true;
        #}
      ENDSOURCE
      SOURCE #executeCommand
        #protected boolean executeCommand(str _command, str _args = '', boolean _warningsAsErrors = true, boolean _noInfo = false)
        #{
        #    COM sdResult;
        #
        #    if (!prmisDefault(_args))
        #        sdConnection.addArg(_args);
        #
        #    sdResult = sdConnection.run(_command);
        #    this.waitUntilFinished(sdResult, strFmt("%1 %2", _command, _args));
        #
        #    return this.errorHandling(sdResult, _warningsAsErrors, _noInfo);
        #}
      ENDSOURCE
      SOURCE #executeStructuredCommand
        #protected COM executeStructuredCommand(str _command, str _args = '', boolean _warningsAsErrors = false, boolean _noInfo = false)
        #{
        #    COM sdResult = this.executeStructuredCommandSilent(_command, _args);
        #
        #    if (this.errorHandling(sdResult, _warningsAsErrors, _noInfo))
        #        return sdResult;
        #    return null;
        #}
      ENDSOURCE
      SOURCE #executeStructuredCommandSilent
        #protected COM executeStructuredCommandSilent(str _command, str _args = '')
        #{
        #    COM sdResult;
        #
        #    if (!prmisDefault(_args) && _args)
        #        sdConnection.addArg(_args);
        #
        #    sdResult = sdConnection.run(_command, true /*structured output*/);
        #    this.waitUntilFinished(sdResult, strFmt("%1 %2", _command, _args));
        #
        #    return sdResult;
        #}
      ENDSOURCE
      SOURCE #fileAddToVersionControl
        #/// <summary>
        #///    Adds a file to the version control system.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to add.
        #/// </param>
        #/// <param name="_comment">
        #///    A comment to the file which is added; optional; optional.
        #/// </param>
        #/// <returns>
        #///    true if the file was added successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file will be available to other users after a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileAddToVersionControl(Filename _filename, SysVersionControlItemComment _comment = '')
        #{
        #    if (this.verifyOwner(_filename))
        #    {
        #        if (this.executeCommand(#SDAdd, _filename, true))
        #        {
        #            return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileCheckedOutTo
        #/// <summary>
        #/// Returns a list of users to whom a file is checked out to.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// A comma separated list of users; otherwise, an empty string.
        #/// </returns>
        #public str fileCheckedOutTo(Filename _filename)
        #{
        #    COM sdResult;
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    int lines;
        #
        #    //Do not display error/warning/info information, as this is a background query
        #    lines = infologLine();
        #    sdResult = this.executeStructuredCommand(#SDOpenedAll, _filename);
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        if (sdCommandOutputs.count())
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(0);
        #            sdVariables      = sdCommandOutput.variables();
        #            return this.getVar(sdVariables, #SDVarUser);
        #        }
        #    }
        #
        #    infolog.clear(lines);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileCheckout
        #/// <summary>
        #/// Checks out the file that is to be edited.
        #/// </summary>
        #/// <param name="_filename">
        #/// The checked out file.
        #/// </param>
        #/// <returns>
        #/// true if the file is checked out; otherwise, false.
        #/// </returns>
        #public boolean fileCheckout(Filename _filename)
        #{
        #    return this.executeCommand(#SDEdit, _filename, false);
        #}
      ENDSOURCE
      SOURCE #fileDelete
        #/// <summary>
        #///    Checks out a file for deletion.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to delete.
        #/// </param>
        #/// <returns>
        #///    true if the file was deleted successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file is deleted in the back end by a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileDelete(Filename _filename)
        #{
        #    if (this.executeCommand(#SDDelete, _filename))
        #    {
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileExists
        #/// <summary>
        #/// Verifies whether a file exists in the back end.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// true if the file exists in the back end; otherwise, false.
        #/// </returns>
        #public boolean fileExists(Filename _filename)
        #{
        #    return this.executeCommand(#SDFiles, _filename, true);
        #}
      ENDSOURCE
      SOURCE #fileGetVersion
        #/// <summary>
        #///    Retrieves a version of a file from the storage of the back end.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve a version of.
        #/// </param>
        #/// <param name="_item">
        #///    The that corresponds to temporary record of the version control item in the requested version.
        #/// </param>
        #/// <returns>
        #///    A fully qualified file name to a temporary location where the version of the file has been saved.
        #/// </returns>
        #/// <remarks>
        #///    If <c>_version</c> is 0 (zero), the latest version of the file is requested.If <c>_version</c> is
        #///    -1 (minus-one), the back end's copy of the local version is requested. That is the version the user
        #///    received the last time, they synchronized.
        #/// </remarks>
        #public Filename fileGetVersion(Filename _filename, SysVersionControlTmpItem _item)
        #{
        #    Filename tmpfilename;
        #    Filename filename;
        #    boolean  useCache;
        #    int      lines;
        #    SysVersionControllable controllable;
        #
        #    switch (_item.Version)
        #    {
        #        case -1:
        #            filename = strFmt(#SDRevisionHave, _filename);
        #            useCache = false;
        #            break;
        #
        #        case 0:
        #            filename = strFmt(#SDRevisionHead, _filename);
        #            useCache = false;
        #            break;
        #
        #        default:
        #            filename = strFmt('%1@%2', _filename, _item.ChangeNumber);
        #            useCache = true;
        #            break;
        #
        #    }
        #
        #    controllable = _item.getControllable();
        #
        #    if (useCache)
        #    {
        #        tmpfilename = strFmt('%1\\%2@%3%4',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), strAlpha(controllable.versionControlItemPath()), _item.ChangeNumber, controllable.fileExtension());
        #    }
        #    else
        #    {
        #        tmpfilename = strFmt('%1\\%2#%3%4',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), strAlpha(controllable.versionControlItemPath()), WinAPI::createGUID(), controllable.fileExtension());
        #    }
        #
        #    if (!useCache || !WinAPI::fileExists(tmpfilename))
        #    {
        #        lines = infologLine();
        #
        #        //
        #        // If not checked in #have will generate an error
        #        //
        #        if (this.executeCommand(strFmt(#SDPrint, tmpfilename), filename) || _item.Version == -1)
        #        {
        #            infolog.clear(lines);
        #        }
        #    }
        #    if (WinAPI::fileExists(tmpfilename))
        #    {
        #        return tmpfilename;
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileHistory
        #/// <summary>
        #///    Retrieves a list of all revisions of a file from the storage of the back end.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve information for.
        #/// </param>
        #/// <returns>
        #///    A temporary table that contains a record that describes each revision.
        #/// </returns>
        #public SysVersionControlTmpItem fileHistory(Filename _filename)
        #{
        #    return this.getFileNameHistory(_filename);
        #}
      ENDSOURCE
      SOURCE #fileLock
        #/// <summary>
        #///    Locks a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to lock.
        #/// </param>
        #/// <returns>
        #///    true if the file is locked; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    While a file is locked other users cannot check-in changes to the file.
        #/// </remarks>
        #public boolean fileLock(Filename _filename)
        #{
        #    return this.executeCommand(#SDLock, _filename);
        #}
      ENDSOURCE
      SOURCE #fileRename
        #/// <summary>
        #///    Renames a file.
        #/// </summary>
        #/// <param name="_oldFilename">
        #///    The file to rename.
        #/// </param>
        #/// <param name="_newFilename">
        #///    The new name of the file.
        #/// </param>
        #/// <returns>
        #///    true if the rename operation is successful; otherwise, false.
        #/// </returns>
        #public boolean fileRename(Filename _oldFilename, Filename _newFilename)
        #{
        #    if (this.executeCommand(strFmt(#SDIntegrate, _oldFilename), _newFilename))
        #    {
        #        if (this.executeCommand(#SDDelete, _oldFilename))
        #        {
        #            if (this.executeCommand(#SDEdit, _newFilename, false))
        #            {
        #                return true;
        #            }
        #        }
        #
        #        //
        #        // Something went wrong doing rename
        #        // Clean up the dublicated file created by "sd integrate"
        #        //
        #        WinAPI::deleteFile(_newFilename);
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileSetCheckin
        #/// <summary>
        #/// Checks in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to check in.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the check-in.
        #/// </param>
        #/// <param name="_changeList">
        #/// The changelist to check-in.
        #/// </param>
        #/// <param name="_workItems">
        #/// The work items associated with the files to check-in.
        #/// </param>
        #/// <returns>
        #/// true if the check-in is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Any file that is successfully checked in is also unlocked.
        #/// </remarks>
        #public boolean fileSetCheckin(
        #    Map _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    #define.failText('Submit failed')
        #    #define.digits('0123456789')
        #    #define.useSubmit('use \'sd submit -c')
        #
        #    boolean resolvedOk;
        #    Map resolveFiles;
        #    Filename resolveFilename;
        #    int idx;
        #    str message;
        #    str changeNum;
        #
        #    COM commandOutPut;
        #    COM specData;
        #    COM errorOutput;
        #    COM warningOutput;
        #
        #    str cmd;
        #
        #    COMVariant variant = new COMVariant(COMVariantInOut::In, COMVariantType::VT_SAFEARRAY);
        #
        #    Array arr = new Array(Types::String);
        #
        #    SysBuildNo nextBuildNo;
        #
        #    Filename filename;
        #    MapEnumerator filesEnumerator;
        #    int i = 0;
        #
        #    sdCheckInResult = null;
        #    if (!_comment) //Use gated check-in
        #    {
        #        if (_changeList && _changeList != #DefaultChangeList)
        #        {
        #            cmd = #checkinwCmdlineChangeList;
        #            cmd = strReplace(cmd, 'change', _changeList);
        #        }
        #        else
        #        {
        #            cmd = #checkinWCmdLine;
        #        }
        #        cmd = strReplace(cmd, 'folder', SysVersionControlParameters::find().RepositoryFolder);
        #        WinAPI::shellExecute(#checkinW, cmd, SysVersionControlParameters::find().RepositoryFolder, #ShellExeOpen, #SW_SHOWNORMAL );
        #    }
        #    else
        #    {
        #        filesEnumerator = _setOfFiles.getEnumerator();
        #        filesEnumerator.reset();
        #
        #        while (filesEnumerator.moveNext())
        #        {
        #            // Get internal depot filename of client filename
        #            filename = this.getDepotFilename(filesEnumerator.currentKey());
        #            if (filename)
        #            {
        #                i++;
        #                arr.value(i, filename);
        #            }
        #        }
        #
        #        variant.safeArray(arr, COMVariantType::VT_VARIANT);
        #
        #        specData = this.getSpecData(#SDChange);
        #        specData.item(#SDSpecDataFiles, variant);
        #        specData.item(#SDSpecDataDescription, _comment);
        #
        #        sdConnection.specData(specData);
        #
        #        sdCheckInResult = this.executeStructuredCommandSilent(#SDSubmitSpecData);
        #        errorOutput = sdCheckInResult.errorOutput();
        #        if (errorOutput.count())
        #        {
        #            // Resolve needed
        #            errorOutput = sdCheckInResult.errorOutput();
        #            for (i = 0; i < errorOutput.count(); i++)
        #            {
        #                commandOutPut = errorOutput.item(i);
        #
        #                message = commandOutPut.message();
        #                if (strScan(message, #failText, 1, strLen(message)))
        #                {
        #                    idx = strScan(message, #useSubmit, 1, strLen(message));
        #                    if (idx)
        #                    {
        #                        changeNum = subStr(message, idx + strLen(#useSubmit), strLen(message));
        #                        changeNum = strKeep(changeNum, #digits);
        #                        break;
        #                    }
        #                }
        #            }
        #
        #            warningOutput = sdCheckInResult.warningOutput();
        #            resolveFiles = new Map(Types::String, Types::String);
        #            resolvedOk = true;
        #            for (i = 0; i < warningOutput.count(); i++)
        #            {
        #                commandOutPut = warningOutput.item(i);
        #                message = commandOutPut.message();
        #                if (strScan(message, #MustResolveText, 1, strLen(message)))
        #                {
        #                    resolveFilename = subStr(message, 1, strFind(message, ' ', 1, strLen(message))-1);
        #                    resolveFiles.insert(resolveFilename, '');
        #                }
        #            }
        #
        #            filesEnumerator = resolveFiles.getEnumerator();
        #            while (filesEnumerator.moveNext())
        #            {
        #                if (SysLabelFile::isLabelFile(resolveFilename))
        #                {
        #                    resolvedOk = this.executeCommand(#SDResolveYours, resolveFilename) && resolvedOk;
        #                }
        #                else
        #                {
        #                    resolvedOk = this.executeCommand(#SDResolveMerged, resolveFilename) && resolvedOk;
        #                }
        #            }
        #
        #            if (resolvedOk && changeNum)
        #            {
        #                return this.executeCommand(strFmt(#SDSubmitChangeList, changeNum));
        #            }
        #        }
        #        else
        #        {
        #            nextBuildNo = SysVersionControlFileBasedBackEndSD::nextBuildNo();
        #            if (nextBuildNo)
        #            {
        #                info(strFmt("@SYS86585", nextBuildNo));
        #            }
        #            return true;
        #        }
        #        // Otherwise return false
        #        return false;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileSetResolve
        #/// <summary>
        #/// Resolves conflicts in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to resolve.
        #/// </param>
        #/// <returns>
        #/// true if the set of files are resolved successful; otherwise, false.
        #/// </returns>
        #public boolean fileSetResolve(Map _setOfFiles)
        #{
        #    boolean resolvedOk = false;
        #    MapEnumerator mapEnum;
        #
        #    if (_setOfFiles)
        #    {
        #        mapEnum = _setOfFiles.getEnumerator();
        #        mapEnum.reset();
        #
        #        resolvedOk = true;
        #
        #        while ( mapEnum.moveNext())
        #        {
        #            resolvedOk = this.executeCommand(#SDResolveMerged, mapEnum.currentKey(), true, false) && resolvedOk;
        #        }
        #    }
        #    return resolvedOk;
        #}
      ENDSOURCE
      SOURCE #filesPending
        #/// <summary>
        #///    Gets the pending files.
        #/// </summary>
        #/// <param name="_changeListId">
        #///    The ID of the pending change list of which to retrieve the contents.
        #/// </param>
        #/// <param name="_folder">
        #///    The repository folder.
        #/// </param>
        #/// <returns>
        #///    The pending files.
        #/// </returns>
        #/// <remarks>
        #///    The returned table contains one record for each pending file.If the <c>changeListId</c> field is
        #///    blank, the contents of the default change list is returned.
        #/// </remarks>
        #public SysVersionControlTmpItem filesPending(
        #    SysVersionControlChangeListId _changeListId,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    SysVersionControlTmpItem item;
        #    str defFile;
        #
        #    if(_changeListId)
        #    {
        #        this.getPendingChangeList(item, strFmt(#SDOpenedChangeList, _changeListId, _folder), true);
        #    }
        #    else
        #    {
        #        this.getPendingChangeList(item, strFmt(#SDOpened, _folder), true);
        #    }
        #
        #    if (branch)
        #    {
        #        defFile = SysVersionControlParameters::find().RepositoryFolder + #DefFile;
        #        this.getPendingChangeList(item, strFmt(#SDOpenedFile, defFile), true);
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #fileSynchronize
        #/// <summary>
        #///    Gets a specific version of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class that specifies the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contains the file name and the action performed on the file.
        #/// </returns>
        #/// <remarks>
        #///    When the version in the <c>syncParameters</c> parameter is not specified, the latest version of the
        #///    file will be retrieved.
        #/// </remarks>
        #public Map fileSynchronize(
        #    Filename _filename,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    Map retMap = new Map(Types::String, Types::Enum); // Filename, Synchronization-command
        #
        #    int firstLine = infologLine();
        #    int lastLine;
        #    int i;
        #    str commandStr;
        #    str message;
        #    str warningText;
        #    Filename localFilename = _syncParameters.parmChangeListNumber() == 0 ? _filename : strFmt('%1@%2', _filename, _syncParameters.parmChangeListNumber());
        #    Filename syncFileName;
        #    Filename arg;
        #    SysVersionControlSynchronizeCommand command;
        #
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #
        #    if (_syncParameters.parmChangeListNumber() == 0)
        #    {
        #        // Use local file name when syncing head revision.
        #        syncFileName = localFilename;
        #        arg = syncFileName;
        #    }
        #    else
        #    {
        #        syncFileName = this.getDepotFilename(localFilename, false);
        #        arg = strFmt('%1@%2', syncFileName, _syncParameters.parmChangeListNumber());
        #    }
        #
        #    if (!syncFileName)
        #        return retMap;
        #
        #    if ( _syncParameters.parmForce())
        #    {
        #        commandStr = #SDSyncForced;
        #    }
        #    else
        #    {
        #        commandStr = #SDSync;
        #    }
        #
        #    sdResult = this.executeStructuredCommand(commandStr, arg, false, _syncParameters.parmSilent());
        #
        #    if (sdResult)
        #    {
        #        lastLine = infologLine();
        #        warningText = infolog.text(lastLine);
        #
        #        if (lastLine >= firstLine &&
        #            _syncParameters.parmSilent() &&
        #            strScan(warningText, #uptodate, 1, strLen(warningText)) &&
        #            strScan(warningText, syncFileName, 1, strLen(warningText)))
        #        {
        #            infolog.clear(firstLine);
        #        }
        #
        #        sdCommandOutputs = sdResult.infoOutput();
        #
        #        for ( i = 0; i < sdCommandOutputs.count(); i++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            message    = sdCommandOutput.message();
        #            commandStr = subStr(message, strScan(message,#delimiter,1,maxInt())+strLen(#delimiter),maxInt());
        #            commandStr = subStr(commandStr, 1, strScan(commandStr,#space,1,maxInt())-1);
        #
        #            switch(commandStr)
        #            {
        #                case #SDCommmandAdded:
        #                    command = SysVersionControlSynchronizeCommand::Add;
        #                    break;
        #
        #                case #SDCommmandUpdating:
        #                case #SDCommmandRefreshing:
        #                    command = SysVersionControlSynchronizeCommand::Update;
        #                    break;
        #
        #                case #SDCommmandDeleted:
        #                    command = SysVersionControlSynchronizeCommand::Delete;
        #                    break;
        #
        #                default:
        #                    //In case the command is something else
        #                    //skip the file
        #                    continue;
        #            }
        #
        #            retMap.insert(_filename, command);
        #        }
        #    }
        #
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #fileUndoCheckout
        #/// <summary>
        #///    Reverts the check-out of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file for which to undo check-out.
        #/// </param>
        #/// <returns>
        #///    A container with a Boolean value that indicates whether the check-out was successful and the name
        #///    of the file.
        #/// </returns>
        #public container fileUndoCheckout(Filename _filename)
        #{
        #    boolean reverted = false;
        #
        #    if (this.canRevert(_filename))
        #    {
        #        reverted = this.executeCommand(#SDRevert, _filename);
        #    }
        #    return [reverted, (reverted == true ? _filename : '')];
        #}
      ENDSOURCE
      SOURCE #fileUnlock
        #/// <summary>
        #///    Unlocks a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to unlock.
        #/// </param>
        #/// <returns>
        #///    true if the file is unlocked successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    While a file is locked, other users cannot check-in changes to the file.
        #/// </remarks>
        #public boolean fileUnlock(Filename _filename)
        #{
        #    return this.executeCommand(#SDUnlock, _filename);
        #}
      ENDSOURCE
      SOURCE #folderChanges
        #/// <summary>
        #/// Returns all change lists for a folder.
        #/// </summary>
        #/// <param name="_folder">
        #/// The folder to retrieve information for.
        #/// </param>
        #/// <returns>
        #/// The change lists.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each change list.
        #/// </remarks>
        #public SysVersionControlTmpChange folderChanges(FilePath _folder)
        #{
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDChanges, _folder));
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #    int i;
        #
        #    SysVersionControlTmpChange item;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        for ( i = 0; i < sdCommandOutputs.count(); i++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            item.clear();
        #            item.User             = this.getVar(sdVariables, #SdVarUser);
        #            item.ComputerName     = this.getVar(sdVariables, #SdVarClient);
        #            item.ChangeNumber     = str2int(this.getVar(sdVariables, #SdVarChange));
        #            [item.vcsDate,
        #            item.vcsTime]         = this.int2DateTime(str2int(this.getVar(sdVariables, #SdVarTime)));
        #            item.Comment          = this.getVar(sdVariables, #SdVarDesc);
        #            item.StatusText       = this.getVar(sdVariables, #SdVarStatus);
        #            item.insert();
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #folderSetSynchronize
        #/// <summary>
        #///    Gets the latest version of one or more folders.
        #/// </summary>
        #/// <param name="_folderSet">
        #///    A set that contains the folders to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class that specifies the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contians the file name and the action performed on the file for each modified file.
        #/// </returns>
        #public Map folderSetSynchronize(
        #    Set _folderSet,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    SetEnumerator folderSetEnum;
        #    str syncFolders;
        #
        #    str commandStr;
        #    str message;
        #    int i;
        #    str filename;
        #
        #    SysVersionControlSynchronizeCommand command;
        #
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #
        #    Map retMap = new Map(Types::String, Types::Enum);
        #
        #    if (_folderSet)
        #    {
        #        folderSetEnum = _folderSet.getEnumerator();
        #
        #        while( folderSetEnum.moveNext() )
        #        {
        #            syncFolders += strFmt(' "%1"\\...', folderSetEnum.current());
        #        }
        #
        #        sdResult = this.executeStructuredCommand(strFmt(_syncParameters.parmForce() ? #SDSyncAllForced : #SDSyncAll, syncFolders), '', false);
        #
        #        if ( sdResult)
        #        {
        #            sdCommandOutputs = sdResult.infoOutput();
        #            for ( i = 0;  i < sdCommandOutputs.count(); i++)
        #            {
        #                sdCommandOutput  = sdCommandOutputs.item(i);
        #                message    = sdCommandOutput.message();
        #                commandStr = subStr(message, strScan(message,#delimiter,1,maxInt())+strLen(#delimiter),maxInt());
        #                commandStr = subStr(commandStr, 1, strScan(commandStr,#space,1,maxInt())-1);
        #
        #                switch(commandStr)
        #                {
        #                    case #SDCommmandAdded:
        #                        command = SysVersionControlSynchronizeCommand::Add;
        #                        break;
        #
        #                    case #SDCommmandUpdating:
        #                    case #SDCommmandRefreshing:
        #                        command = SysVersionControlSynchronizeCommand::Update;
        #                        break;
        #
        #                    case #SDCommmandDeleted:
        #                        command = SysVersionControlSynchronizeCommand::Delete;
        #                        break;
        #
        #                    default:
        #                        //In case the command is something else
        #                        //skip the file
        #                        continue;
        #                }
        #
        #                filename = subStr(message, strScan(message, folder, 1, maxInt()), maxInt());
        #
        #                retMap.insert(filename, command);
        #            }
        #        }
        #
        #    }
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #getDepotFilename
        #private Filename getDepotFilename(Filename _clientFilename, boolean _silent = true)
        #{
        #    COM sdResult;
        #    COM sdVariables;
        #    COM commandOutput;
        #    COM commandOutputs;
        #
        #    Filename depotFilename = '';
        #
        #    sdResult = this.executeStructuredCommandSilent(#SDFstat, _clientFilename);
        #
        #    commandOutputs = sdResult.allOutput();
        #    if (commandOutputs.count() == 1)
        #    {
        #        commandOutput = commandOutputs.item(0);
        #
        #        sdVariables = commandOutput.variables();
        #        depotFilename = this.getVar(sdVariables, #SDVarDepotFile);
        #
        #        if (!_silent)
        #            this.errorHandling(sdResult);
        #    }
        #
        #    return depotFilename;
        #}
      ENDSOURCE
      SOURCE #getFileNameHistory
        #private SysVersionControlTmpItem getFileNameHistory(
        #    Filename                    _filename,
        #    SysVersionControlTmpItem    _item = null)
        #{
        #    int lines = infologLine();
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDFilelog, _filename), '', true);
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #    int i;
        #    int j;
        #    SysVersionControlTmpItem item;
        #
        #    item.setTmpData(_item);
        #
        #    if (sdResult)
        #    {
        #        //Remove info about the files retrieved
        #        infolog.clear(lines);
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        for (j=0; j< sdCommandOutputs.count(); j++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(j);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            i = 0;
        #            while (this.getVarX(sdVariables, #SdVarRev, i))
        #            {
        #                this.buildHistoryItem(sdVariables, item, i);
        #                if (j==0)
        #                    item.InternalFilename = this.getVar(sdVariables, #SDVarDepotFile);
        #                else
        #                    item.InternalFilename = this.getVar(sdVariables, #SDVarBranchFile);
        #
        #                item.insert();
        #                i++;
        #            }
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getPendingChangeList
        #private SysVersionControlTmpItem getPendingChangeList(
        #    SysVersionControlTmpItem _item,
        #    str _depotCommand,
        #    boolean _silent = false)
        #{
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #    COM sdVariables;
        #    int i;
        #    SysVersionControlTmpItem item;
        #    str warningText;
        #
        #    #define.notopened('not opened on this client.')
        #
        #    item.setTmpData(_item);
        #
        #    sdResult = this.executeStructuredCommand(_depotCommand);
        #
        #    if (sdResult)
        #    {
        #        if (_silent)
        #        {
        #            warningText = infolog.text(infologLine());
        #            if (strScan(warningText, #notopened, 1, strLen(warningText)))
        #            {
        #                infolog.clear(infologLine()-1);
        #            }
        #        }
        #
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        for ( i = 0; i < sdCommandOutputs.count(); i++ )
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            this.buildHistoryItem(sdVariables, item);
        #
        #            item.Filename         = this.getVar(sdVariables, #SdVarClientFile);
        #            item.InternalFilename = this.getVar(sdVariables, #SdVarDepotFile);
        #
        #            item.insert();
        #        }
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getSpecData
        #protected COM getSpecData(str _command)
        #{
        #    COM sdResult = this.executeStructuredCommand(_command);
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        sdCommandOutput  = sdCommandOutputs.item(0);
        #        sdVariables      = sdCommandOutput.variables();
        #        return sdVariables.specData();
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getVar
        #protected str getVar(COM _sdVariables, str _s)
        #{
        #    COM sdVariable = _sdVariables.variable(_s);
        #    if (sdVariable)
        #        return sdVariable.value();
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getVarX
        #protected str getVarX(COM _sdVariables, str _s, int _i)
        #{
        #    COM sdVariable = _sdVariables.variableX(_s, _i);
        #    if (sdVariable)
        #        return sdVariable.value();
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getVarXY
        #private str getVarXY(COM _sdVariables, str _s, int _i, int _j)
        #{
        #    COM sdVariable = _sdVariables.variableXY(_s, _i, _j);
        #
        #    if (sdVariable)
        #    {
        #        return sdVariable.value();
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #init
        #/// <summary>
        #/// Initializes the version control system back end.
        #/// </summary>
        #/// <param name="_parameters">
        #/// The parameters of the version control system back end.
        #/// </param>
        #/// <returns>
        #/// The connection status of the version control system back end.
        #/// </returns>
        #/// <remarks>
        #/// This method returns <c>SysVersionControlSystemStatus::WorkingOffline</c> when the back end is unavailable,
        #/// and version control in MorphX should be enabled, but limited to offline capabilities.
        #/// </remarks>
        #public SysVersionControlSystemStatus init(SysVersionControlParameters _parameters)
        #{
        #    int lines;
        #    boolean retCommand;
        #
        #    #define.iniFile('SD.INI')
        #
        #    folder = _parameters.RepositoryFolder;
        #    try
        #    {
        #        //
        #        // Create a connection to SDApi
        #        //
        #        lines = infologLine();
        #        sdConnection = new COM(#SDProgramId);
        #
        #        //
        #        // Load SD.INI file. If file is not found in this path, it will search parent path until in root.
        #        // This is done automatically by SDAPI.
        #        //
        #        lines = infologLine();
        #        try
        #        {
        #            sdConnection.loadIniFile(_parameters.RepositoryFolder, true);
        #        }
        #        catch
        #        {
        #            setPrefix(_parameters.RepositoryFolder);
        #            warning(strFmt("@SYS76826", #iniFile));
        #            infolog.clear(lines);
        #        }
        #
        #        //
        #        // Call a command to make sure we are connected.
        #        // SDInfo only prints to the infolog, the text printed is removed, so the user won't notice.
        #        //
        #        lines = infologLine();
        #        retCommand = this.executeCommand(#SDInfo);
        #        infolog.clear(lines);
        #
        #        if (retCommand == false)
        #        {
        #            return SysVersionControlSystemStatus::WorkingOffline;
        #        }
        #    }
        #    catch
        #    {
        #        infolog.clear(lines);
        #        error(strFmt("@SYS113228"));
        #        //
        #        // SDAPI not installed
        #        //
        #        return SysVersionControlSystemStatus::NotConnected;
        #    }
        #
        #    return SysVersionControlSystemStatus::Connected;
        #}
      ENDSOURCE
      SOURCE #int2DateTime
        #/*
        #    Returns a date and timeofday in the localtime zone based on an int representing the
        #    utc time in seconds since January first 1970.
        #*/
        #protected container int2DateTime(int _time)
        #{
        #    #TimeConstants
        #    #Define.OffsetDate(1\1\1970)
        #    Binary systemTime;
        #    Binary localTime;
        #
        #    timeOfDay time = _time mod #secondsperday;
        #    int         dd = _time div #secondsperday;
        #    date         d = #OffsetDate + dd;
        #
        #    systemTime = WinAPI::dateTime2SystemTime(d, time);
        #    localTime  = WinAPI::systemTimeToTzSpecificLocalTime(systemTime);
        #
        #    return [WinAPI::systemTimeToDate(localTime), WinAPI::systemTimeToTimeOfDay(localTime)];
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #/// <summary>
        #///    Extracts parameter settings from an XML element.
        #/// </summary>
        #/// <param name="_topNode">
        #///    The <c>XmlElement</c> class that contains the parameters.
        #/// </param>
        #public void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #    SysVersionControlRepositoryFolder repFolder = folder;
        #
        #    // Check that we have a VCS system.
        #    if (versioncontrol.parmSysVersionControlSystem())
        #    {
        #        branch = versioncontrol.parmSysVersionControlSystem().getXMLParameterValue(#XMLBranch, _topNode);
        #
        #        if (branch)
        #        {
        #            if (subStr(repFolder, strLen(repFolder),1) == #FilePathDelimiter)
        #            {
        #                repFolder = repFolder+branch;
        #            }
        #            else
        #            {
        #                repFolder = repFolder+#FilePathDelimiter+branch;
        #            }
        #            folder = repFolder;
        #
        #            versioncontrol.parmSysVersionControlSystem().parmFolder(folder);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    useCheckInWizard = true;
        #}
      ENDSOURCE
      SOURCE #parmBranch
        #public SysVersionControlBranch parmBranch(SysVersionControlBranch _branch = branch)
        #{
        #    branch = _branch;
        #
        #    return branch;
        #}
      ENDSOURCE
      SOURCE #parmUseCheckInWizard
        #public boolean parmUseCheckInWizard(boolean _useCheckInWizard = useCheckInWizard)
        #{
        #    useCheckInWizard = _useCheckInWizard;
        #
        #    return useCheckInWizard;
        #}
      ENDSOURCE
      SOURCE #processOutput
        #private void processOutput(COM _commandOutputs, Exception _exception)
        #{
        #    COM commandOutput;
        #    int i;
        #
        #    for ( i = 0; i <_commandOutputs.count(); i++ )
        #    {
        #        commandOutput = _commandOutputs.item(i);
        #        switch (_exception)
        #        {
        #            case Exception::Info:
        #                info(commandOutput.message());
        #                break;
        #
        #            case Exception::Warning:
        #                warning(commandOutput.message());
        #                break;
        #
        #            case Exception::Error:
        #                error(commandOutput.message());
        #                break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #requireSyncBeforeCheckOut
        #public boolean requireSyncBeforeCheckOut()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #/// <summary>
        #///    Returns the file name filter for the lookup dialog box.
        #/// </summary>
        #/// <returns>
        #///    The file name filter for the lookup dialog box.
        #/// </returns>
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #    return [WinAPI::fileType(#dpk), #allfilesName + #dpk, #allFilesType, #allFiles];
        #}
      ENDSOURCE
      SOURCE #reviewFileSet
        #/// <summary>
        #/// Creates a review file from a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to review.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the review.
        #/// </param>
        #/// <param name="_fileNameOfReviewPackage">
        #/// The file name of the review file.
        #/// </param>
        #/// <param name="_folder">
        #/// The repository folder.
        #/// </param>
        #public void reviewFileSet(
        #    Set _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave _fileNameOfReviewPackage,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    str filenames;
        #    SetEnumerator filesEnumerator;
        #
        #    #define.allowedChars('abcdefghijklmnopqrstuvwxyz01234567890-+:;.,_!?')
        #
        #    if (_setOfFiles)
        #    {
        #        filesEnumerator = _setOfFiles.getEnumerator();
        #        filesEnumerator.reset();
        #
        #        while (filesEnumerator.moveNext())
        #        {
        #            filenames += strFmt(' "%1"', filesEnumerator.current());
        #        }
        #
        #        if (filenames)
        #        {
        #            _comment = strReplace(_comment, ' ', '_');
        #            _comment = strKeep(_comment, #allowedChars);
        #
        #            WinAPI::shellExecute(#sdp, strFmt(#sdpCmdLine, _comment, _fileNameOfReviewPackage, filenames), _folder, #ShellExeOpen, #SW_SHOWNORMAL, true );
        #            if (WinAPI::fileExists(_fileNameOfReviewPackage))
        #            {
        #                WinAPI::shellExecute(_fileNameOfReviewPackage);
        #            }
        #            else
        #            {
        #                throw error(strFmt("@SYS18678", _fileNameOfReviewPackage));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #showInfo
        #/// <summary>
        #///    Shows the connection information about the back end.
        #/// </summary>
        #public void showInfo()
        #{
        #    this.executeCommand(#SDInfo);
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #/// <summary>
        #///    Implements change version functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports change version number; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports change version, MorphX will show version number both in
        #///    Pending objects and History forms.
        #/// </remarks>
        #public boolean supportChangeVersion()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #/// <summary>
        #///    Checks whether a check-in wizard is used by the back end.
        #/// </summary>
        #/// <returns>
        #///    true if the back end has a check-in wizard; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the back end uses a check-in wizard, MorphX will not ask for check-in comments, because they are
        #///    provided in the check-in wizard.
        #/// </remarks>
        #public boolean supportCheckInWizard()
        #{
        #    return true & this.parmUseCheckInWizard();
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #/// <summary>
        #/// Supports check-out of the same file by several users at the same time.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports multiple check-outs; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end does not support multiple check-outs, MorphX will verify that a
        #/// file hasn't been checked out remotely before it tries a check-out.
        #/// </remarks>
        #public boolean supportMultipleCheckout()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports pending change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportPendingChangeLists()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #/// <summary>
        #/// Supports review of a set of changed files.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports review; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end support reviews, the Review button is shown on the Pending Objects form.
        #/// When the Review button is clicked the <c>reviewFileSet</c> method on this interface will be invoked.
        #/// </remarks>
        #public boolean supportReviews()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports submitted change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportSubmittedChangeLists()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #/// <summary>
        #///    Implements delete local files synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports delete local files synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports delete local files synchronization, MorphX will show a
        #///    delete files field in the synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #/// <summary>
        #///    Implements label synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the system supports label synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control system supports label synchronization, MorphX will show a label field in the
        #///    synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncLabel()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #verifyOwner
        #//
        #// Validate an owner of the new element exists
        #//
        #private boolean verifyOwner(Filename _filename)
        #{
        #    SysVersionControlTmpItem tmpItem;
        #    identifierName elementName;
        #    TreeNode treeNode;
        #    UtilElementType recordType;
        #
        #    if (SysVersionControlTmpItem::isValidXPOFile(_filename))
        #    {
        #        treeNode = tmpItem.getVirtualTreenode(_filename);
        #
        #        //
        #        // Validate it is a type that must follow naming conventions.
        #        //
        #        if (treeNode &&
        #            treeNode.treeNodeType().isUtilElement())
        #        {
        #            recordType = treeNode.utilElement().RecordType;
        #
        #            if (recordType != UtilElementType::ExtendedType &&
        #                recordType != UtilElementType::Enum &&
        #                recordType != UtilElementType::LicenseCode)
        #            {
        #                elementName = treeNode.treeNodeName();
        #                return this.verifyOwnerPrefix(elementName);
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Indicates whether the element name contains a valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains valid owner prefix; otherwise, false.
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    int infologLine;
        #    str owner;
        #    infologLine = infologLine();
        #    try
        #    {
        #        owner = SysVersionControlFileBasedBackEndSD::getOwner(elementName);
        #
        #        if (!owner)
        #        {
        #            //
        #            // Clear cache and reread the potentially updated list
        #            //
        #            infolog.globalCache().clear(funcName());
        #            owner = SysVersionControlFileBasedBackEndSD::getOwner(elementName);
        #        }
        #
        #        if (owner)
        #        {
        #            info(strFmt("@SYS121677", elementName, owner));
        #        }
        #        else
        #        {
        #            error(strFmt("@SYS121678", elementName));
        #            return false;
        #        }
        #    }
        #    catch
        #    {
        #        //
        #        // Accept no owner, if the file doesn't exist.
        #        //
        #        infolog.clear(infologLine);
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #waitUntilFinished
        #protected void waitUntilFinished(COM _sdResult, str _command)
        #{
        #    Object formRun;
        #    HWND workspaceHwnd;
        #
        #    try
        #    {
        #        formRun = versioncontrol.parmUserInterfaceProvider().notificationForm();
        #
        #        if (formRun)
        #        {
        #            formRun.runCommand('sd.exe '+_command, _sdResult);
        #        }
        #        else
        #        {
        #            //
        #            // During wait for SD, the COM dispatches messages to AX
        #            // Disabling AX's main window will queue these messages until
        #            // AX is ready to receive them.
        #            //
        #            workspaceHwnd = versioncontrol.parmUserInterfaceProvider().getProcessWindowHandle();
        #            WinAPI::enableWindow(workspaceHwnd, false);
        #            _sdResult.waitUntilFinished();
        #            WinAPI::enableWindow(workspaceHwnd, true);
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #        if (workspaceHwnd)
        #        {
        #            WinAPI::enableWindow(workspaceHwnd, true);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized instance of the <c>SysVersionControlWorkItemProvider</c> class.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlFileBasedBackEndSD construct()
        #{
        #    return new SysVersionControlFileBasedBackEndSD();
        #}
        #
      ENDSOURCE
      SOURCE #getOwner
        #static public str getOwner(identifierName _objectName)
        #{
        #    Map prefixTeamMap = infolog.globalCache().get(funcname(), 0, null);
        #    Map suffixTeamMap = infolog.globalCache().get(funcname(), 1, null);
        #    Map baseMap;
        #    MapEnumerator enum;
        #    identifierName prefix;
        #    int i;
        #    str key;
        #    boolean cont;
        #    #AOT
        #
        #    if (!prefixTeamMap)
        #    {
        #        prefixTeamMap = SysVersionControlFileBasedBackEndSD::readExcelWorkbook();
        #        baseMap = Map::create(prefixTeamMap.pack());
        #        enum = baseMap.getEnumerator();
        #        suffixTeamMap = new Map(Types::String, Types::String);
        #
        #        cont = enum.moveNext();
        #        while (cont)
        #        {
        #            key = enum.currentKey();
        #
        #            if (substr(key, 1, 1) == '*') //It's a suffix
        #            {
        #                suffixTeamMap.insert(substr(key, 2, #IdentifierNameLen), enum.currentValue());
        #
        #                cont = enum.moveNext();
        #
        #                //Remove the suffix from the prefix map
        #                prefixTeamMap.remove(key);
        #            }
        #            else
        #            {
        #                cont = enum.moveNext();
        #            }
        #        }
        #
        #        infolog.globalCache().set(funcname(), 0, prefixTeamMap);
        #        infolog.globalCache().set(funcname(), 1, suffixTeamMap);
        #    }
        #
        #    // if the full object name exists in the prefix list
        #    if (prefixTeamMap.exists(_objectName))
        #    {
        #        return prefixTeamMap.lookup(_objectName);
        #    }
        #
        #    enum = suffixTeamMap.getEnumerator();
        #    while (enum.moveNext())
        #    {
        #        i = strlen(enum.currentKey());
        #        //Case sensitive compare
        #        if (strcmp(enum.currentKey(), substr(_objectName, strlen(_objectName)-i+1,i)) == 0)
        #            return enum.currentValue();
        #    }
        #
        #    for (i = strlen(_objectName); i; i--)
        #    {
        #        prefix = substr(_objectName, 1, i);
        #        if (prefixTeamMap.exists(prefix))
        #            return prefixTeamMap.lookup(prefix);
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #nextBuildNo
        #static public SysBuildNo nextBuildNo()
        #{
        #    #aot
        #    SysVersionControlTmpItem latestItem;
        #    SysTreeNode treenode = SysTreeNode::newTreeNodePath(#ClassesPath+'\\'+classStr(ApplicationVersion));
        #    TreeNode headRevision;
        #    TreeNode method;
        #    Filename filename;
        #    SysBuildNo buildNo;
        #    str delimiter;
        #    int pos, major, minor;
        #
        #    if (treenode &&
        #        versioncontrol.parmSysVersionControlSystem() &&
        #        !versioncontrol.allowCreate(treenode.parmTreeNode()))
        #    {
        #        latestItem.InternalFilename = versioncontrol.parmSysVersionControlSystem().fileName(treenode);
        #        filename = versioncontrol.parmSysVersionControlSystem().getItemVersion(treenode, latestItem);
        #
        #        headRevision = latestItem.getVirtualTreenode(filename);
        #        if (headRevision)
        #        {
        #            method = headRevision.AOTfindChild(staticMethodStr(ApplicationVersion, applBuildNo));
        #            if (method)
        #            {
        #                // Only a developer may execute this method.
        #                // The code is taken from SD reposiroty.
        #                //BP deviation documented
        #                buildNo = runbuf(method.AOTgetSource());
        #                delimiter = strRem(buildNo, '0123456789');
        #                if (strLen(delimiter) == 1)
        #                {
        #                    pos = strFind(buildNo, delimiter, 1, strLen(buildNo));
        #                    if (pos)
        #                    {
        #                        major = str2int(subStr(buildNo, 1, pos-1));
        #                        minor = str2int(subStr(buildNo, pos+1, strLen(buildNo)-pos));
        #                        switch (currentAOLayer())
        #                        {
        #                            case UtilEntryLevel::sys:
        #                                major++;
        #                                break;
        #
        #                            case UtilEntryLevel::syp:
        #                                minor++;
        #                                break;
        #                        }
        #                        return strFmt('%1%2%3', major, delimiter, minor);
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #readExcelWorkbook
        #static client private Map readExcelWorkbook(Filename _filename = '')
        #{
        #    #File
        #    #define.ExcelTokenTotal('Total')
        #    #define.ExcelTokenGrandTotal('Grand Total')
        #    #define.ExcelTokenFeatureTeam('Feature Team')
        #
        #    Filename            filename    = _filename;
        #    SysExcelApplication application = SysExcelApplication::construct();
        #    SysExcelWorkbooks   workbooks   = application.workbooks();
        #    SysExcelWorkbook    workbook;
        #    SysExcelWorksheets  workSheets;
        #    SysExcelWorksheet   workSheet;
        #    SysExcelCells       cells;
        #    SysExcelCell        cell;
        #    str                 team;
        #    identifierName      prefix;
        #    boolean             inData;
        #    int                 i;
        #    Map                 prefixTeamMap  = new Map(Types::String, Types::String);
        #    Set                 ignorePrefixes = new Set(Types::String);
        #    SetEnumerator       setEnum;
        #    ;
        #    startLengthyOperation();
        #
        #    //If no filename argument was passed, default to X++ Ownership document in source depot
        #    if (prmisDefault(_filename))
        #    {
        #        filename = versioncontrol.parmSysVersionControlSystem().parmFolder();
        #        if (!filename)
        #            throw error(strFmt("@SYS50104", "@SYS16423"));
        #
        #        if (subStr(filename, strLen(filename), 1) != #FilePathDelimiter)
        #            filename += #FilePathDelimiter;
        #
        #        filename += @'..\Def\X++ Ownership.xls';
        #    }
        #
        #    filename = strReplace(filename, '%20', ' ');
        #    if (!WinAPI::fileExists(filename))
        #        throw error(strFmt("@SYS109820", filename));
        #
        #    if (workbooks.open(filename, false /*Update links*/, true /*Read only*/))
        #    {
        #        workbook   = workbooks.item(1);
        #        workSheets = workbook.worksheets();
        #        workSheet  = workSheets.itemFromName('IgnorePrefixes');
        #
        #        if (workSheet)
        #        {
        #            cells = workSheet.cells();
        #            do
        #            {
        #                i++;
        #                cell = cells.item(i, 1);
        #                prefix = cell.value().bStr();
        #                if (prefix)
        #                {
        #                    ignorePrefixes.add(prefix);
        #                }
        #            }
        #            while (prefix);
        #        }
        #
        #        workSheet = workSheets.itemFromName('Data');
        #        cells     = workSheet.cells();
        #        i         = 0;
        #
        #        while (true)
        #        {
        #            i++;
        #            cell = cells.item(i, 1);
        #            team = cell.value().bStr();
        #            if (team == #ExcelTokenGrandTotal)
        #            {
        #                inData = false;
        #                break;
        #            }
        #            if (inData && team && !strScan(team,#ExcelTokenTotal,1,maxInt()))
        #            {
        #                cell   = cells.item(i, 2);
        #                prefix = strRTrim(cell.value().bStr());
        #                prefixTeamMap.insert(prefix, team);
        #
        #                if (!strStartsWith(prefix, '*'))
        #                {
        #                    setEnum = ignorePrefixes.getEnumerator();
        #                    while (setEnum.moveNext())
        #                    {
        #                        //Do not overwrite if called out explicitly
        #                        if (!prefixTeamMap.exists(setEnum.current()+prefix))
        #                        {
        #                            prefixTeamMap.insert(setEnum.current()+prefix, team);
        #                        }
        #                    }
        #                }
        #            }
        #            if (team == #ExcelTokenFeatureTeam)
        #            {
        #                inData = true;
        #            }
        #        }
        #
        #        application.displayAlerts(false);
        #        application.quit();
        #        application.displayAlerts(true);
        #    }
        #    return prefixTeamMap;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlAddIn unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlAddIn
    PROPERTIES
      Name                #SysVersionControlAddIn
      RunOn               #Client
      Origin              #{2D160349-0000-1000-6C62-ED34075D1BAB}
      LegacyId            #841
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysVersionControlAddIn</c> class handles version control system actions invoked through the Add-Ins menu and menu item buttons.
        #/// </summary>
        #/// <remarks>
        #///    If new actions are added, this class must be updated to reflect the changes.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlAddIn
        #{
        #}
      ENDSOURCE
      SOURCE #doItem
        #/// <summary>
        #///    Invokes a version control action on a <c>SysVersionControlTmpItem</c> table record.
        #/// </summary>
        #/// <param name="_callerItem">
        #///    The <c>SysVersionControlTmpItem</c> table record the action should be invoked upon.
        #/// </param>
        #/// <param name="_action">
        #///    The action to perform.
        #/// </param>
        #/// <param name="_batchNum">
        #///    In case the action is "Undo check-out", this optional parameter can be used to group multiple <c>SysVersionControlTmpItem</c> records into the same Synchronization log.
        #/// </param>
        #static protected void doItem(
        #    SysVersionControlTmpItem                _callerItem,
        #    SysVersionControlAction                 _action,
        #    SysVersionControlSynchronizeBatchNum    _batchNum = SysVersionControlSynchronizeLog::nextBatchNum()
        #)
        #{
        #    SysVersionControllable          controllable;
        #    Filename                        getFilename;
        #    SysVersionControlSyncParameters syncParm;
        #
        #    controllable = _callerItem.getControllable(_action == SysVersionControlAction::UndoCheckOut);
        #
        #    if (controllable)
        #    {
        #        switch (_action)
        #        {
        #            case SysVersionControlAction::Get:
        #                setprefix("@SYS85749");
        #                if (!(controllable is SysTreeNodeVirtualDeleted) &&
        #                    versioncontrol.parmSysVersionControlSystem().allowEdit(controllable))
        #                {
        #                    getFilename = versioncontrol.parmSysVersionControlSystem().getItemVersion(controllable, _callerItem);
        #                    controllable.fromFile(getFilename);
        #                    info(strfmt("@SYS85990", _callerItem.Version, _callerItem.ItemPath));
        #                }
        #                else
        #                {
        #                    syncParm = SysVersionControlSyncParameters::construct();
        #                    syncParm.parmSilent(false);
        #                    syncParm.parmForce(true);
        #                    syncParm.parmVersion(_callerItem.Version);
        #                    syncParm.parmChangeListNumber(_callerItem.ChangeNumber);
        #                    syncParm.parmDeleteLocalObjects(false);
        #                    syncParm.parmLabel(_callerItem.Label);
        #                    syncParm.parmBatchNumber(_batchNum);
        #                    syncParm.parmDateTime(DateTimeUtil::newDateTime(_callerItem.vcsDate, _callerItem.vcsTime));
        #
        #                    if (!prmisdefault(_batchNum))
        #                    {
        #                        //Import is done in an outer loop
        #                        syncParm.parmSkipImport(true);
        #                    }
        #                    versioncontrol.parmSysVersionControlSystem().commandSynchronize(controllable, syncParm);
        #                }
        #                break;
        #            default:
        #                if (controllable)
        #                {
        #                    switch (_action)
        #                    {
        #                        case SysVersionControlAction::UndoCheckOut:
        #                            setprefix("@SYS83894");
        #                            if (prmisdefault(_batchNum))
        #                            {
        #                                versioncontrol.parmSysVersionControlSystem().commandUndoCheckOut(controllable, true);
        #                            }
        #                            else
        #                            {
        #                                versioncontrol.parmSysVersionControlSystem().commandUndoCheckOut(controllable, true, _batchNum);
        #                            }
        #                            versioncontrol.colorAOT();
        #                            break;
        #                    }
        #                }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #doTreenode
        #/// <summary>
        #///    Invokes a version control action on a <c>TreeNode.</c>
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The <c>TreeNode</c> the action is invoked upon.
        #/// </param>
        #/// <param name="_action">
        #///    The action to perform.
        #/// </param>
        #static protected void doTreenode(TreeNode _treeNode, SysVersionControlAction _action)
        #{
        #    switch (_action)
        #    {
        #        case SysVersionControlAction::CheckIn:
        #            versioncontrol.checkIn(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::CheckOut:
        #            versioncontrol.checkOut(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::UndoCheckOut:
        #            versioncontrol.undoCheckOut(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::Synchronize:
        #            versioncontrol.getLatestVersion(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::Add:
        #            versioncontrol.create(_treeNode);
        #            break;
        #
        #        case SysVersionControlAction::Delete:
        #            versioncontrol.delete(_treeNode);
        #            break;
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    SysVersionControlTmpItem                callerItem;
        #    SysVersionControlAction                 action;
        #    SysContextMenu                          sysContextMenu;
        #    TreeNode                                treeNode;
        #    TreeNode                                rootElementNode;
        #    FormRun                                 formRun;
        #    FormDataSource                          datasource;
        #    SysVersionControlSynchronizeBatchNum    batchNum;
        #
        #    #SysVersionControl
        #
        #    if (args.parmEnumType() == enumnum(SysVersionControlAction))
        #    {
        #        action = args.parmEnum();
        #
        #        if (SysContextMenu::startedFrom(args))
        #        {
        #            sysContextMenu = args.parmObject();
        #            treeNode = sysContextMenu.getFirstNode();
        #            while (treeNode)
        #            {
        #                rootElementNode = SysTreeNode::getRootElement(treeNode);
        #                if (rootElementNode)
        #                    SysVersionControlAddIn::doTreenode(rootElementNode, action);
        #                treeNode = sysContextMenu.next();
        #            }
        #        }
        #        else
        #        {
        #            if (args &&
        #                args.record() &&
        #                args.record() is SysVersionControlTmpItem)
        #            {
        #                infolog.globalCache().remove(classstr(SysVersionControlSystem), #VCUndoCheckOutButton);
        #                formRun = args.caller();
        #                if (formRun)
        #                {
        #                    datasource = formRun.dataSource(1);
        #                    if (datasource.anyMarked())
        #                    {
        #                        batchNum = SysVersionControlSynchronizeLog::nextBatchNum();
        #                        callerItem = datasource.getFirst(true) as SysVersionControlTmpItem;
        #                        while (callerItem)
        #                        {
        #                            SysVersionControlAddIn::doItem(callerItem, action, batchNum);
        #                            callerItem = datasource.getNext() as SysVersionControlTmpItem;
        #                        }
        #                        SysVersionControlSynchronizeLog::processBatchNum(batchNum);
        #                    }
        #                    else
        #                    {
        #                        callerItem = args.record() as SysVersionControlTmpItem;
        #                        SysVersionControlAddIn::doItem(callerItem, action);
        #                    }
        #                }
        #                else
        #                {
        #                    callerItem = args.record() as SysVersionControlTmpItem;
        #                    SysVersionControlAddIn::doItem(callerItem, action);
        #                }
        #                infolog.globalCache().remove(classstr(SysVersionControlSystem), #VCUndoCheckOutButton);
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSystemFileBased unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSystemFileBased
    PROPERTIES
      Name                #SysVersionControlSystemFileBased
      Extends             #SysVersionControlSystem
      RunOn               #Client
      Origin              #{2D203541-0000-1000-7FB6-1A763DFA87BD}
      LegacyId            #13633
    ENDPROPERTIES
    
    METHODS
      SOURCE #allowCheckOut
        #public boolean allowCheckOut(SysVersionControllable _controllable, boolean _checkMultipleCheckout = true)
        #{
        #    Filename    filename;
        #    boolean     ret = super(_controllable);
        #
        #    if (ret)
        #    {
        #        if (_checkMultipleCheckout &&
        #            backend.supportMultipleCheckout() &&
        #            _controllable.allowMultipleCheckout(settings))
        #        {
        #            ret = true;
        #        }
        #        else
        #        {
        #            filename = this.fileName(_controllable);
        #            ret = backend.fileCheckedOutTo(filename) == '';
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControllable _controllable)
        #{
        #    Filename filename;
        #    SysTreeNodeContainer treeNodeContainer;
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #
        #    treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().allowCreate();
        #    }
        #
        #
        #    filename = this.fileName(_controllable, true);
        #    return !WinAPI::fileExists(filename) && _controllable.allowCreate(settings);
        #}
      ENDSOURCE
      SOURCE #allowDelete
        #public boolean allowDelete(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    Filename    filename;
        #    SysTreeNodeContainer treeNodeContainer;
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #
        #    if (_justInTime)
        #    {
        #        treeNodeContainer = _controllable as SysTreeNodeContainer;
        #        if (treeNodeContainer != null)
        #        {
        #            return treeNodeContainer.parmTreeNodeContainerDispatcher().allowDelete();
        #        }
        #
        #        filename = this.fileName(_controllable);
        #
        #        //
        #        // Only allow delete of checked in objects
        #        //
        #        if (this.allowCheckOut(_controllable, false))
        #        {
        #            //
        #            // Has the object been deleted remotely?
        #            //
        #            if (backend.fileExists(filename))
        #            {
        #                return true;
        #            }
        #        }
        #        else
        #        {
        #            //object is checked out already
        #            error(strFmt("@SYS99176", backend.fileCheckedOutTo(filename)));
        #        }
        #        return false;
        #    }
        #
        #    //
        #    // To speed up navigating the AOT, allow delete is checked when a delete is performed
        #    // and not when context menus, property sheets etc. are displayed.
        #    //
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowEdit
        #public boolean allowEdit(SysVersionControllable _controllable)
        #{
        #    #WinApi
        #    Filename filenameObjectLayer  = this.fileName(_controllable, false);
        #    Filename filenameCurrentLayer = this.fileName(_controllable, true);
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().allowEdit();
        #    }
        #
        #    //Exists in current layer
        #    if (filenameObjectLayer == filenameCurrentLayer)
        #    {
        #        //Has the file ever been checked in
        #        if (!WinAPI::fileExists(filenameCurrentLayer))
        #            return true;
        #
        #        //Has the file been checked out
        #        if (!bitTest(WinAPI::getFileAttributes(filenameCurrentLayer), #FILE_ATTRIBUTE_READONLY))
        #            return true;
        #    }
        #    else
        #    {
        #        //Has the file ever been checked in
        #        if (WinAPI::fileExists(filenameCurrentLayer))
        #        {
        #            //Has the file been checked out
        #            if (!bitTest(WinAPI::getFileAttributes(filenameCurrentLayer), #FILE_ATTRIBUTE_READONLY))
        #                return true;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowMoveToModel
        #/// <summary>
        #/// Indicates whether the <c>SysVersionControllable</c> interface can be moved to a model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface.
        #/// </param>
        #/// <param name="_modelId">
        #/// The ID of the model.
        #/// </param>
        #/// <returns>
        #/// true if the move is allowed; otherwise, false.
        #/// </returns>
        #public boolean allowMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    boolean ret = super(_controllable, _modelId);
        #    Filename filename;
        #
        #    if (!ret)
        #    {
        #        return false;
        #    }
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #
        #    //
        #    // Only allow moveToModel of new and checked in objects
        #    //
        #    if (this.allowCreate(_controllable))
        #    {
        #        return true;
        #    }
        #
        #    if (this.allowCheckOut(_controllable, false))
        #    {
        #        // Only allow moveToModel if model is mapped to folder
        #        if (!this.getModelFolder(_modelId))
        #        {
        #            error(strFmt("@SYS327411",
        #                _controllable.versionControlItemPath(),
        #                SysModelStore::displayName(_modelId)));
        #            return false;
        #        }
        #
        #        return true;
        #    }
        #
        #    //object is checked out already
        #    filename = this.fileName(_controllable);
        #    error(strFmt("@SYS327412", _controllable.versionControlItemPath(), SysModelStore::displayName(_modelId), backend.fileCheckedOutTo(filename)));
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowRename
        #public boolean allowRename(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    Filename filename;
        #
        #    if (offline)
        #    {
        #        return false;
        #    }
        #    if (_justInTime)
        #    {
        #        //
        #        // Only allow rename of new and checked in objects
        #        //
        #        if (this.allowCreate(_controllable))
        #            return true;
        #
        #        if (this.allowCheckOut(_controllable, false))
        #            return true;
        #
        #        //object is checked out already
        #        filename = this.fileName(_controllable);
        #
        #        error(strFmt("@SYS99148", backend.fileCheckedOutTo(filename)));
        #        return false;
        #    }
        #    //
        #    // To speed up navigating the AOT, allow rename is only checked when a rename is performed
        #    // and not when context menus, propertysheets etc. are displayed.
        #    //
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkInChangelist
        #//AOSRunMode::Client
        #public void checkInChangelist(
        #    SysVersionControlTmpItem _items,
        #    SysVersionControlItemComment _comment = '',
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    boolean errorsFound = false;
        #    SysVersionControllable controllable;
        #    Filename filename;
        #    Map checkinFiles = new Map(Types::String, Types::Class);
        #    Set resolveFiles = new Set(Types::String);
        #    Set lockedFiles  = new Set(Types::String);
        #    SetEnumerator enum;
        #    MapEnumerator mapEnumerator;
        #    int infologLine;
        #    #WinApi
        #
        #    setPrefix("@SYS85680");
        #
        #    if (this.promptCheckin(_items))
        #    {
        #        this.runTestProject();
        #
        #        //
        #        // Validate all items are ready for check-in, including running compilation and BP check
        #        //
        #        infologLine = infologLine();
        #        while select _items
        #        {
        #            controllable = _items.getControllable(true);
        #
        #            if (controllable)
        #            {
        #                setPrefix(controllable.versionControlItemPath());
        #
        #                if (_items.ActionText != backend.actionText(SysVersionControlSystemFileAction::Delete) &&
        #                    !this.allowEdit(controllable))
        #                {
        #                    error(strFmt("@SYS85683", _items.ItemPath));
        #                    errorsFound = true;
        #                }
        #                else
        #                {
        #                    if (!this.allowCheckIn(controllable))
        #                    {
        #                        error(strFmt("@SYS85684", _items.ItemPath));
        #                        errorsFound = true;
        #                    }
        #                }
        #            }
        #        }
        #
        #        //
        #        // See if any allowCheckIn calls reported problems
        #        //
        #        if (!errorsFound &&
        #            infologLine != infologLine())
        #        {
        #            if (Box::yesNo(strFmt("@SYS329679", "@SYS70440"), DialogButton::No) == DialogButton::No)
        #            {
        #                errorsFound = true;
        #            }
        #        }
        #
        #        //
        #        // Save all items to disk, including locking files and recreating temporary labels.
        #        //
        #        if (!errorsFound)
        #        {
        #            try
        #            {
        #                while select _items
        #                {
        #                    controllable = _items.getControllable(true);
        #
        #                    if (controllable)
        #                    {
        #                        setPrefix(controllable.versionControlItemPath());
        #
        #                        filename = this.fileName(controllable);
        #
        #                        if (controllable.allowMultipleCheckout(settings) &&
        #                            controllable.allowLockDuringCheckIn(settings))
        #                        {
        #                            if (backend.fileLock(filename))
        #                            {
        #                                lockedFiles.add(filename);
        #                            }
        #                            else
        #                            {
        #                                throw error("@SYS90486");
        #                            }
        #                        }
        #                        if (!this.preCheckInUpdate(filename, controllable))
        #                        {
        #                            error(strFmt("@SYS85685", _items.ItemPath));
        #                            errorsFound = true;
        #                        }
        #
        #                        // Save to disk, unless it is a delete operation.
        #                        if (_items.ActionText == backend.actionText(SysVersionControlSystemFileAction::Delete) ||
        #                           controllable.toFile(filename, false))
        #                        {
        #                            // Add file and controllable to map
        #                            checkinFiles.insert(filename, controllable);
        #                        }
        #                        else
        #                        {
        #                            errorsFound = true;
        #                        }
        #                    }
        #                }
        #            }
        #            catch
        #            {
        #                errorsFound = true;
        #            }
        #
        #            if (!errorsFound)
        #            {
        #                //For SD that isn't required as it is handled by the checkin wizard.
        #                if (!backend.fileSetCheckin(checkinFiles, _comment, _changeList, _workItems))
        #                {
        #                    //check in fail may due to conflicts
        #                    if (backend.fileSetResolve(checkinFiles))
        #                    {
        #                        // try check in again if conflicts are resolved
        #                        if (backend.fileSetCheckin(checkinFiles, _comment, _changeList, _workItems))
        #                        {
        #                            //import resolved xpo file since xpo files can be manually resolved by TFS merge tool
        #                            //this implementation doesn't suppport doc node import as doc node conflicts are rare
        #                            //see SysVersionControlSynchronizeLog.processBatchNum for full implementation
        #                            mapEnumerator = checkinFiles.getEnumerator();
        #                            mapEnumerator.reset();
        #
        #                            while (mapEnumerator.moveNext())
        #                            {
        #                                controllable = mapEnumerator.currentValue();
        #                                if (controllable)
        #                                {
        #                                    //Ignore import xpo if it is checked in as deleted
        #                                    if (WinAPI::fileExists(mapEnumerator.currentKey()))
        #                                    {
        #                                        controllable.fromFile(mapEnumerator.currentKey());
        #                                    }
        #                                }
        #                            }
        #                        }
        #                        else
        #                        {
        #                            errorsFound = true;
        #                        }
        #                    }
        #                    else
        #                    {
        #                        // Not able to resolve. Backend reports errors on this.
        #                        errorsFound = true;
        #                    }
        #                }
        #            }
        #        }
        #
        #        if (errorsFound)
        #        {
        #            //
        #            // Only explicitly unlock in case of errors - checkin also unlocks
        #            //
        #            enum = lockedFiles.getEnumerator();
        #            while (enum.moveNext())
        #            {
        #                backend.fileUnlock(enum.current());
        #            }
        #
        #            throw error("@SYS90486");
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysVersionControlSystemFileBased extends SysVersionControlSystem
        #implements SysVersionControlReviews
        #{
        #    SysVersionControlFilebasedBackEnd backend;
        #    boolean offline;
        #    #SysVersionControl
        #    Map filenameCache;
        #}
      ENDSOURCE
      SOURCE #commandAdd
        #public boolean commandAdd(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    Filename filename;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().create();
        #    }
        #
        #    if (this.allowCheckOut(_controllable))
        #    {
        #        if (!this.validateMultipleModels(_controllable))
        #        {
        #            error(strFmt("@SYS342399", _controllable.versionControlItemPath()));
        #            return false;
        #        }
        #
        #        filename = this.fileName(_controllable, true, true /*prompt*/);
        #        if (_controllable.addNewFile(filename))
        #        {
        #            if (backend.fileAddToVersionControl(filename, _comment))
        #            {
        #                return true;
        #            }
        #            else
        #            {
        #                _controllable.deleteFile(filename);
        #                return false;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        filename = this.fileName(_controllable);
        #        warning(strFmt("@SYS85687", _controllable.versionControlItemPath(), backend.fileCheckedOutTo(filename)));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandCheckIn
        #public void commandCheckIn(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    Filename    filename = this.fileName(_controllable);
        #    boolean     manuallyUnlock = false;
        #    Map         checkinFiles = new Map(Types::String, Types::Class);
        #
        #    if (!this.allowEdit(_controllable))
        #        throw error(strFmt("@SYS85683", filename));
        #
        #    this.runTestProject();
        #
        #    if (!this.allowCheckIn(_controllable))
        #        throw error(strFmt("@SYS85684", filename));
        #
        #    if (_controllable.allowMultipleCheckout(settings) &&
        #        _controllable.allowLockDuringCheckIn(settings))
        #    {
        #        if (backend.fileLock(this.fileName(_controllable)))
        #        {
        #            manuallyUnlock = true;
        #        }
        #        else
        #        {
        #            throw error("@SYS90486");
        #        }
        #    }
        #
        #    if (this.preCheckInUpdate(filename, _controllable))
        #    {
        #        if (_controllable.toFile(filename, false))
        #        {
        #            checkinFiles.insert(filename, _controllable);
        #
        #            if (backend.fileSetCheckin(checkinFiles, _comment))
        #            {
        #                manuallyUnlock = false;
        #            }
        #        }
        #    }
        #    if (manuallyUnlock)
        #    {
        #        backend.fileUnlock(filename);
        #        throw error("@SYS90486");
        #    }
        #}
      ENDSOURCE
      SOURCE #commandCheckOut
        #public boolean commandCheckOut(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    Filename    filename;
        #    int         attr;
        #    #WinApi
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().checkOut();
        #    }
        #
        #    filename    = this.fileName(_controllable);
        #
        #    if (offline)
        #    {
        #        attr = WinAPI::getFileAttributes(filename);
        #        if (!bitTest(#FILE_ATTRIBUTE_READONLY, attr))
        #        {
        #            warning(strFmt("@SYS88308", _controllable.versionControlItemPath()));
        #            return false;
        #        }
        #        attr -= #FILE_ATTRIBUTE_READONLY;
        #        WinAPI::setFileAttributes(filename, attr);
        #        info(strFmt("@SYS88307", this.fileName(_controllable)));
        #        return true;
        #    }
        #    else
        #    {
        #        if (this.allowCheckOut(_controllable))
        #        {
        #            if (backend.fileCheckout(filename))
        #            {
        #                _controllable.onCheckOut();
        #                return true;
        #            }
        #        }
        #        else
        #        {
        #            warning(strFmt("@SYS85687", _controllable.versionControlItemPath(), backend.fileCheckedOutTo(filename)));
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandDelete
        #public boolean commandDelete(SysVersionControllable _controllable)
        #{
        #    Filename    filename;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().delete();
        #    }
        #
        #    filename    = this.fileName(_controllable);
        #
        #    if (backend.fileDelete(filename))
        #    {
        #        WinAPI::deleteFile(filename);
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandMoveToModel
        #/// <summary>
        #/// Moves the <c>SysVersionControllable</c> interface to the model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface to move.
        #/// </param>
        #/// <param name="_modelId">
        #/// The model to which the <c>SysVersionControllable</c> interface is moved.
        #/// </param>
        #/// <returns>
        #/// true if the move was successful; otherwise, false.
        #/// </returns>
        #public boolean commandMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    Filename filename = this.fileName(_controllable);
        #    Filename filenameNew;
        #    FilePath vcsFilePath;
        #    FilePath modelFolder = this.getModelFolder(_modelId);
        #
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        if (modelFolder && filenameCache)
        #        {
        #            vcsFilePath = SysTreeNode::treeNodePath2FilePath(_controllable.versionControlItemPath());
        #            filenameNew = strFmt('%1\%2%3', modelFolder, vcsFilePath, _controllable.fileExtension());
        #
        #            //Update file cache for the container node
        #            filenameCache.insert(_controllable.versionControlItemPath(), filenameNew);
        #        }
        #
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().moveToModel(_modelId);
        #    }
        #
        #    if (modelFolder)
        #    {
        #        //
        #        // Construct new filename
        #        //
        #        vcsFilePath = SysTreeNode::treeNodePath2FilePath(_controllable.versionControlItemPath());
        #        filenameNew = strFmt('%1\%2%3', modelFolder, vcsFilePath, _controllable.fileExtension());
        #
        #        // Update filecache
        #        if (filenameCache)
        #        {
        #            filenameCache.insert(_controllable.versionControlItemPath(), filenameNew);
        #        }
        #
        #        if (backend.fileRename(filename, filenameNew))
        #        {
        #            if (_controllable.toFile(filenameNew))
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        return this.commandDelete(_controllable);
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandOnAfterRename
        #/// <summary>
        #/// Invokes a VCS rename on an AOT item.This method is called when the tree node and corresponding file
        #/// have been already renamed.
        #/// </summary>
        #/// <param name="oldControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the old node.
        #/// </param>
        #/// <param name="newControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the new renamed node.
        #/// </param>
        #/// <returns>
        #/// true if successful; otherwise, false.
        #/// </returns>
        #public boolean commandOnAfterRename(SysVersionControllable oldControllable, SysVersionControllable newControllable)
        #{
        #    str oldFilePath = this.fileName(oldControllable);
        #    str newFilePath = this.fileName(newControllable);
        #
        #    return backend.fileRename(oldFilePath, newFilePath);
        #}
      ENDSOURCE
      SOURCE #commandRename
        #public boolean commandRename(SysVersionControllable _controllable, IdentifierName _newName)
        #{
        #    Filename    filenameOld = this.fileName(_controllable);
        #    Filename    filenameNew;
        #    FilePath    filePath;
        #
        #    if (this.allowRename(_controllable, true))
        #    {
        #        [filePath] = fileNameSplit(filenameOld);
        #
        #        //
        #        // Construct new filename
        #        //
        #        filenameNew = filePath+_newName+_controllable.fileExtension();
        #
        #        // Update filenamecache
        #        if (filenameCache)
        #        {
        #            filenameCache.remove(_controllable.versionControlItemPath());
        #        }
        #
        #        if (backend.fileRename(filenameOld, filenameNew))
        #        {
        #            if (_controllable.toFile(filenameNew))
        #            {
        #                return true;
        #            }
        #        }
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandSynchronize
        #public boolean commandSynchronize(
        #    SysVersionControllable          _controllable,
        #    SysVersionControlSyncParameters _syncParm)
        #{
        #    Filename filename;
        #    SysVersionControlSynchronizeCommand command;
        #    SysVersionControlSynchronizeBatchNum batchNum = _syncParm.parmBatchNumber();
        #    boolean noInfo = false;
        #    Set folderSetSelected;
        #    Set folderSet;
        #    SetEnumerator folderSetEnum;
        #    Map resultMap;
        #    MapEnumerator mapEnum;
        #    boolean isVCSDefFile = _controllable is SysVersionControlDefFile;
        #    SysVersionControllable controllable;
        #    SysTreeNodeContainer contControllable;
        #    RecordInsertList syncEntries;
        #
        #    contControllable = _controllable as SysTreeNodeContainer;
        #
        #    if (contControllable)
        #    {
        #        if (contControllable.parmTreeNodeContainerDispatcher().supportsSynchronize())
        #        {
        #            return contControllable.parmTreeNodeContainerDispatcher().synchronize(_syncParm);
        #        }
        #
        #        _syncParm.parmSyncSpecificDirectory(this.fileName(_controllable));
        #    }
        #
        #    if (!batchNum)
        #        batchNum = SysVersionControlSynchronizeLog::nextBatchNum();
        #
        #    // Evaluate if controllable is special for setting additional parameters.
        #    if (_controllable && isVCSDefFile)
        #    {
        #        _syncParm.parmSilent(true);
        #    }
        #
        #    // Do a synchronization on specific path.
        #    if (_syncParm.parmSyncSpecificDirectory() != '')
        #    {
        #        folderSet = new Set(Types::String);
        #        folderSet.add(_syncParm.parmSyncSpecificDirectory());
        #        resultMap = backend.folderSetSynchronize(folderSet, _syncParm);
        #    }
        #    // Do synchronization either on all nodes or on a single node.
        #    else if (_syncParm.parmSyncAll())
        #    {
        #        // Union the folders for models and additional folders
        #        resultMap = new Map(Types::String, Types::String);
        #        mapEnum = additionalFolders.getEnumerator();
        #
        #        while(mapEnum.moveNext())
        #        {
        #            resultMap.insert(mapEnum.currentKey(), mapEnum.currentValue());
        #        }
        #
        #        mapEnum = modelFolders.getEnumerator();
        #        while(mapEnum.moveNext())
        #        {
        #            // Disallow synchronizing model folders from other layers
        #            if (this.isModelFolderForCurrentLayer(mapEnum.currentKey()))
        #            {
        #                // Models win.
        #                resultMap.insert(mapEnum.currentKey(), mapEnum.currentValue());
        #            }
        #        }
        #
        #        folderSetSelected = versioncontrol.parmUserInterfaceProvider().promptForFolder(resultMap, true, true);
        #        resultMap = null;
        #
        #        folderSet = new Set(Types::String);
        #        folderSetEnum = folderSetSelected.getEnumerator();
        #        while (folderSetEnum.moveNext())
        #        {
        #            folderSet.add(strFmt('\%1\\\%2', folder, folderSetEnum.current()));
        #        }
        #        resultMap = backend.folderSetSynchronize(folderSet, _syncParm);
        #    }
        #    else
        #    {
        #        //Only sync one node
        #        filename = this.fileName(_controllable);
        #        _syncParm.parmForce(_syncParm.parmForce() && _controllable.forceSynchronize());
        #
        #        resultMap = backend.fileSynchronize(filename, _syncParm);
        #    }
        #
        #    // Process synchronized files
        #    if (resultMap) //Sync succeeded
        #    {
        #        if (!_syncParm.parmSyncAll() && _syncParm.parmSilent() && isVCSDefFile)
        #        {
        #            // Don't create synchronization entry for update of VCS definition file.
        #            return true;
        #        }
        #
        #        mapEnum = resultMap.getEnumerator();
        #        syncEntries = new RecordInsertList(tableNum(SysVersionControlSynchronizeLog));
        #
        #        while (mapEnum.moveNext())
        #        {
        #            filename = mapEnum.currentKey();
        #            command = mapEnum.currentValue();
        #
        #            controllable = SysVersionControlTmpItem::newControllable(this.filename2ItemPath(filename), filename);
        #
        #            syncEntries.add(SysVersionControlSynchronizeLog::initLogEntry(
        #                filename,
        #                controllable,
        #                command,
        #                batchNum,
        #                folder));
        #
        #            SysVersionControlTmpItem::releaseControllable(controllable);
        #        }
        #
        #        // Commit sync-entries
        #        syncEntries.insertDatabase();
        #
        #        if (resultMap.elements() && !_syncParm.parmSkipImport())
        #        {
        #            //
        #            // Something to update
        #            //
        #            SysVersionControlSynchronizeLog::processBatchNum(batchNum);
        #
        #            if (!_syncParm.parmSyncAll())
        #            {
        #                //Only sync one node
        #                filename = this.fileName(_controllable);
        #                if (!SysVersionControlSynchronizeLog::validateFile(filename))
        #                {
        #                    throw error("@SYS85688");
        #                }
        #            }
        #            return false;
        #        }
        #    }
        #    else
        #    {
        #        throw error("@SYS85688");
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSynchronizeAndCheckout
        #public boolean commandSynchronizeAndCheckout(SysVersionControllable _controllable)
        #{
        #    if (offline ||
        #        backend.requireSyncBeforeCheckOut() == false)
        #    {
        #        return this.commandCheckOut(_controllable);
        #    }
        #    return super(_controllable);
        #}
      ENDSOURCE
      SOURCE #commandUndoCheckOut
        #public boolean commandUndoCheckOut(
        #    SysVersionControllable                  _controllable,
        #    boolean                                 _showDialog = true,
        #    SysVersionControlSynchronizeBatchNum    _batchNum = SysVersionControlSynchronizeLog::nextBatchNum()
        #)
        #{
        #    Filename                     filename;
        #    SysVersionControlActionText  action;
        #    DialogButton                 button = infolog.globalCache().get(classStr(SysVersionControlSystem), #VCUndoCheckOutButton, DialogButton::No);
        #    int                          attr;
        #
        #    boolean                      reverted = false;
        #    str                          revertedLocalItem;
        #
        #    SysVersionControlSyncParameters syncParm;
        #
        #    #WinApi
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        return treeNodeContainer.parmTreeNodeContainerDispatcher().undoCheckOut(_showDialog);
        #    }
        #
        #    filename    = this.fileName(_controllable);
        #
        #    // Update filenamecache
        #    if (filenameCache)
        #    {
        #        filenameCache.remove(_controllable.versionControlItemPath());
        #    }
        #
        #    if (offline)
        #    {
        #        attr = WinAPI::getFileAttributes(filename);
        #        if (bitTest(#FILE_ATTRIBUTE_READONLY, attr))
        #        {
        #            warning(strFmt("@SYS88309", filename));
        #            return false;
        #        }
        #        attr += #FILE_ATTRIBUTE_READONLY;
        #        WinAPI::setFileAttributes(filename, attr);
        #        info(strFmt("@SYS88310", this.fileName(_controllable)));
        #        return true;
        #    }
        #
        #    if (_showDialog && this.parmWarnWhenReverting())
        #    {
        #        if (button != DialogButton::YesToAll)
        #        {
        #            button = versioncontrol.parmUserInterfaceProvider().promptWhenReverting(strFmt("@SYS111302",'\n\n'+filename)+'\n\n'+"@SYS111301"+'\n'+"@SYS73804",
        #                DialogButton::No,
        #                "@SYS85686",  // title
        #                true);        // modal
        #        }
        #    }
        #    else
        #    {
        #        button = DialogButton::Yes;
        #    }
        #
        #    switch (button)
        #    {
        #        case DialogButton::Cancel:
        #            throw error("@SYS70800");
        #
        #        case DialogButton::YesToAll:
        #            infolog.globalCache().set(classStr(SysVersionControlSystem), #VCUndoCheckOutButton, DialogButton::YesToAll);
        #            //Fallthrough
        #
        #        case DialogButton::Yes:
        #            action = backend.actionTextForCheckedOutFile(filename);
        #
        #            //backend should make sure the reverted file is written to given filename
        #            [reverted, revertedLocalItem] = backend.fileUndoCheckout(filename);
        #            if (reverted)
        #            {
        #                switch (action)
        #                {
        #                    case backend.actionText(SysVersionControlSystemFileAction::Branch):
        #                        //Remove file from disk
        #                        _controllable.deleteFile(filename);
        #                        SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Delete, _batchNum);
        #                        break;
        #
        #                    case backend.actionText(SysVersionControlSystemFileAction::Add):
        #                        //Remove file from disk
        #                        _controllable.deleteFile(filename);
        #
        #                        //
        #                        // If the file has been added remotely, sync it
        #                        //
        #                        if (backend.fileExists(filename))
        #                        {
        #                            syncParm = SysVersionControlSyncParameters::construct();
        #                            syncParm.parmForce(true);
        #                            syncParm.parmSilent(false);
        #                            syncParm.parmDeleteLocalObjects(true);
        #                            backend.fileSynchronize(filename, syncParm);
        #                            SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Update, _batchNum);
        #                        }
        #                        break;
        #
        #                    case backend.actionText(SysVersionControlSystemFileAction::Rename):
        #                        //remove newly added controllable
        #                        SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Delete, _batchNum);
        #                        //create controllable was renamed
        #                        _controllable = SysVersionControlTmpItem::newControllable(this.filename2ItemPath(revertedLocalItem), revertedLocalItem);
        #
        #                        //sync the latest version due to rename also changes the file content (class header) that can not be undone
        #                        syncParm = SysVersionControlSyncParameters::construct();
        #                        syncParm.parmForce(true);
        #                        syncParm.parmSilent(false);
        #                        syncParm.parmDeleteLocalObjects(true);
        #                        backend.fileSynchronize(revertedLocalItem, syncParm);
        #
        #                        SysVersionControlSynchronizeLog::createLogEntry(revertedLocalItem, _controllable, SysVersionControlSynchronizeCommand::Update, _batchNum);
        #                        break;
        #
        #                    case backend.actionText(SysVersionControlSystemFileAction::Delete):
        #                    default:
        #                        SysVersionControlSynchronizeLog::createLogEntry(filename, _controllable, SysVersionControlSynchronizeCommand::Update, _batchNum);
        #                }
        #                //
        #                // Process the batch if no number specified = Only one object in batch
        #                //
        #                if (prmisDefault(_batchNum))
        #                {
        #                    SysVersionControlSynchronizeLog::processBatchNum(_batchNum);
        #                }
        #                _controllable.onUndoCheckOut();
        #                return true;
        #            }
        #            break;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    backend.createRepositoryEnd(_comment);
        #}
      ENDSOURCE
      SOURCE #description
        #public ClassDescription description()
        #{
        #    return backend.description();
        #}
      ENDSOURCE
      SOURCE #fileName
        #/// <summary>
        #/// Gets the file name for the <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface of which to get the file name.
        #/// </param>
        #/// <param name="_currentLayer">
        #/// Use the current layer; optional.
        #/// </param>
        #/// <param name="_promptForFolder">
        #/// A Boolean value that indicates whether a prompt for folder must be performed; optional.
        #/// </param>
        #/// <returns>
        #/// The file name for the <c>SysVersionControllable</c> interface.
        #/// </returns>
        #public Filename fileName(
        #    SysVersionControllable _controllable,
        #    boolean                _currentLayer = true,
        #    boolean                _promptForFolder = false)
        #{
        #    SetEnumerator   folderEnumerator;
        #    Filename        filename = _controllable.versionControlFilePath(_currentLayer)+_controllable.fileExtension();
        #    Filename        fileNameExclLayer;
        #    Filename        tmpFileName;
        #    Set             folderset;
        #    SetEnumerator   foldersetEnum;
        #    SysTreeNode     sysTreeNode;
        #    int             model;
        #    FilePath        modelFolder;
        #    TreeNode        treeNode;
        #    SysLabelFile    sysLabelFile;
        #    boolean         skipCache = false;
        #
        #    #SysModelStore
        #
        #    if (infolog.globalCache().isSet(#VCSCache, #NoPrompt))
        #    {
        #        //Do not prompt during creation of repository.
        #        _promptForFolder = false;
        #
        #        //Do not use cached filenames during Creation of repository.
        #        skipCache = true;
        #    }
        #
        #    if (_promptForFolder)
        #    {
        #        //Do not use cached filenames during Add to version control.
        #        skipCache = true;
        #    }
        #
        #    if (_controllable is SysTreeNodeVirtual)
        #    {
        #        // Do not use cached filenames for virtual nodes
        #        // Typically they have a temporary+arbitrary filename - if they have one.
        #        skipCache = true;
        #    }
        #
        #    if (skipCache == false &&
        #        filenameCache &&
        #        filenameCache.exists(_controllable.versionControlItemPath()))
        #    {
        #        return filenameCache.lookup(_controllable.versionControlItemPath());
        #    }
        #
        #    //
        #    // The SysVersionControlFile class is the default handler, and it does already contain
        #    // path information.
        #    //
        #    if (_controllable is SysVersionControlFile)
        #    {
        #        return filename;
        #    }
        #
        #    if (_currentLayer &&
        #        !strStartsWith(filename, 'labels\\')) // Label files is the AX2009 location are not stored in layer folder.
        #    {
        #        // If controllable is a SysTreeNode(treeNode) then lookup folder from the modelIdFolder map
        #        sysTreeNode = _controllable as SysTreeNode;
        #
        #        if (!sysTreeNode && _controllable is SysLabelFile)
        #        {
        #            sysLabelFile = _controllable as SysLabelFile;
        #            sysTreeNode = SysTreeNode::newTreeNode(sysLabelFile.treeNode());
        #            fileNameExclLayer = '\\'+filename;
        #        }
        #        else
        #        {
        #            fileNameExclLayer = subStr(filename,strLen(strFmt('%1', currentAOLayer()))+1, strLen(filename));
        #        }
        #
        #        if (sysTreeNode && sysTreeNode.parmTreeNode())
        #        {
        #            treeNode = sysTreeNode.parmTreeNode();
        #
        #            model = sysTreeNode.getVCSModelId();
        #
        #            if (model != #ModelId_Undefined)
        #            {
        #                modelFolder = this.getModelFolder(model);
        #            }
        #
        #            if (modelFolder)
        #            {
        #                //Resolve relative path
        #                filename = System.IO.Path::GetFullPath(strFmt(@'%1%2', modelFolder, fileNameExclLayer));
        #                filenameCache.insert(_controllable.versionControlItemPath(), filename);
        #                return filename;
        #            }
        #            else
        #            {
        #                if (_promptForFolder &&
        #                    (!additionalFolders || additionalFolders.elements() <= 1) ) //No additional folders except current layer
        #                {
        #                    warning(strFmt("@SYS340459", SysModelStore::displayName(model)));
        #                }
        #            }
        #
        #        }
        #
        #        if (additionalFolders)
        #        {
        #            //First scan on disk (fastest)
        #            folderEnumerator = additionalFolders.keySet().getEnumerator();
        #
        #            while (folderEnumerator.moveNext())
        #            {
        #                tmpFileName = folderEnumerator.current() + fileNameExclLayer;
        #                if (WinAPI::fileExists(strFmt('%1\\%2', folder, tmpFileName)))
        #                {
        #                    filename = strFmt('%1\\%2', folder, tmpFileName);
        #                    filenameCache.insert(_controllable.versionControlItemPath(), filename);
        #                    return filename;
        #                }
        #            }
        #        }
        #
        #        if (_controllable is SysTreeNodeVirtualDeleted)
        #        {
        #            // Then ask version control (slower) - Required if file has been deleted.
        #            // Query the deprecating/staging additional folders first, otherwise we might find a move to model (renamed/deleted)
        #            // file which is being or has been added.
        #            if (additionalFolders)
        #            {
        #                tmpFileName = this.findItemInFolders(additionalFolders.getEnumerator(), _controllable, fileNameExclLayer);
        #                if (tmpFileName)
        #                {
        #                    return tmpFileName;
        #                }
        #            }
        #
        #            if (modelFolders)
        #            {
        #                tmpFileName = this.findItemInFolders(modelFolders.getEnumerator(), _controllable, fileNameExclLayer, true);
        #                if (tmpFileName)
        #                {
        #                    return tmpFileName;
        #                }
        #            }
        #        }
        #
        #        if (infolog.globalCache().isSet(#VCSCache, #VSProjectDefaultFolder))
        #        {
        #            filename = infolog.globalCache().get(#VCSCache, #VSProjectDefaultFolder) + fileNameExclLayer;
        #        }
        #
        #        if (_promptForFolder)
        #        {
        #            folderset = versioncontrol.parmUserInterfaceProvider().promptForFolder(additionalFolders, false, false, _controllable);
        #
        #            // One folder is selected
        #            foldersetEnum = folderset.getEnumerator();
        #            if (foldersetEnum.moveNext())
        #            {
        #                filename = foldersetEnum.current() + fileNameExclLayer;
        #            }
        #            else
        #                throw error("@SYS70800");
        #        }
        #    }
        #
        #    return strFmt('%1\\%2', folder, filename);
        #}
      ENDSOURCE
      SOURCE #filename2ItemPath
        #/// <summary>
        #///    Returns the item path for the specified file name.
        #/// </summary>
        #/// <param name="_filename">
        #///    The name of the file that is used to determine the item path.
        #/// </param>
        #/// <returns>
        #///    The item path for the specified file name.
        #/// </returns>
        #/// <remarks>
        #///    The item path can contain one of the following values
        #///    <list type="bullet">
        #///       <item>
        #///          <description>A treenode path in the AOT.</description>
        #///       </item>
        #///       <item>
        #///          <description>A path for a label file.</description>
        #///       </item>
        #///       <item>
        #///          <description>A path for the version control definition file.</description>
        #///       </item>
        #///    </list>
        #/// </remarks>
        #public SysVersionControlItemPath filename2ItemPath(
        #    Filename        _filename)
        #{
        #    Filename filename = _filename;
        #    UtilEntryLevel layer;
        #    TreeNodePath path;
        #    int i;
        #    int pos = 0;
        #    int tmppos = 0;
        #    int lastSeparator = 0;
        #    str searchstr;
        #    str nodePath;
        #    str nodeParentPath;
        #    int strLength = strLen(filename);
        #    MapEnumerator enum;
        #    str vsVcsPath = strReplace(#VSProjectsVCSPath, '/', '\\');
        #    str modelFolderWithModelFilename;
        #
        #    void findPosition()
        #    {
        #        int xpoLength = strLen(#xpo);
        #
        #        while (tmppos)
        #        {
        #            // get to next path (layer or model name) of the filename.
        #            path = subStr(filename, tmppos+strLen(searchStr)-1, 2+strLength-tmppos-strLen(searchStr));
        #            path = strReplace(path, '/', '\\');
        #
        #            if (strStartsWith(path, vsVcsPath))
        #            {
        #                pos = tmppos;
        #                break;
        #            }
        #            else
        #            {
        #                nodePath = subStr(path, 1, strLen(path) - strLen(#xpo));
        #                lastSeparator = strFind(nodePath, '\\', strLen(nodePath), -strLen(nodePath));
        #                nodeParentPath = subStr(nodePath, 1, lastSeparator - 1);
        #
        #                // Deleted objects won't be found in the AOT, but their parent node will be
        #                if (TreeNode::findNode(nodePath) || (nodeParentPath && nodeParentPath != '\\' && TreeNode::findNode(nodeParentPath)))
        #                {
        #                    pos = tmppos;
        #                    break;
        #                }
        #            }
        #
        #            tmppos =  strScan(filename, searchStr, tmppos+1, strLength);
        #        }
        #    }
        #
        #    filename = strReplace(filename, '\\', '/');
        #
        #    // Try to find layer in filename
        #    for (i=0; i < enumCnt(UtilEntryLevel); i++)
        #    {
        #        layer = i;
        #        searchstr = strFmt('/%1/', layer);
        #        tmppos = strScan(filename, searchStr, 1, strLength);
        #
        #        findPosition();
        #
        #        if (pos)
        #        {
        #            break;
        #        }
        #    }
        #
        #    // If layer not found, try to find model folder paths in filename
        #    if (!pos && modelFolders)
        #    {
        #        enum = modelFolders.getEnumerator();
        #        while (enum.moveNext())
        #        {
        #            searchstr = strFmt('/%1/', enum.currentKey());
        #            searchstr = strReplace(searchstr, '\\', '/');
        #            tmppos = strScan(filename, searchStr, 1, strLength);
        #
        #            if (tmppos)
        #            {
        #                modelFolderWithModelFilename = strFmt(@'%1%2', searchstr, #ModelFileNameWithExtension);
        #                if (strEndsWith(filename, modelFolderWithModelFilename))
        #                {
        #                    pos = strScan(filename, modelFolderWithModelFilename, strLength, -strLength);
        #                    break;
        #                }
        #
        #                findPosition();
        #
        #                if (pos)
        #                {
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #
        #    // If model not found, try to find additional folder paths in filename
        #    if (!pos && additionalFolders)
        #    {
        #        enum = additionalFolders.getEnumerator();
        #        while (enum.moveNext())
        #        {
        #            searchstr = strFmt('/%1/', enum.currentKey());
        #            searchstr = strReplace(searchstr, '\\', '/');
        #            pos = strScan(filename, searchStr, 1, strLength);
        #            if (pos)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    if (pos && strScan(filename, #VSProjectsVCSPath, 1, strLen(filename)))
        #    {
        #        path = subStr(filename, pos+strLen(searchStr)-1, 2+strLength-pos-strLen(searchStr));
        #        path = SysTreeNodeVSItem::vcsPath2TreeNodePath(path);
        #        return path;
        #    }
        #
        #    // If pos is set filename either contains layer or model, additional folder path information.
        #    if (pos && strEndsWith(filename, #xpo))
        #    {
        #        //Is treenode
        #        path = subStr(filename, pos+strLen(searchStr)-1, 2+strLength-pos-strLen(searchStr)-strLen(#xpo));
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    // Is model.xml file
        #    if (pos && strEndsWith(filename, #ModelFileNameWithExtension))
        #    {
        #        // e:\repository\TestModel\Model.xml becomes \TestModel\Model
        #        path = subStr(filename, pos, 1+strLength-pos-strLen(#xml));
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    // Is it a label file?
        #    if (strEndsWith(filename, #ALD)) //ends with '.ald'
        #    {
        #        path = System.IO.Path::GetFileName(filename);
        #        path = #LabelsPath+path;
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    // Last try to find definition path in filename.
        #    pos = strScan(filename, #DefDepotPath, 1, strLength);
        #    if (pos)
        #    {
        #        //Is Definition file
        #        path = subStr(filename, pos, 2+strLength-pos);
        #        path = strReplace(path, '/', '\\');
        #        return path;
        #    }
        #
        #    return filename;
        #}
      ENDSOURCE
      SOURCE #findItemInFolders
        #private Filename findItemInFolders(MapEnumerator _folderEnumerator, SysVersionControllable _controllable, Filename _fileNameExclLayer, boolean _currentLayerOnly = false)
        #{
        #    SysVersionControlFile tmpControllableFile = SysVersionControlFile::construct();
        #    SysVersionControlTmpItem tmpItem;
        #    Filename tmpFileName;
        #    FilePath folderPath;
        #    int  infologLines = infologLine();
        #
        #    while (_folderEnumerator.moveNext())
        #    {
        #        folderPath = _folderEnumerator.current();
        #        if (_currentLayerOnly && !this.isModelFolderForCurrentLayer(folderPath))
        #        {
        #            continue;
        #        }
        #        tmpFileName = folderPath + _fileNameExclLayer;
        #        tmpItem.ItemPath = _controllable.versionControlItemPath();
        #        tmpItem.InternalFilename = strFmt('%1\\%2', folder, tmpFileName);
        #        tmpItem.Version = 0;
        #        tmpControllableFile.parmVCSItem(tmpItem);
        #        if (this.getItemVersion(tmpControllableFile, tmpItem))
        #        {
        #            infolog.clear(infologLines);
        #            return strFmt('%1\\%2', folder, tmpFileName);
        #        }
        #    }
        #    infolog.clear(infologLines);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getActionText
        #/// <summary>
        #/// Gets the action text for the controllable item.
        #/// </summary>
        #/// <param name="controllable">
        #/// The instance of the controllable.
        #/// </param>
        #/// <returns>
        #/// The value from the <c>SysVersionControlItemStatus</c> value that represents the checked-out action
        #/// of the controllable item.
        #/// </returns>
        #public SysVersionControlItemStatus getActionText(SysVersionControllable controllable)
        #{
        #    Filename filename = this.fileName(controllable);
        #    str actionText;
        #    actionText = this.parmBackend().actionTextForCheckedOutFile(filename);
        #
        #    if (actionText == "")
        #    {
        #        return SysVersionControlItemStatus::Uncontrolled;
        #    }
        #
        #    switch (actionText)
        #    {
        #        case backend.actionText(SysVersionControlSystemFileAction::Edit):
        #        case backend.actionText(SysVersionControlSystemFileAction::Branch):
        #        case backend.actionText(SysVersionControlSystemFileAction::Rename):
        #            return SysVersionControlItemStatus::Edit;
        #        case backend.actionText(SysVersionControlSystemFileAction::Delete):
        #            return SysVersionControlItemStatus::Delete;
        #        case backend.actionText(SysVersionControlSystemFileAction::Add):
        #            return SysVersionControlItemStatus::Add;
        #        default:
        #            return SysVersionControlItemStatus::Uncontrolled;
        #    }
        #}
      ENDSOURCE
      SOURCE #getChangeLists
        #public SysVersionControlPendingChangeList getChangeLists()
        #{
        #    SysVersionControlPendingChangeList list;
        #
        #    if (backend.supportPendingChangeLists())
        #    {
        #        return backend.changeListsPending();
        #    }
        #
        #    return list;
        #}
      ENDSOURCE
      SOURCE #getChangeNumberContents
        #/// <summary>
        #/// Gets a collection of objects that are included in a specific changelist.
        #/// </summary>
        #/// <param name="_changeNumber">
        #/// The changelist from which to retrieve the information.
        #/// </param>
        #/// <param name="_changeDateTime">
        #/// The time and date when the change was submitted.
        #/// </param>
        #/// <param name="_changeComments">
        #/// The comments that are associated with the change.
        #/// </param>
        #/// <returns>
        #/// A <c>SysVersionControlTmpItem</c> table that contains a record for each change in the changelist.
        #/// </returns>
        #public SysVersionControlTmpItem getChangeNumberContents(SysVersionControlChangeNumber _changeNumber, utcdatetime _changeDateTime, SysVersionControlItemComment _changeComments)
        #{
        #    SysVersionControlTmpItem item;
        #
        #    if (backend.supportSubmittedChangeLists())
        #    {
        #        item = backend.changeListContents(_changeNumber);
        #
        #        this.updateItemsPath(item);
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getChangesHistory
        #public SysVersionControlTmpChange getChangesHistory()
        #{
        #    SysVersionControlTmpChange item;
        #
        #    if (backend.supportSubmittedChangeLists())
        #    {
        #        return backend.folderChanges(folder);
        #    }
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getCheckedOutItems
        #public SysVersionControlTmpItem getCheckedOutItems()
        #{
        #    return this.getPendingChangeListContents('');
        #}
      ENDSOURCE
      SOURCE #getItemHistory
        #public SysVersionControlTmpItem getItemHistory(SysVersionControllable _controllable)
        #{
        #    SysVersionControlTmpItem item;
        #
        #    SysTreeNodeContainer nodeContainer;
        #    SysVersionControlBackendDirSupport backendWithDirSupport = backend as SysVersionControlBackendDirSupport;
        #
        #    nodeContainer = _controllable as SysTreeNodeContainer;
        #
        #    if (nodeContainer != null)
        #    {
        #        if (backendWithDirSupport)
        #        {
        #            item = backendWithDirSupport.directoryHistory(this.fileName(_controllable, true));
        #        }
        #        else
        #        {
        #            error("@SYS334841");
        #        }
        #    }
        #    else
        #    {
        #        item = backend.fileHistory(this.fileName(_controllable, true));
        #    }
        #
        #    while select forupdate item
        #    {
        #        item.ItemPath = _controllable.versionControlItemPath();
        #        item.update();
        #    }
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #getItemVersion
        #public Filename getItemVersion(SysVersionControllable _controllable, SysVersionControlTmpItem _item)
        #{
        #    SysTreeNodeContainer nodeContainer = _controllable as SysTreeNodeContainer;
        #    SysVersionControlBackendDirSupport backendWithDirSupport = backend as SysVersionControlBackendDirSupport;
        #    FilePath directoryPath;
        #
        #
        #    if (!_item.ItemPath)
        #    {
        #        _item.ItemPath = _controllable.versionControlItemPath();
        #    }
        #
        #    if (nodeContainer != null)
        #    {
        #        if (backendWithDirSupport)
        #        {
        #            directoryPath = backendWithDirSupport.directoryGetVersion(_item.InternalFilename, _item);
        #            return nodeContainer.getImportItemFilePath(directoryPath);
        #        }
        #        else
        #        {
        #            error("@SYS334842");
        #            return "";
        #        }
        #    }
        #    else
        #    {
        #        return backend.fileGetVersion(_item.InternalFilename, _item);
        #    }
        #}
      ENDSOURCE
      SOURCE #getPendingChangeListContents
        #public SysVersionControlTmpItem getPendingChangeListContents(str _changeList, boolean _silent = false)
        #{
        #    SysVersionControlTmpItem item;
        #    MapEnumerator enum;
        #    str relativePath;
        #    int numberOfDots;
        #    int maxNumberOfDots;
        #    int i;
        #    int pos;
        #    int numberOfBacks;
        #    str folderToUse = folder;
        #
        #    // The ALD locations may be outside the folder scope.
        #    // To accomodate, peal off sub folders until the ALD location is within scope
        #    if (aldLocations)
        #    {
        #        enum = aldLocations.getEnumerator();
        #        while (enum.moveNext())
        #        {
        #            relativePath = enum.currentValue();
        #            numberOfDots = strLen(strKeep(relativePath, '.'));
        #            if (numberOfDots > maxNumberOfDots)
        #            {
        #                maxNumberOfDots = numberOfDots;
        #            }
        #        }
        #
        #        if (maxNumberOfDots)
        #        {
        #            numberOfBacks = maxNumberOfDots / 2;
        #            numberOfBacks -= 2; //For "Label files/<Language>"
        #            for (i=1; i<=numberOfBacks; i++)
        #            {
        #                pos = strFind(folderToUse, '\\', maxInt(), minInt()); //Backward search
        #                if (pos)
        #                {
        #                    folderToUse = subStr(folderToUse, 1, pos-1);
        #                }
        #            }
        #        }
        #    }
        #    // _changeList can either be empty string, which means default change list
        #    // or change list id if backend supports pending change lists
        #    item = backend.filesPending(_changeList, folderToUse);
        #    this.updateItemsPath(item, true);
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #ideIntegration
        #public boolean ideIntegration()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #importLocalItems
        #public void importLocalItems(SysVersionControlTmpItem _pendingItems)
        #{
        #    Filename    filename;
        #    Filename    depotFile;
        #    SysVersionControlItemPath itemPath;
        #    int i = 0;
        #    SysVersionControlSynchronizeCommand command;
        #    SysVersionControlSynchronizeBatchNum batchNum = SysVersionControlSynchronizeLog::nextBatchNum();
        #
        #    while select _pendingItems
        #    {
        #        filename = this.localFileName(_pendingItems);
        #        switch (backend.actionTextForCheckedOutFile(filename))
        #        {
        #            case backend.actionText(SysVersionControlSystemFileAction::Add):
        #            case backend.actionText(SysVersionControlSystemFileAction::Branch):
        #                command = SysVersionControlSynchronizeCommand::Add;
        #                break;
        #
        #            case backend.actionText(SysVersionControlSystemFileAction::Edit):
        #                command = SysVersionControlSynchronizeCommand::Update;
        #                break;
        #
        #            case backend.actionText(SysVersionControlSystemFileAction::Delete):
        #                command = SysVersionControlSynchronizeCommand::Delete;
        #                break;
        #
        #            default:
        #                //In case the command is something else
        #                //skip the file
        #                continue;
        #        }
        #        depotFile = strReplace(_pendingItems.InternalFilename, '/', '\\');
        #        itemPath = this.filename2ItemPath(depotFile);
        #        if (filename)
        #        {
        #            SysVersionControlSynchronizeLog::createLogEntry(
        #                filename,
        #                SysVersionControlTmpItem::newControllable(itemPath, filename),
        #                command,
        #                batchNum,
        #                folder);
        #            i++;
        #        }
        #    }
        #    if (i)
        #    {
        #        //
        #        // Something to update
        #        //
        #        SysVersionControlSynchronizeLog::processBatchNum(batchNum);
        #    }
        #}
      ENDSOURCE
      SOURCE #init
        #public boolean init(SysVersionControlParameters _parameters)
        #{
        #    boolean ret = super(_parameters);
        #
        #    if (ret)
        #    {
        #        switch (backend.init(_parameters))
        #        {
        #            case SysVersionControlSystemStatus::NotConnected:
        #                return false;
        #
        #            case SysVersionControlSystemStatus::Connected:
        #                return true;
        #
        #            case SysVersionControlSystemStatus::WorkingOffline:
        #                offline = true;
        #                return true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #protected void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #    super(_topNode);
        #
        #    backend.interpretXMLPluginParameters(_topNode);
        #}
      ENDSOURCE
      SOURCE #isModelFolderForCurrentLayer
        #protected boolean isModelFolderForCurrentLayer(FilePath _modelFolder)
        #{
        #    Filename                        modelFilePath;
        #    ModelId                         modelId;
        #    SysModel                        sysModel;
        #
        #    modelFilePath = strFmt(@'%1\%2\', this.parmFolder(), _modelFolder);
        #
        #    modelId = this.getModelFromFile(modelFilePath);
        #
        #    if (!modelId)
        #    {
        #        // Unable to retrieve model and layer information. Assume it is relevant to current layer.
        #        return true;
        #    }
        #
        #    select firstonly Layer from sysModel
        #        where sysModel.RecId == modelId;
        #
        #    return (sysModel.Layer == currentAOLayer());
        #}
      ENDSOURCE
      SOURCE #isTmpItemOpenedForDelete
        #/// <summary>
        #/// Checks whether a version control object is opened for delete.
        #/// </summary>
        #/// <param name="_sysVersionControlTmpItem">
        #/// A temporary <c>SysVersionControlTmpItem</c> buffer to check.
        #/// </param>
        #/// <returns>
        #/// true if the version control object is opened for delete; otherwise, false.
        #/// </returns>
        #public boolean isTmpItemOpenedForDelete(SysVersionControlTmpItem _sysVersionControlTmpItem)
        #{
        #    return _sysVersionControlTmpItem.ActionText == backend.actionText(SysVersionControlSystemFileAction::Delete);
        #}
      ENDSOURCE
      SOURCE #localFileName
        #public Filename localFileName(SysVersionControlTmpItem _item)
        #{
        #    Filename  depotFile;
        #    Filename  filename;
        #    Filename  filePath;
        #    SysVersionControlItemPath itemPath;
        #    int pos = 0;
        #    int len;
        #
        #    //
        #    // Strategy 1: Determine item path, and create file name from it
        #    //             This works well for all AX artifacts
        #    //
        #
        #    depotFile = strReplace(_item.InternalFilename, '/', '\\');
        #    len = strLen(depotFile);
        #    itemPath = this.filename2ItemPath(depotFile);
        #    filePath = SysTreeNode::treeNodePath2FilePath(itemPath);
        #    pos = strScan(depotFile, filePath, len, -len);
        #    if(pos)
        #    {
        #        pos = strScan(depotFile,'\\',pos-1,-len);
        #        if(pos)
        #        {
        #            return folder + subStr(depotFile, pos, len);
        #        }
        #    }
        #
        #    //
        #    // Strategy 2: Determine the overlap between filename and internalfilename, and create file name from it
        #    //             This works well for non AX artifacts
        #    //
        #
        #    filename = strReplace(_item.Filename, '/', '\\');
        #    pos = 1;
        #    len = strLen(_item.Filename);
        #    while (pos <= len &&
        #           strEndsWith(depotFile, subStr(filename, len, -pos)))
        #    {
        #        pos++;
        #    }
        #    return SysVersionControlParameters::getTargetRepositoryFolderPath() + subStr(filename, len, 1-pos);
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    filenameCache = new Map(Types::String, Types::String);
        #    super();
        #}
      ENDSOURCE
      SOURCE #parmBackend
        #public SysVersionControlFilebasedBackEnd parmBackend(SysVersionControlFilebasedBackEnd _backend = backend)
        #{
        #    backend = _backend;
        #
        #    return backend;
        #}
        #
      ENDSOURCE
      SOURCE #parmProject
        #public SysVersionControlProject parmProject(SysVersionControlProject _project = project)
        #{
        #    SysVersionControlProject ret;
        #
        #    if (offline && prmisDefault(_project))
        #    {
        #        ret = strFmt("@SYS88189", super(_project));
        #    }
        #    else
        #    {
        #        ret = super(_project);
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reviewChangeList
        #public void reviewChangeList(
        #    SysVersionControlTmpItem     _items,
        #    SysVersionControlItemComment _comment,
        #    FilenameSave                 _fileName)
        #{
        #    boolean errorsFound = false;
        #    SysVersionControllable controllable;
        #    Set setoffiles = new Set(Types::String);
        #    Filename itemFilename;
        #
        #    if (backend.supportReviews())
        #    {
        #        while select _items
        #        {
        #            if (_items.ActionText != backend.actionText(SysVersionControlSystemFileAction::Branch) &&
        #                _items.ActionText != backend.actionText(SysVersionControlSystemFileAction::Delete))
        #            {
        #                controllable = _items.getControllable();
        #                if (controllable)
        #                {
        #                    itemFilename = this.fileName(controllable);
        #                    setoffiles.add(itemFilename);
        #                    if (!controllable.toFile(this.fileName(controllable), false))
        #                    {
        #                        errorsFound = true;
        #                        break;
        #                    }
        #                }
        #            }
        #        }
        #        if (!errorsFound)
        #        {
        #            backend.reviewFileSet(setoffiles, _comment, _fileName, folder);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #    if (backend.supportReviews())
        #    {
        #        return backend.reviewFilenameLookupFilter();
        #    }
        #    return conNull();
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #    backend.showInfo();
        #}
      ENDSOURCE
      SOURCE #showStatusLine
        #public boolean showStatusLine()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #public boolean supportChangeVersion()
        #{
        #    return backend.supportChangeVersion();
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #public boolean supportCheckInWizard()
        #{
        #    return backend.supportCheckInWizard();
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #public boolean supportMultipleCheckout()
        #{
        #    return backend.supportMultipleCheckout();
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #public boolean supportPendingChangeLists()
        #{
        #    return backend.supportPendingChangeLists();
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #public boolean supportReviews()
        #{
        #    return backend.supportReviews();
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #public boolean supportSubmittedChangeLists()
        #{
        #    return backend.supportSubmittedChangeLists();
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return backend.supportSyncDeleteLocalFiles();
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #public boolean supportSyncLabel()
        #{
        #    return backend.supportSyncLabel();
        #}
      ENDSOURCE
      SOURCE #updateItemsPath
        #protected void updateItemsPath(SysVersionControlTmpItem _item, boolean _setFileName = false)
        #{
        #    ImageListAppl imageList;
        #
        #    if (hasGUI())
        #    {
        #        imageList = new ImageListAppl_Aot();
        #    }
        #
        #    while select forupdate _item
        #    {
        #        _item.ItemPath = this.filename2ItemPath(_item.InternalFilename);
        #        if (imageList)
        #        {
        #            _item.ImageRes = imageList.image(SysVersionControlSystem::path2Image(_item.ItemPath));
        #        }
        #
        #        //update file name (for Tfs backend it is by design file name is empty for supporting compare functionality)
        #        if (_setFileName && _item.Filename == '')
        #        {
        #            _item.Filename = _item.InternalFilename;
        #            _item.Filename = this.localFileName(_item);
        #        }
        #
        #        _item.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #validateMultipleModels
        #/// <summary>
        #/// Validates that the <c>SysVersionControlLabel</c> class has references to multiple models in the
        #/// current layer.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The value of the <paramref name="_controllable" /> parameter.
        #/// </param>
        #/// <returns>
        #/// true if the controllable has one reference to a model or is not a root tree node; otherwise, false.
        #/// </returns>
        #protected boolean validateMultipleModels(SysVersionControllable _controllable)
        #{
        #    SysTreeNode sysTreeNode = _controllable as SysTreeNode;
        #    TreeNode treeNode;
        #
        #    // check for unsupported multiple models on same element in same layer
        #    if (sysTreeNode && sysTreeNode.parmTreeNode())
        #    {
        #        treeNode = sysTreeNode.parmTreeNode();
        #
        #        if (treeNode.treeNodeType().isRootElement() &&
        #            treeNode.treeNodeType().isUtilElement() &&
        #            SysVersionControlSystemFileBased::hasMultipleModelsOnRoot(treeNode.utilIdElement().Name, treeNode.utilIdElement().RecordType))
        #        {
        #            return false;
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Indicates whether the element name contains a valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains a valid owner prefix; otherwise, false.
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    return this.parmBackend().verifyOwnerPrefix(elementName);
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized <c>SysVersionControlWorkItemProvider</c> object.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return backend.workItemProvider();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlSystemFileBased construct()
        #{
        #    return new SysVersionControlSystemFileBased();
        #}
        #
      ENDSOURCE
      SOURCE #hasMultipleModelsOnRoot
        #private static server boolean hasMultipleModelsOnRoot(IdentifierName _name, UtilElementType _type, UtilEntryLevel _layer = currentAOLayer())
        #{
        #    SysModelElement     rootElement;
        #    SysModelElement     subElement;
        #    SysModelElementData elementData;
        #    SysModelLayer       elementLayer;
        #    int counter = 0;
        #
        #    // While select is needed as no distinct available in X++.
        #    while select ModelId from elementData group by elementData.ModelId
        #        join RecId from elementLayer
        #            where elementLayer.RecId == elementData.Layer
        #               && elementLayer.Layer == _layer
        #        join RecId from subElement
        #            where subElement.RecId == elementData.ModelElement
        #               && (subElement.ElementType != UtilElementType::ClassInternalHeader && subElement.ElementType != UtilElementType::TableInternalHeader)
        #        join RecId from rootElement
        #            where rootElement.RecId == subElement.RootModelElement
        #               && rootElement.Name == _name
        #               && rootElement.ElementType == _type
        #    {
        #        counter++;
        #
        #        if (counter > 1)
        #        {
        #            break;
        #        }
        #    }
        #
        #    return counter > 1;
        #}
      ENDSOURCE
      SOURCE #newBackEnd
        #public static SysVersionControlSystemFileBased newBackEnd(SysVersionControlFilebasedBackEnd _backend)
        #{
        #    SysVersionControlSystemFileBased sysVersionControlSystemFileBased = SysVersionControlSystemFileBased::construct();
        #
        #    sysVersionControlSystemFileBased.parmBackend(_backend);
        #    return sysVersionControlSystemFileBased;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlFileBasedBackEndGit unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlFileBasedBackEndGit
    PROPERTIES
      Name                #SysVersionControlFileBasedBackEndGit
      Origin              #{12739820-AB58-4BFA-A46A-0053979C0B4E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #actionText
        #public str actionText(SysVersionControlSystemFileAction _action)
        #{
        #    // Todo: Add logic later
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #actionTextForCheckedOutFile
        #public str actionTextForCheckedOutFile(Filename _fileName)
        #{
        #    // Todo: Add logic later
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #changeListContents
        #public SysVersionControlTmpItem changeListContents(SysVersionControlChangeNumber _number)
        #{
        #    // Todo: Add logic later
        #    SysVersionControlTmpItem item;
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #changeListsPending
        #public SysVersionControlPendingChangeList changeListsPending()
        #{
        #    // Todo: Add logic later
        #    SysVersionControlPendingChangeList changeList;
        #
        #    return changeList;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// HM_Version Control Testing, added by Daniel at 1/3/2017
        #public class SysVersionControlFileBasedBackEndGit implements SysVersionControlFilebasedBackEnd
        #{
        #    #localmacro.git
        #        @'E:\Software\Git\Git\cmd\git.exe'
        #    #endmacro
        #
        #    #File
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #/// <summary>
        #///    Checks the repository in.
        #/// </summary>
        #/// <param name="_comment">
        #///    The comment to use for the check-in.
        #/// </param>
        #/// <remarks>
        #///    This method is invoked at the end of the create repository operation.
        #/// </remarks>
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #    // Todo: Need updated
        #    //COM specData = this.getSpecData(#SDChange);
        #    //
        #    //specData.item(#SDSpecDataDescription, _comment);
        #    //sdConnection.specData(specData);
        #    //this.executeCommand(#SDSubmitSpecData);
        #}
      ENDSOURCE
      SOURCE #description
        #/// <summary>
        #/// Provides a description of the class.
        #/// </summary>
        #/// <returns>
        #/// The class description.
        #/// </returns>
        #public ClassDescription description()
        #{
        #    return "Git";
        #}
      ENDSOURCE
      SOURCE #executeCommand
        #protected boolean executeCommand(
        #    str     _repository,
        #    str     _operation,
        #    str     _file)
        #{
        #    System.Diagnostics.Process              process;
        #    System.Diagnostics.ProcessStartInfo     processStartInfo;
        #    System.Exception                        ex;
        #    System.IO.StreamReader                  streamRead;
        #    int                                     exitCode;
        #    boolean                                 ret;
        #    str                                     command;
        #
        #
        #    command = strFmt("%1 %2", _operation, _file);
        #    //if (WinAPI::fileExists(_repository + @'\.git\index.lock', false))
        #    //throw error('index.lock exists - repository operation in progress');
        #    try
        #    {
        #        if (WinAPI::setCurrentDirectory(_repository) != 0)
        #        {
        #            error('Unable to change working directory to '+_repository);
        #            return false;
        #        }
        #
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #        process = new System.Diagnostics.Process();
        #
        #        processStartInfo = new System.Diagnostics.ProcessStartInfo();
        #        processStartInfo.set_WorkingDirectory(_repository);
        #        processStartInfo.set_FileName(#git);
        #        processStartInfo.set_Arguments(command);
        #        processStartInfo.set_UseShellExecute(false);
        #        processStartInfo.set_RedirectStandardOutput(true);
        #        processStartInfo.set_RedirectStandardError(true);
        #        processStartInfo.set_CreateNoWindow(true);
        #
        #        process.set_StartInfo(processStartInfo);
        #        process.Start();
        #        //process.WaitForExit(1000*5);   //TODO: without timeout it hangs when StandardOutput message is larger than 4KB
        #                                        // http://stackoverflow.com/questions/139593/processstartinfo-hanging-on-waitforexit-why
        #
        #        while (!process.get_HasExited())
        #        {
        #            streamRead = process.get_StandardOutput();
        #            //ret += streamRead.ReadToEnd();
        #            ret = true;
        #        }
        #
        #        exitCode = CLRInterop::getAnyTypeForObject(process.get_ExitCode());
        #        if (exitCode)
        #        {
        #            streamRead = process.get_StandardError();
        #            /*throw*/ error(streamRead.ReadToEnd());
        #        }
        #        else
        #        {
        #            streamRead = process.get_StandardOutput();
        #            //ret += streamRead.ReadToEnd();
        #            ret = true;
        #        }
        #
        #        CodeAccessPermission::revertAssert();
        #
        #    }
        #    catch(Exception::CLRError)
        #    {
        #        // BP Deviation documented
        #        ex = ClrInterop::getLastException();
        #
        #        while (ex != null)
        #        {
        #            error(ex.ToString());
        #
        #            ex = ex.get_InnerException();
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fileAddToVersionControl
        #/// <summary>
        #///    Adds a file to the version control system.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to add.
        #/// </param>
        #/// <param name="_comment">
        #///    A comment to the file which is added; optional; optional.
        #/// </param>
        #/// <returns>
        #///    true if the file was added successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file will be available to other users after a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileAddToVersionControl(Filename _filename, SysVersionControlItemComment _comment = '')
        #{
        #    SysVersionControlRepositoryFolder   sysVersionControlRepositoryFolder;
        #
        #    SysVersionControlTmpItem    tmpItem;
        #    TreeNode                    treeNode;
        #    IdentifierName              elementName;
        #    TreeNodeType                treeNodeType;
        #
        #    Filename                    treeNodePath;
        #    Filename                    xpoName;
        #    Filename                    xpoExt;
        #
        #    //Todo: Need updated
        #    if (SysVersionControlTmpItem::isValidXPOFile(_filename))
        #    {
        #        //treeNode = tmpItem.getVirtualTreenode(_filename);
        #        //elementName= treeNode.treeNodeName();
        #        //treeNodeType = treeNode.treeNodeType();
        #        //TreeNodePath = treeNode.treeNodePath();
        #
        #        //xpoName = strFmt("%1%2", elementName, #xpo);
        #
        #        sysVersionControlRepositoryFolder = SysVersionControlParameters::find().RepositoryFolder;
        #
        #        [treeNodePath, xpoName, xpoExt] = fileNameSplit(_filename);
        #
        #        if (this.executeCommand(treeNodePath, 'add', strFmt("%1%2", xpoName, xpoExt)))
        #        {
        #            return true;
        #        }
        #
        #        //this.executeCommand(sysVersionControlRepositoryFolder, strFmt("add %1", xpoName));
        #        //if (this.executeCommand(#SDAdd, _filename, true))
        #        //{
        #        //    return true;
        #        //}
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileCheckedOutTo
        #/// <summary>
        #/// Returns a list of users to whom a file is checked out to.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// A comma separated list of users; otherwise, an empty string.
        #/// </returns>
        #public str fileCheckedOutTo(Filename _filename)
        #{
        #    // Todo: Need updated
        #    //COM sdResult;
        #    //COM sdCommandOutputs, sdCommandOutput;
        #    //COM sdVariables;
        #    //
        #    //int lines;
        #    //
        #    ////Do not display error/warning/info information, as this is a background query
        #    //lines = infologLine();
        #    //sdResult = this.executeStructuredCommand(#SDOpenedAll, _filename);
        #    //
        #    //if (sdResult)
        #    //{
        #    //    sdCommandOutputs = sdResult.structuredOutput();
        #    //    if (sdCommandOutputs.count())
        #    //    {
        #    //        sdCommandOutput  = sdCommandOutputs.item(0);
        #    //        sdVariables      = sdCommandOutput.variables();
        #    //        return this.getVar(sdVariables, #SDVarUser);
        #    //    }
        #    //}
        #
        #    //infolog.clear(lines);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileCheckout
        #public boolean fileCheckout(Filename _fileName)
        #{
        #    // Todo: Add logic later
        #    //return this.executeCommand(#SDEdit, _fileName, false);
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileDelete
        #/// <summary>
        #///    Checks out a file for deletion.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to delete.
        #/// </param>
        #/// <returns>
        #///    true if the file was deleted successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    The file is deleted in the back end by a subsequent check-in operation.
        #/// </remarks>
        #public boolean fileDelete(Filename _filename)
        #{
        #    // Todo: Need updated
        #    //if (this.executeCommand(#SDDelete, _filename))
        #    //{
        #    //    return true;
        #    //}
        #    return false;
        #}
      ENDSOURCE
      SOURCE #fileExists
        #/// <summary>
        #/// Verifies whether a file exists in the back end.
        #/// </summary>
        #/// <param name="_filename">
        #/// The file to verify.
        #/// </param>
        #/// <returns>
        #/// true if the file exists in the back end; otherwise, false.
        #/// </returns>
        #public boolean fileExists(Filename _filename)
        #{
        #    // Todo: Need updated
        #    //return this.executeCommand(#SDFiles, _filename, true);
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileGetVersion
        #/// <summary>
        #///    Retrieves a version of a file from the storage of the back end.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to retrieve a version of.
        #/// </param>
        #/// <param name="_item">
        #///    The that corresponds to temporary record of the version control item in the requested version.
        #/// </param>
        #/// <returns>
        #///    A fully qualified file name to a temporary location where the version of the file has been saved.
        #/// </returns>
        #/// <remarks>
        #///    If <c>_version</c> is 0 (zero), the latest version of the file is requested.If <c>_version</c> is
        #///    -1 (minus-one), the back end's copy of the local version is requested. That is the version the user
        #///    received the last time, they synchronized.
        #/// </remarks>
        #public Filename fileGetVersion(Filename _filename, SysVersionControlTmpItem _item)
        #{
        #    // Todo: Need updated
        #    /*
        #    Filename tmpfilename;
        #    Filename filename;
        #    boolean  useCache;
        #    int      lines;
        #    SysVersionControllable controllable;
        #
        #    switch (_item.Version)
        #    {
        #        case -1:
        #            filename = strFmt(#SDRevisionHave, _filename);
        #            useCache = false;
        #            break;
        #
        #        case 0:
        #            filename = strFmt(#SDRevisionHead, _filename);
        #            useCache = false;
        #            break;
        #
        #        default:
        #            filename = strFmt('%1@%2', _filename, _item.ChangeNumber);
        #            useCache = true;
        #            break;
        #
        #    }
        #
        #    controllable = _item.getControllable();
        #
        #    if (useCache)
        #    {
        #        tmpfilename = strFmt('%1\\%2@%3%4',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), strAlpha(controllable.versionControlItemPath()), _item.ChangeNumber, controllable.fileExtension());
        #    }
        #    else
        #    {
        #        tmpfilename = strFmt('%1\\%2#%3%4',xApplication::getFolderPath(#CSIDL_INTERNET_CACHE), strAlpha(controllable.versionControlItemPath()), WinAPI::createGUID(), controllable.fileExtension());
        #    }
        #
        #    if (!useCache || !WinAPI::fileExists(tmpfilename))
        #    {
        #        lines = infologLine();
        #
        #        //
        #        // If not checked in #have will generate an error
        #        //
        #        if (this.executeCommand(strFmt(#SDPrint, tmpfilename), filename) || _item.Version == -1)
        #        {
        #            infolog.clear(lines);
        #        }
        #    }
        #    if (WinAPI::fileExists(tmpfilename))
        #    {
        #        return tmpfilename;
        #    }
        #    */
        #    return '';
        #}
      ENDSOURCE
      SOURCE #fileHistory
        #public SysVersionControlTmpItem fileHistory(FileName _fileName)
        #{
        #    // Todo: Add logic later
        #    //return this.getFileNameHistory(_fileName);
        #    SysVersionControlTmpItem sysVersionControlTmpItem;
        #    return sysVersionControlTmpItem;
        #}
      ENDSOURCE
      SOURCE #fileLock
        #public boolean fileLock(Filename _fileName)
        #{
        #    // Todo: Add logic later
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileRename
        #public boolean fileRename(FileName _oldFileName, FileName _newFileName)
        #{
        #    // Todo: Add logic later
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileSetCheckin
        #/// <summary>
        #/// Checks in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to check in.
        #/// </param>
        #/// <param name="_comment">
        #/// The comment to use for the check-in.
        #/// </param>
        #/// <param name="_changeList">
        #/// The changelist to check-in.
        #/// </param>
        #/// <param name="_workItems">
        #/// The work items associated with the files to check-in.
        #/// </param>
        #/// <returns>
        #/// true if the check-in is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Any file that is successfully checked in is also unlocked.
        #/// </remarks>
        #public boolean fileSetCheckin(
        #    Map _setOfFiles,
        #    SysVersionControlItemComment _comment,
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    // Todo: Need updated
        #    /*
        #    #define.failText('Submit failed')
        #    #define.digits('0123456789')
        #    #define.useSubmit('use \'sd submit -c')
        #
        #    boolean resolvedOk;
        #    Map resolveFiles;
        #    Filename resolveFilename;
        #    int idx;
        #    str message;
        #    str changeNum;
        #
        #    COM commandOutPut;
        #    COM specData;
        #    COM errorOutput;
        #    COM warningOutput;
        #
        #    str cmd;
        #
        #    COMVariant variant = new COMVariant(COMVariantInOut::In, COMVariantType::VT_SAFEARRAY);
        #
        #    Array arr = new Array(Types::String);
        #
        #    SysBuildNo nextBuildNo;
        #
        #    Filename filename;
        #    MapEnumerator filesEnumerator;
        #    int i = 0;
        #
        #    sdCheckInResult = null;
        #    if (!_comment) //Use gated check-in
        #    {
        #        if (_changeList && _changeList != #DefaultChangeList)
        #        {
        #            cmd = #checkinwCmdlineChangeList;
        #            cmd = strReplace(cmd, 'change', _changeList);
        #        }
        #        else
        #        {
        #            cmd = #checkinWCmdLine;
        #        }
        #        cmd = strReplace(cmd, 'folder', SysVersionControlParameters::find().RepositoryFolder);
        #        WinAPI::shellExecute(#checkinW, cmd, SysVersionControlParameters::find().RepositoryFolder, #ShellExeOpen, #SW_SHOWNORMAL );
        #    }
        #    else
        #    {
        #        filesEnumerator = _setOfFiles.getEnumerator();
        #        filesEnumerator.reset();
        #
        #        while (filesEnumerator.moveNext())
        #        {
        #            // Get internal depot filename of client filename
        #            filename = this.getDepotFilename(filesEnumerator.currentKey());
        #            if (filename)
        #            {
        #                i++;
        #                arr.value(i, filename);
        #            }
        #        }
        #
        #        variant.safeArray(arr, COMVariantType::VT_VARIANT);
        #
        #        specData = this.getSpecData(#SDChange);
        #        specData.item(#SDSpecDataFiles, variant);
        #        specData.item(#SDSpecDataDescription, _comment);
        #
        #        sdConnection.specData(specData);
        #
        #        sdCheckInResult = this.executeStructuredCommandSilent(#SDSubmitSpecData);
        #        errorOutput = sdCheckInResult.errorOutput();
        #        if (errorOutput.count())
        #        {
        #            // Resolve needed
        #            errorOutput = sdCheckInResult.errorOutput();
        #            for (i = 0; i < errorOutput.count(); i++)
        #            {
        #                commandOutPut = errorOutput.item(i);
        #
        #                message = commandOutPut.message();
        #                if (strScan(message, #failText, 1, strLen(message)))
        #                {
        #                    idx = strScan(message, #useSubmit, 1, strLen(message));
        #                    if (idx)
        #                    {
        #                        changeNum = subStr(message, idx + strLen(#useSubmit), strLen(message));
        #                        changeNum = strKeep(changeNum, #digits);
        #                        break;
        #                    }
        #                }
        #            }
        #
        #            warningOutput = sdCheckInResult.warningOutput();
        #            resolveFiles = new Map(Types::String, Types::String);
        #            resolvedOk = true;
        #            for (i = 0; i < warningOutput.count(); i++)
        #            {
        #                commandOutPut = warningOutput.item(i);
        #                message = commandOutPut.message();
        #                if (strScan(message, #MustResolveText, 1, strLen(message)))
        #                {
        #                    resolveFilename = subStr(message, 1, strFind(message, ' ', 1, strLen(message))-1);
        #                    resolveFiles.insert(resolveFilename, '');
        #                }
        #            }
        #
        #            filesEnumerator = resolveFiles.getEnumerator();
        #            while (filesEnumerator.moveNext())
        #            {
        #                if (SysLabelFile::isLabelFile(resolveFilename))
        #                {
        #                    resolvedOk = this.executeCommand(#SDResolveYours, resolveFilename) && resolvedOk;
        #                }
        #                else
        #                {
        #                    resolvedOk = this.executeCommand(#SDResolveMerged, resolveFilename) && resolvedOk;
        #                }
        #            }
        #
        #            if (resolvedOk && changeNum)
        #            {
        #                return this.executeCommand(strFmt(#SDSubmitChangeList, changeNum));
        #            }
        #        }
        #        else
        #        {
        #            nextBuildNo = SysVersionControlFileBasedBackEndSD::nextBuildNo();
        #            if (nextBuildNo)
        #            {
        #                info(strFmt("@SYS86585", nextBuildNo));
        #            }
        #            return true;
        #        }
        #        // Otherwise return false
        #        return false;
        #    }
        #    */
        #    return true;
        #}
      ENDSOURCE
      SOURCE #fileSetResolve
        #/// <summary>
        #/// Resolves conflicts in a set of files.
        #/// </summary>
        #/// <param name="_setOfFiles">
        #/// The set of files to resolve.
        #/// </param>
        #/// <returns>
        #/// true if the set of files are resolved successful; otherwise, false.
        #/// </returns>
        #public boolean fileSetResolve(Map _setOfFiles)
        #{
        #    // Todo: Add logic later
        #    boolean resolvedOk = false;
        #
        #    return resolvedOk;
        #}
      ENDSOURCE
      SOURCE #filesPending
        #/// <summary>
        #///    Gets the pending files.
        #/// </summary>
        #/// <param name="_changeListId">
        #///    The ID of the pending change list of which to retrieve the contents.
        #/// </param>
        #/// <param name="_folder">
        #///    The repository folder.
        #/// </param>
        #/// <returns>
        #///    The pending files.
        #/// </returns>
        #/// <remarks>
        #///    The returned table contains one record for each pending file.If the <c>changeListId</c> field is
        #///    blank, the contents of the default change list is returned.
        #/// </remarks>
        #public SysVersionControlTmpItem filesPending(
        #    SysVersionControlChangeListId _changeListId,
        #    SysVersionControlRepositoryFolder _folder)
        #{
        #    // Todo: Need updated
        #    SysVersionControlTmpItem item;
        #    //str defFile;
        #    //
        #    //if(_changeListId)
        #    //{
        #    //    this.getPendingChangeList(item, strFmt(#SDOpenedChangeList, _changeListId, _folder), true);
        #    //}
        #    //else
        #    //{
        #    //    this.getPendingChangeList(item, strFmt(#SDOpened, _folder), true);
        #    //}
        #    //
        #    //if (branch)
        #    //{
        #    //    defFile = SysVersionControlParameters::find().RepositoryFolder + #DefFile;
        #    //    this.getPendingChangeList(item, strFmt(#SDOpenedFile, defFile), true);
        #    //}
        #    return item;
        #}
      ENDSOURCE
      SOURCE #fileSynchronize
        #/// <summary>
        #///    Gets a specific version of a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class that specifies the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contains the file name and the action performed on the file.
        #/// </returns>
        #/// <remarks>
        #///    When the version in the <c>syncParameters</c> parameter is not specified, the latest version of the
        #///    file will be retrieved.
        #/// </remarks>
        #public Map fileSynchronize(
        #    Filename _filename,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    Map retMap = new Map(Types::String, Types::Enum); // Filename, Synchronization-command
        #
        #    // Todo: Need updated
        #    /*int firstLine = infologLine();
        #    int lastLine;
        #    int i;
        #    str commandStr;
        #    str message;
        #    str warningText;
        #    Filename localFilename = _syncParameters.parmChangeListNumber() == 0 ? _filename : strFmt('%1@%2', _filename, _syncParameters.parmChangeListNumber());
        #    Filename syncFileName;
        #    Filename arg;
        #    SysVersionControlSynchronizeCommand command;
        #
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #
        #    if (_syncParameters.parmChangeListNumber() == 0)
        #    {
        #        // Use local file name when syncing head revision.
        #        syncFileName = localFilename;
        #        arg = syncFileName;
        #    }
        #    else
        #    {
        #        syncFileName = this.getDepotFilename(localFilename, false);
        #        arg = strFmt('%1@%2', syncFileName, _syncParameters.parmChangeListNumber());
        #    }
        #
        #    if (!syncFileName)
        #        return retMap;
        #
        #    if ( _syncParameters.parmForce())
        #    {
        #        commandStr = #SDSyncForced;
        #    }
        #    else
        #    {
        #        commandStr = #SDSync;
        #    }
        #
        #    sdResult = this.executeStructuredCommand(commandStr, arg, false, _syncParameters.parmSilent());
        #
        #    if (sdResult)
        #    {
        #        lastLine = infologLine();
        #        warningText = infolog.text(lastLine);
        #
        #        if (lastLine >= firstLine &&
        #            _syncParameters.parmSilent() &&
        #            strScan(warningText, #uptodate, 1, strLen(warningText)) &&
        #            strScan(warningText, syncFileName, 1, strLen(warningText)))
        #        {
        #            infolog.clear(firstLine);
        #        }
        #
        #        sdCommandOutputs = sdResult.infoOutput();
        #
        #        for ( i = 0; i < sdCommandOutputs.count(); i++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            message    = sdCommandOutput.message();
        #            commandStr = subStr(message, strScan(message,#delimiter,1,maxInt())+strLen(#delimiter),maxInt());
        #            commandStr = subStr(commandStr, 1, strScan(commandStr,#space,1,maxInt())-1);
        #
        #            switch(commandStr)
        #            {
        #                case #SDCommmandAdded:
        #                    command = SysVersionControlSynchronizeCommand::Add;
        #                    break;
        #
        #                case #SDCommmandUpdating:
        #                case #SDCommmandRefreshing:
        #                    command = SysVersionControlSynchronizeCommand::Update;
        #                    break;
        #
        #                case #SDCommmandDeleted:
        #                    command = SysVersionControlSynchronizeCommand::Delete;
        #                    break;
        #
        #                default:
        #                    //In case the command is something else
        #                    //skip the file
        #                    continue;
        #            }
        #
        #            retMap.insert(_filename, command);
        #        }
        #    }*/
        #
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #fileUndoCheckout
        #public container fileUndoCheckout(Filename _fileName)
        #{
        #    // Todo: Add logic later
        #    boolean reverted = false;
        #
        #    return [reverted, (reverted == true ? _fileName : '')];
        #}
      ENDSOURCE
      SOURCE #fileUnlock
        #/// <summary>
        #///    Unlocks a file.
        #/// </summary>
        #/// <param name="_filename">
        #///    The file to unlock.
        #/// </param>
        #/// <returns>
        #///    true if the file is unlocked successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    While a file is locked, other users cannot check-in changes to the file.
        #/// </remarks>
        #public boolean fileUnlock(Filename _filename)
        #{
        #    // Todo: Need updated
        #    //return this.executeCommand(#SDUnlock, _filename);
        #    return true;
        #}
      ENDSOURCE
      SOURCE #folderChanges
        #/// <summary>
        #/// Returns all change lists for a folder.
        #/// </summary>
        #/// <param name="_folder">
        #/// The folder to retrieve information for.
        #/// </param>
        #/// <returns>
        #/// The change lists.
        #/// </returns>
        #/// <remarks>
        #/// The returned table contains one record for each change list.
        #/// </remarks>
        #public SysVersionControlTmpChange folderChanges(FilePath _folder)
        #{
        #    /*
        #    COM sdResult = this.executeStructuredCommand(strFmt(#SDChanges, _folder));
        #    COM sdCommandOutputs, sdCommandOutput;
        #    COM sdVariables;
        #    int i;
        #
        #    SysVersionControlTmpChange item;
        #
        #    if (sdResult)
        #    {
        #        sdCommandOutputs = sdResult.structuredOutput();
        #        for ( i = 0; i < sdCommandOutputs.count(); i++)
        #        {
        #            sdCommandOutput  = sdCommandOutputs.item(i);
        #            sdVariables      = sdCommandOutput.variables();
        #
        #            item.clear();
        #            item.User             = this.getVar(sdVariables, #SdVarUser);
        #            item.ComputerName     = this.getVar(sdVariables, #SdVarClient);
        #            item.ChangeNumber     = str2int(this.getVar(sdVariables, #SdVarChange));
        #            [item.vcsDate,
        #            item.vcsTime]         = this.int2DateTime(str2int(this.getVar(sdVariables, #SdVarTime)));
        #            item.Comment          = this.getVar(sdVariables, #SdVarDesc);
        #            item.StatusText       = this.getVar(sdVariables, #SdVarStatus);
        #            item.insert();
        #        }
        #    }
        #    */
        #    //Todo: Need udpated
        #    SysVersionControlTmpChange item;
        #
        #    return item;
        #}
      ENDSOURCE
      SOURCE #folderSetSynchronize
        #/// <summary>
        #///    Gets the latest version of one or more folders.
        #/// </summary>
        #/// <param name="_folderSet">
        #///    A set that contains the folders to synchronize.
        #/// </param>
        #/// <param name="_syncParameters">
        #///    An instance of the <c>SysVersionControlSyncParameters</c> class that specifies the synchronization
        #///    parameters.
        #/// </param>
        #/// <returns>
        #///    A map that contians the file name and the action performed on the file for each modified file.
        #/// </returns>
        #public Map folderSetSynchronize(
        #    Set _folderSet,
        #    SysVersionControlSyncParameters _syncParameters)
        #{
        #    /*
        #    SetEnumerator folderSetEnum;
        #    str syncFolders;
        #
        #    str commandStr;
        #    str message;
        #    int i;
        #    str filename;
        #
        #    SysVersionControlSynchronizeCommand command;
        #
        #    COM sdResult;
        #    COM sdCommandOutputs;
        #    COM sdCommandOutput;
        #
        #    Map retMap = new Map(Types::String, Types::Enum);
        #
        #    if (_folderSet)
        #    {
        #        folderSetEnum = _folderSet.getEnumerator();
        #
        #        while( folderSetEnum.moveNext() )
        #        {
        #            syncFolders += strFmt(' "%1"\\...', folderSetEnum.current());
        #        }
        #
        #        sdResult = this.executeStructuredCommand(strFmt(_syncParameters.parmForce() ? #SDSyncAllForced : #SDSyncAll, syncFolders), '', false);
        #
        #        if ( sdResult)
        #        {
        #            sdCommandOutputs = sdResult.infoOutput();
        #            for ( i = 0;  i < sdCommandOutputs.count(); i++)
        #            {
        #                sdCommandOutput  = sdCommandOutputs.item(i);
        #                message    = sdCommandOutput.message();
        #                commandStr = subStr(message, strScan(message,#delimiter,1,maxInt())+strLen(#delimiter),maxInt());
        #                commandStr = subStr(commandStr, 1, strScan(commandStr,#space,1,maxInt())-1);
        #
        #                switch(commandStr)
        #                {
        #                    case #SDCommmandAdded:
        #                        command = SysVersionControlSynchronizeCommand::Add;
        #                        break;
        #
        #                    case #SDCommmandUpdating:
        #                    case #SDCommmandRefreshing:
        #                        command = SysVersionControlSynchronizeCommand::Update;
        #                        break;
        #
        #                    case #SDCommmandDeleted:
        #                        command = SysVersionControlSynchronizeCommand::Delete;
        #                        break;
        #
        #                    default:
        #                        //In case the command is something else
        #                        //skip the file
        #                        continue;
        #                }
        #
        #                filename = subStr(message, strScan(message, folder, 1, maxInt()), maxInt());
        #
        #                retMap.insert(filename, command);
        #            }
        #        }
        #
        #    }
        #    */
        #
        #    //Todo: Need updated
        #    Map retMap = new Map(Types::String, Types::Enum);
        #    return retMap;
        #}
      ENDSOURCE
      SOURCE #init
        #/// <summary>
        #/// Initializes the version control system back end.
        #/// </summary>
        #/// <param name="_parameters">
        #/// The parameters of the version control system back end.
        #/// </param>
        #/// <returns>
        #/// The connection status of the version control system back end.
        #/// </returns>
        #/// <remarks>
        #/// This method returns <c>SysVersionControlSystemStatus::WorkingOffline</c> when the back end is unavailable,
        #/// and version control in MorphX should be enabled, but limited to offline capabilities.
        #/// </remarks>
        #public SysVersionControlSystemStatus init(SysVersionControlParameters _parameters)
        #{
        #    //Todo: Need updated
        #    return SysVersionControlSystemStatus::Connected;
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #/// <summary>
        #///    Extracts parameter settings from an XML element.
        #/// </summary>
        #/// <param name="_topNode">
        #///    The <c>XmlElement</c> class that contains the parameters.
        #/// </param>
        #public void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #    // Todo: Need updated
        #    /*
        #    SysVersionControlRepositoryFolder repFolder = folder;
        #
        #    // Check that we have a VCS system.
        #    if (versioncontrol.parmSysVersionControlSystem())
        #    {
        #        branch = versioncontrol.parmSysVersionControlSystem().getXMLParameterValue(#XMLBranch, _topNode);
        #
        #        if (branch)
        #        {
        #            if (subStr(repFolder, strLen(repFolder),1) == #FilePathDelimiter)
        #            {
        #                repFolder = repFolder+branch;
        #            }
        #            else
        #            {
        #                repFolder = repFolder+#FilePathDelimiter+branch;
        #            }
        #            folder = repFolder;
        #
        #            versioncontrol.parmSysVersionControlSystem().parmFolder(folder);
        #        }
        #    }
        #    */
        #}
      ENDSOURCE
      SOURCE #requireSyncBeforeCheckOut
        #public boolean requireSyncBeforeCheckOut()
        #{
        #    // Todo: Need updated?
        #    return false;
        #}
      ENDSOURCE
      SOURCE #reviewFilenameLookupFilter
        #/// <summary>
        #///    Returns the file name filter for the lookup dialog box.
        #/// </summary>
        #/// <returns>
        #///    The file name filter for the lookup dialog box.
        #/// </returns>
        #public FilenameFilter reviewFilenameLookupFilter()
        #{
        #    //return [WinAPI::fileType(#dpk), #allfilesName + #dpk, #allFilesType, #allFiles];
        #
        #    return [WinAPI::fileType('dpk'), 'allfilesName' + 'dpk', 'allFilesType', 'allFiles'];
        #}
      ENDSOURCE
      SOURCE #reviewFileSet
        #public void reviewFileSet(
        #    Set                                 _setOfFiles,
        #    SysVersionControlItemComment        _comment,
        #    FileNameSave                        _fileNameOfReviewPackage,
        #    SysVersionControlRepositoryFolder   _folder)
        #{
        #    // Add logic later
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #    // Todo: Add logic later
        #    // this.executeCommand(#SDInfo)
        #}
      ENDSOURCE
      SOURCE #supportChangeVersion
        #/// <summary>
        #///    Implements change version functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports change version number; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports change version, MorphX will show version number both in
        #///    Pending objects and History forms.
        #/// </remarks>
        #public boolean supportChangeVersion()
        #{
        #    //Todo: Need updated
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #/// <summary>
        #///    Checks whether a check-in wizard is used by the back end.
        #/// </summary>
        #/// <returns>
        #///    true if the back end has a check-in wizard; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the back end uses a check-in wizard, MorphX will not ask for check-in comments, because they are
        #///    provided in the check-in wizard.
        #/// </remarks>
        #public boolean supportCheckInWizard()
        #{
        #    // Todo: Need updated
        #    return true;// & this.parmUseCheckInWizard();
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #/// <summary>
        #/// Supports check-out of the same file by several users at the same time.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports multiple check-outs; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end does not support multiple check-outs, MorphX will verify that a
        #/// file hasn't been checked out remotely before it tries a check-out.
        #/// </remarks>
        #public boolean supportMultipleCheckout()
        #{
        #    // Todo: Need updated
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports pending change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportPendingChangeLists()
        #{
        #    // Todo: Need updated
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #public boolean supportReviews()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #/// <summary>
        #/// Implements change list functionality.
        #/// </summary>
        #/// <returns>
        #/// true if the back end supports submitted change lists; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// If the version control back end supports change lists, it supports atomic operations on one or more files.
        #/// When supported, change list operations in MorphX will be available, and the change list methods on this interface will be invoked.
        #/// </remarks>
        #public boolean supportSubmittedChangeLists()
        #{
        #    // Todo: Need udpated
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #/// <summary>
        #///    Implements delete local files synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the back end supports delete local files synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control back end supports delete local files synchronization, MorphX will show a
        #///    delete files field in the synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    // Todo: Need update
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #/// <summary>
        #///    Implements label synchronization functionality.
        #/// </summary>
        #/// <returns>
        #///    true if the system supports label synchronization; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #///    If the version control system supports label synchronization, MorphX will show a label field in the
        #///    synchronization dialog box.
        #/// </remarks>
        #public boolean supportSyncLabel()
        #{
        #    // Todo: Need updated
        #    return false;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    // Todo: Add logic later
        #    return true;
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized instance of the <c>SysVersionControlWorkItemProvider</c> class.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    // Todo: Need updated
        #    return null;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysVersionControlFileBasedBackEndGit construct()
        #{
        #    return new SysVersionControlFileBasedBackEndGit();
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysVersionControlSystem unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysVersionControlSystem
    PROPERTIES
      Name                #SysVersionControlSystem
      RunOn               #Client
      Origin              #{2D17035C-0000-1000-6C48-E401DEFD4050}
      LegacyId            #860
    ENDPROPERTIES
    
    METHODS
      SOURCE #addModelFolder
        #/// <summary>
        #/// Adds a model to the current session.
        #/// </summary>
        #/// <param name="_model">
        #/// The specified model to add.
        #/// </param>
        #public void addModelFolder(SysVersionControlModelFile _model)
        #{
        #    if (_model)
        #    {
        #        // Only add to the modelFolders map if it doesn't exists, as these entries are added from the vcsdef.xml file.
        #        // An model entry in the vcsdef.xml file is a relative path. The folder in _model is absolute.
        #        if (!modelFolders.exists(_model.parmRelativeModelFolder()))
        #        {
        #            modelFolders.insert(_model.parmRelativeModelFolder(), ''); // Empty description
        #        }
        #
        #        models.insert(_model.parmModelId(), _model);
        #    }
        #}
      ENDSOURCE
      SOURCE #addXMLParameter
        #protected void addXMLParameter(XmlDocument _xmL, XmlNode _parentNode, str _name, str _value)
        #{
        #    XmlElement node = _xmL.createNode(XmlNodeType::Element, _name, '');
        #
        #    node.setAttribute(#XMLValue, _value);
        #    _parentNode.appendChild(node);
        #}
      ENDSOURCE
      SOURCE #aldLocationFromFolder
        #/// <summary>
        #/// Retrieves the relative path for the ald files for a given model.
        #/// </summary>
        #/// <param name="_folder">
        #/// The folder that contains the model files.
        #/// </param>
        #/// <returns>
        #/// The relative file path for the ald files.
        #/// </returns>
        #public FilePath aldLocationFromFolder(FilePath _folder)
        #{
        #    if (aldLocationsFromXML.exists(_folder))
        #    {
        #        return aldLocationsFromXML.lookup(_folder);
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #aldLocationFromModelId
        #/// <summary>
        #/// Retrieves the relative path for the ald files for a given model.
        #/// </summary>
        #/// <param name="_modelId">
        #/// The ID for the model.
        #/// </param>
        #/// <returns>
        #/// The relative file path for the ald files.
        #/// </returns>
        #public FilePath aldLocationFromModelId(modelId _modelId)
        #{
        #    if (aldLocations.exists(_modelId))
        #    {
        #        return aldLocations.lookup(_modelId);
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #allowCheckIn
        #public boolean allowCheckIn(SysVersionControllable _controllable)
        #{
        #    if (_controllable)
        #        return _controllable.allowCheckIn(settings);
        #
        #    //Allow check in of objects not in the AOT,
        #    //in order to support rename and delete
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowCheckOut
        #public boolean allowCheckOut(SysVersionControllable _controllable, boolean _checkMultipleCheckout = true)
        #{
        #    return SysVersionControlSynchronizeLog::validateFile(this.fileName(_controllable));
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(SysVersionControllable _controllable)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowDelete
        #public boolean allowDelete(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowEdit
        #public boolean allowEdit(SysVersionControllable _controllable)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #allowMoveToModel
        #/// <summary>
        #/// Evaluates whether the <c>SysVersionControllable</c> interface can be moved to a model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface.
        #/// </param>
        #/// <param name="_modelId">
        #/// The ID of the model.
        #/// </param>
        #/// <returns>
        #/// true if the move is enabled; otherwise, false.
        #/// </returns>
        #public boolean allowMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    if (this.supportModels())
        #    {
        #        return true;
        #    }
        #    else
        #    {
        #        error("@SYS327408");
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowRename
        #public boolean allowRename(SysVersionControllable _controllable, boolean _justInTime = false)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #applyGlobalSettings
        #/// <summary>
        #/// Applies the definition file into the version control system.
        #/// </summary>
        #/// <returns>
        #/// true if the definition file is applied successfully; otherwise, false.
        #/// </returns>
        #public boolean applyGlobalSettings()
        #{
        #    XmlDocument                     xml;
        #    XmlElement                      topNode;
        #    int                             line = infologLine();
        #    SysVersionControlDefFile        defFile;
        #    Filename                        defFileName;
        #    SysVersionControlTmpItem        defFileHistory;
        #    TextBuffer                      textBuffer;
        #    XmlDocument                     xmlDoc;
        #    SysVersionControlSyncParameters syncParm;
        #    #WinApi
        #
        #    //
        #    // Construct definition file
        #    //
        #    defFile = SysVersionControlDefFile::newVCSDefFile();
        #    defFileName = this.fileName(defFile);
        #
        #    //
        #    // If a local file exist, it may not be from the server
        #    //
        #    if (WinAPI::fileExists(defFileName))
        #    {
        #        //
        #        // Does the file exist on the server?
        #        //
        #        defFileHistory = this.getItemHistory(defFile);
        #        infolog.clear(line);
        #        select firstonly defFileHistory;
        #
        #        if (!defFileHistory)
        #        {
        #            //
        #            // The local file does not exist on the server -> add it!
        #            //
        #            textBuffer = new TextBuffer();
        #            textBuffer.fromFile(defFileName);
        #            xmlDoc = XmlDocument::newXml(textBuffer.getText());
        #            defFile.parmXML(xmlDoc);
        #            WinAPI::setFileAttributes(defFileName, #FILE_ATTRIBUTE_ARCHIVE);
        #            WinAPI::deleteFile(defFileName);
        #
        #            info(strFmt("@SYS18625", defFileName));
        #            this.commandAdd(defFile);
        #        }
        #    }
        #    else
        #    {
        #        //
        #        // In case the file is in the VCS but not locally, force sync it
        #        //
        #        syncParm = SysVersionControlSyncParameters::construct();
        #        syncParm.parmSilent(true);
        #        syncParm.parmForce(true);
        #
        #        this.commandSynchronize(defFile, syncParm);
        #        infolog.clear(line);
        #    }
        #
        #    //
        #    // Add definition file to repository if it does not exists
        #    //
        #    if (!WinAPI::fileExists(defFileName))
        #    {
        #        this.createDefinitionFile(defFile);
        #        this.commandAdd(defFile);
        #    }
        #    else
        #    {
        #        //
        #        // Get lastest def file, if it is not checked out
        #        //
        #        if (!this.allowEdit(defFile))
        #        {
        #            this.getLatestDefFile();
        #        }
        #    }
        #
        #    //
        #    // Apply the definition file to the version control system.
        #    //
        #    try
        #    {
        #        xml         = XmlDocument::newFile(defFileName);
        #        topNode     = xml.documentElement();
        #
        #        this.interpretXMLParameters(topNode);
        #    }
        #    catch
        #    {
        #
        #        warning(strFmt("@SYS19312", defFileName));
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canImport
        #/// <summary>
        #///    Validates whether the file can be imported without conflicting with an existing ID of the same
        #///    object type.
        #/// </summary>
        #/// <param name="controllable">
        #///    The instance of <c>SysVersionControllable</c> class.
        #/// </param>
        #/// <param name="filename">
        #///    The name of the file to validate.
        #/// </param>
        #/// <returns>
        #///    true if no conflict with an existing ID was found or  the object does not contain an ID; otherwise,
        #///    false.
        #/// </returns>
        #/// <remarks>
        #///    The validation is checking for one object only in the file. If the file contains more than one
        #///    object, the method will throw an exception. If the file does not exist, an error will added to the
        #///    Infolog. If the file conflicts with an existing ID, an error will be added to the Infolog. The
        #///    method does not import the file.
        #/// </remarks>
        #/// <exception cref="M:Exception::Error">
        #///    The file contains more than one object.
        #/// </exception>
        #public boolean canImport(SysVersionControllable controllable, Filename filename)
        #{
        #    SysImportElements       checkIDImportElement;
        #    TmpAotImport            tmpImportAot;
        #    TmpAotImport            checkNoOfObjects;
        #    UtilIdElements          element;
        #
        #    if (!WinAPI::fileExists(filename))
        #    {
        #        error(strFmt("@SYS18678", filename));
        #        return false;
        #    }
        #
        #    // VSItems cannot conflict with other controllables.
        #    if ((controllable is SysTreeNodeVirtualVSItemDeleted) ||
        #        (controllable is SysTreeNodeVSItem))
        #    {
        #        return true;
        #    }
        #
        #    checkIDImportElement = new SysImportElements();
        #
        #    // Set the filename.
        #    checkIDImportElement.newFile(filename);
        #
        #    // Get info from the file
        #    tmpImportAot = checkIDImportElement.getTmpImportAot();
        #
        #    // Check that the file only contains one object
        #    checkNoOfObjects.setTmpData(tmpImportAot);
        #    select count (RecId) from checkNoOfObjects;
        #    if (checkNoOfObjects.RecId > 1)
        #    {
        #        throw error("@SYS112907");
        #    }
        #
        #    // Does the file contain ID
        #    if (tmpImportAot.UtilElementId)
        #    {
        #        // Get name of possible existing object name
        #        select firstonly Name from element where element.Id == tmpImportAot.UtilElementId
        #                                              && element.ParentId == 0
        #                                              && element.RecordType == tmpImportAot.UtilElementType;
        #
        #        // Check if the ID is already used in the AOD with a different name
        #        if (element.Name && element.Name != tmpImportAot.TreeNodeName)
        #        {
        #            error(strFmtLB(strFmt("@SYS112908",
        #                tmpImportAot.UtilElementId,
        #                tmpImportAot.UtilElementType,
        #                element.Name,
        #                tmpImportAot.TreeNodePath)));
        #
        #            return false;
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkInChangelist
        #public void checkInChangelist(
        #    SysVersionControlTmpItem _items,
        #    SysVersionControlItemComment _comment = '',
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public abstract class SysVersionControlSystem
        #{
        #    #AOTExport
        #    #file
        #    #Properties
        #    #SysVersionControl
        #
        #    SysVersionControlRepositoryFolder   folder;
        #    SysVersionControlProject            project;
        #    SysVersionControlTestProject        testProject;
        #
        #    SysVersionControlSettings settings;
        #
        #    Set     unwantedObjectTypes;
        #    Set     unwantedObjectNames;
        #
        #    Map     additionalFolders;
        #    Map     modelFolders;
        #    Map     models;
        #    Map     aldLocations;
        #    Map     aldLocationsFromXML;
        #
        #    boolean aotColoring;
        #    boolean warnWhenReverting;
        #}
      ENDSOURCE
      SOURCE #commandAdd
        #public boolean commandAdd(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandCheckIn
        #public void commandCheckIn(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #}
      ENDSOURCE
      SOURCE #commandCheckOut
        #public boolean commandCheckOut(SysVersionControllable _controllable, SysVersionControlItemComment _comment = '')
        #{
        #    return _controllable != null;
        #}
      ENDSOURCE
      SOURCE #commandDelete
        #public boolean commandDelete(SysVersionControllable _controllable)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandMoveToModel
        #/// <summary>
        #/// Moves the <c>SysVersionControllable</c> interface to the model.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface to move.
        #/// </param>
        #/// <param name="_modelId">
        #/// The model that the <c>SysVersionControllable</c> interface is moved to.
        #/// </param>
        #/// <returns>
        #/// true if the move was successful; otherwise, false.
        #/// </returns>
        #public boolean commandMoveToModel(SysVersionControllable _controllable, int _modelId)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandOnAfterRename
        #/// <summary>
        #/// Invokes VCS rename on an AOT item.This method is called when the tree node and corresponding file
        #/// have been already renamed.
        #/// </summary>
        #/// <param name="oldControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the old node.
        #/// </param>
        #/// <param name="newControllable">
        #/// The instance of the <c>SysVersionControllable</c> class that refers to the new renamed node.
        #/// </param>
        #/// <returns>
        #/// true if the renaming is successful; otherwise, false.
        #/// </returns>
        #public boolean commandOnAfterRename(SysVersionControllable oldControllable, SysVersionControllable newControllable)
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #commandRename
        #public boolean commandRename(SysVersionControllable _controllable, identifierName _oldName)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSave
        #public boolean commandSave(SysVersionControllable _controllable)
        #{
        #    Filename filename;
        #    SysTreeNodeContainer treeNodeContainer = _controllable as SysTreeNodeContainer;
        #    if (treeNodeContainer != null)
        #    {
        #        treeNodeContainer.parmTreeNodeContainerDispatcher().save();
        #        return true;
        #    }
        #
        #    filename = this.fileName(_controllable);
        #
        #    if (!this.allowCreate(_controllable))
        #    {
        #        // Skip save operation during XPO import/Synchronization
        #        if (!versioncontrol.parmIsSynchronizing())
        #        {
        #            if (SysVersionControlSynchronizeLog::validateFile(filename))
        #            {
        #                if (!_controllable.toFile(filename, true))
        #                {
        #                    throw error(strFmt("@SYS26666", filename));
        #                }
        #            }
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandShowHistory
        #public void commandShowHistory(SysVersionControllable _controllable)
        #{
        #    versioncontrol.parmUserInterfaceProvider().showHistory(_controllable);
        #}
      ENDSOURCE
      SOURCE #commandSynchronize
        #//
        #// Returns true if the controllable already was up-to-date
        #//
        #public boolean commandSynchronize(
        #    SysVersionControllable          _controllable,
        #    SysVersionControlSyncParameters _syncParm
        #    )
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #commandSynchronizeAndCheckout
        #public boolean commandSynchronizeAndCheckout(SysVersionControllable _controllable)
        #{
        #    boolean synced;
        #    SysVersionControlSyncParameters syncParm = SysVersionControlSyncParameters::construct();
        #
        #    syncParm.parmSilent(true);
        #    syncParm.parmForce(true);
        #    do
        #    {
        #        //
        #        // Sync can take a few minutes (for label files)
        #        // Keep sync'ing as long as others change the file while this client is sync'ing.
        #        // The first sync uses force (for label files)
        #        //
        #        synced = this.commandSynchronize(_controllable, syncParm);
        #        syncParm.parmForce(false);
        #    }
        #    while (!synced);
        #
        #    //
        #    // In reality the file could be changed elsewhere
        #    // after exiting the loop above and before doing the checkout.
        #    //
        #
        #    return this.commandCheckOut(_controllable);
        #}
      ENDSOURCE
      SOURCE #commandUndoCheckOut
        #public boolean commandUndoCheckOut(
        #    SysVersionControllable                   _controllable,
        #    boolean                                  _showDialog = false,
        #    SysVersionControlSynchronizeBatchNum     _batchNum = SysVersionControlSynchronizeLog::nextBatchNum()
        #    )
        #{
        #    return _controllable != null;
        #}
      ENDSOURCE
      SOURCE #createDefinitionFile
        #public XmlDocument createDefinitionFile(SysVersionControlDefFile _defFile)
        #{
        #    #define.DefFileTreenodePath('\\Resources\\SysVersionControlSystemMorphXDefFile')
        #
        #    XmlDocument     xmlDoc;
        #    XML             xml;
        #    XmlElement      topNode;
        #    FilePath        path;
        #    Filename        name;
        #    resourceNode    resourceNode = TreeNode::findNode(#DefFileTreenodePath);
        #
        #    [path, name] = fileNameSplit(this.fileName(_defFile));
        #    if (!WinAPI::folderExists(path))
        #    {
        #        WinAPI::createDirectoryPath(path);
        #    }
        #
        #    [xml] = SysResource::getResourceNodeData(resourceNode);
        #    xmlDoc = XmlDocument::newXml(xml);
        #    topNode = xmlDoc.documentElement();
        #
        #    return _defFile.parmXML(xmlDoc);
        #}
      ENDSOURCE
      SOURCE #createModelsMap
        #private void createModelsMap()
        #{
        #    MapEnumerator mapEnumerator;
        #    Filename modelFile;
        #    FilePath modelFilePath;
        #    FilePath modelFolder;
        #    SysVersionControlModelFile controllableModelFile;
        #    SysVersionControlSyncParameters syncParm;
        #    int line;
        #    boolean fileExists;
        #
        #    mapEnumerator = modelFolders.getEnumerator();
        #    models = new Map(Types::Integer, Types::Class);
        #    aldLocations = new Map(Types::Integer, Types::String);
        #
        #    // Iterate the folders
        #    while (mapEnumerator.moveNext())
        #    {
        #        modelFolder = mapEnumerator.currentKey();
        #        modelFilePath = strFmt(@'%1\%2', this.parmFolder(), modelFolder);
        #        modelFile = strFmt(@'%1\%2', modelFilePath, #ModelFileNameWithExtension);
        #
        #        fileExists = System.IO.File::Exists(modelFile);
        #
        #        // Read the model.xml file in each folder
        #        if (!fileExists)
        #        {
        #            // In case the file is in the VCS but not locally, force sync it
        #            line = infologLine();
        #
        #            syncParm = SysVersionControlSyncParameters::construct();
        #            syncParm.parmSilent(true);
        #            syncParm.parmForce(true);
        #
        #            controllableModelFile = SysVersionControlModelFile::construct();
        #            controllableModelFile.parmModelFolder(modelFile);
        #
        #            this.commandSynchronize(controllableModelFile, syncParm);
        #
        #            infolog.clear(line);
        #
        #            fileExists = System.IO.File::Exists(modelFile);
        #
        #            // Give warning if it still does not exists after a sync.
        #            if (!fileExists)
        #            {
        #                warning(strFmt("@SYS327410", modelFilePath));
        #            }
        #        }
        #
        #        if (fileExists)
        #        {
        #            controllableModelFile = SysVersionControlModelFile::construct();
        #            controllableModelFile.fromFile(modelFile);
        #            this.addModelFolder(controllableModelFile);
        #
        #            if (aldLocationsFromXML.exists(modelFolder))
        #            {
        #                aldLocations.insert(controllableModelFile.parmModelId(), aldLocationsFromXML.lookup(modelFolder));
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #createRepositoryEnd
        #public void createRepositoryEnd(SysVersionControlItemComment _comment)
        #{
        #}
      ENDSOURCE
      SOURCE #description
        #public ClassDescription description()
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #editDefFile
        #public boolean editDefFile(XmlDocument xml)
        #{
        #    SysVersionControlDefFile configFile;
        #    boolean                  ret = true;
        #    SysVersionControlSyncParameters syncParm;
        #
        #    configFile = SysVersionControlDefFile::newVCSDefFile();
        #    configFile.parmXML(xml);
        #
        #    try
        #    {
        #        //
        #        // In case the file is in the VCS but not locally, sync it
        #        //
        #        if (!WinAPI::fileExists(this.fileName(configFile)))
        #        {
        #            syncParm = SysVersionControlSyncParameters::construct();
        #            syncParm.parmSilent(true);
        #            this.commandSynchronize(configFile, syncParm);
        #        }
        #
        #        if (WinAPI::fileExists(this.fileName(configFile)))
        #        {
        #            //
        #            // Check the definition file out.
        #            //
        #
        #            if (!this.allowEdit(configFile))
        #            {
        #                if (!this.commandSynchronizeAndCheckout(configFile))
        #                {
        #                    throw error(strFmt("@SYS94398",this.fileName(configFile)));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            //
        #            // Add the definition file to version control.
        #            //
        #
        #            if (!this.allowCreate(configFile) || !this.commandAdd(configFile))
        #            {
        #                throw error(strFmt("@SYS94397",this.fileName(configFile)));
        #            }
        #        }
        #
        #        ret = configFile.toFile(this.fileName(configFile), true);
        #    }
        #    catch
        #    {
        #        throw error(strFmt("@SYS94396",this.fileName(configFile)));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fileName
        #/// <summary>
        #/// Gets the file name for the <c>SysVersionControllable</c> interface.
        #/// </summary>
        #/// <param name="_controllable">
        #/// The <c>SysVersionControllable</c> interface of which to get the file name.
        #/// </param>
        #/// <param name="_currentLayer">
        #/// Use the current layer; optional.
        #/// </param>
        #/// <param name="_promptForFolder">
        #/// A Boolean value that indicates whether a prompt for folder must be performed; optional.
        #/// </param>
        #/// <returns>
        #/// The file name for the <c>SysVersionControllable</c> interface.
        #/// </returns>
        #public Filename fileName(
        #    SysVersionControllable _controllable,
        #    boolean                _currentLayer = true,
        #    boolean                _promptForFolder = false)
        #{
        #    Filename filename    = _controllable.versionControlFilePath(_currentLayer)+_controllable.fileExtension();
        #
        #    return strFmt('%1\\%2', folder, filename);
        #}
      ENDSOURCE
      SOURCE #getActionText
        #/// <summary>
        #/// Gets the action text for the controllable item.
        #/// </summary>
        #/// <param name="controllable">
        #/// The instance of the controllable item.
        #/// </param>
        #/// <returns>
        #/// The value from <c>SysVersionControlItemStatus</c> that represents the checked-out action of the
        #/// controllable item.
        #/// </returns>
        #public SysVersionControlItemStatus getActionText(SysVersionControllable controllable)
        #{
        #    return SysVersionControlItemStatus::Uncontrolled;
        #}
      ENDSOURCE
      SOURCE #getCheckedOutItems
        #public SysVersionControlTmpItem getCheckedOutItems()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getControllable
        #public SysVersionControllable getControllable(
        #    SysVersionControlItemPath _itemPath,
        #    Filename                  _filename)
        #{
        #    return SysVersionControlTmpItem::newControllable(_itemPath, _filename);
        #}
      ENDSOURCE
      SOURCE #getItemHistory
        #public SysVersionControlTmpItem getItemHistory(SysVersionControllable _controllable)
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getItemVersion
        #public Filename getItemVersion(SysVersionControllable _controllable, SysVersionControlTmpItem _version)
        #{
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getLatestDefFile
        #protected boolean getLatestDefFile()
        #{
        #    SysVersionControlDefFile        defFile;
        #    SysVersionControlSyncParameters syncParm;
        #
        #    defFile = SysVersionControlDefFile::newVCSDefFile();
        #
        #    try
        #    {
        #        syncParm = SysVersionControlSyncParameters::construct();
        #        syncParm.parmForce(true);
        #        syncParm.parmSilent(true);
        #        this.commandSynchronize(defFile, syncParm);
        #    }
        #    catch
        #    {
        #        error("@SYS94408");
        #        return false;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #getModelFolder
        #/// <summary>
        #/// Gets the folder for the model.
        #/// </summary>
        #/// <param name="_modelId">
        #/// The specified model ID of which to get the folder.
        #/// </param>
        #/// <returns>
        #/// A file path of a folder if found; otherwise, an empty string.
        #/// </returns>
        #public FilePath getModelFolder(modelId _modelId)
        #{
        #    SysVersionControlModelFile modelFile;
        #
        #    if (models.exists(_modelId))
        #    {
        #        modelFile = models.lookup(_modelId);
        #        return modelFile.parmModelFolder();
        #    }
        #
        #    //It is a system generated model, fall back to ax 2009 behavior.
        #    if (_modelId <= enumCnt(UtilEntryLevel))
        #    {
        #        return strFmt("%1\\%2", folder, enum2Symbol(enumNum(UtilEntryLevel), _modelId - 1));
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getModelFromFile
        #/// <summary>
        #/// Gets the model ID for the specified file name.
        #/// </summary>
        #/// <param name="_filename">
        #/// A file name.
        #/// </param>
        #/// <returns>
        #/// The ID of the model.
        #/// </returns>
        #/// <remarks>
        #/// <c>#ModelId_Undefined</c> is returned if no model is found.
        #/// </remarks>
        #public modelId getModelFromFile(Filename _filename)
        #{
        #    MapEnumerator modelsEnumerator;
        #    SysVersionControlModelFile modelFile;
        #    #File
        #    #SysModelStore
        #
        #    modelsEnumerator = models.getEnumerator();
        #    while (modelsEnumerator.moveNext())
        #    {
        #        modelFile = modelsEnumerator.currentValue();
        #
        #        if (strStartsWith(_filename, modelFile.parmModelFolder()+#FilePathDelimiter))
        #        {
        #            return modelFile.parmModelId();
        #        }
        #    }
        #
        #    return #ModelId_Undefined;
        #}
      ENDSOURCE
      SOURCE #getXMLParameterValue
        #public str getXMLParameterValue(str _name, XmlElement _topNode)
        #{
        #    XmlElement typeNode = _topNode.selectSingleNode(_name);
        #
        #    if (typeNode)
        #        return typeNode.getAttribute(#XMLValue);
        #    return '';
        #}
      ENDSOURCE
      SOURCE #ideIntegration
        #public boolean ideIntegration()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #importLocalItems
        #public void importLocalItems(SysVersionControlTmpItem _pendingItems)
        #{
        #}
      ENDSOURCE
      SOURCE #init
        #public boolean init(SysVersionControlParameters _parameters)
        #{
        #    boolean ret = true;
        #
        #    //init parameters
        #    if(_parameters.RepositoryFolder)
        #    {
        #        this.parmFolder(_parameters.getTargetRepositoryFolder());
        #
        #        if (!WinAPI::folderExists(folder))
        #        {
        #            ret = checkFailed(strFmt("@SYS72247", folder));
        #        }
        #    }
        #    else
        #    {
        #        ret = checkFailed("@SYS120742");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #interpretXMLParameters
        #protected void interpretXMLParameters(XmlElement _topNode)
        #{
        #    XmlElement bestPractice;
        #    XmlElement label;
        #    XmlElement unwObjectTypes;
        #    XmlElement unwObjectType;
        #    XmlElement unwObjectNames;
        #    XmlElement unwObjectName;
        #
        #    XmlElement foldersNode;
        #    XmlElement folderNode;
        #    XmlElement modelsNode;
        #    XmlElement modelNode;
        #
        #    XmlElement pluginSettings;
        #    SysDictEnum typesEnum   = new SysDictEnum(enumNum(UtilElementType));
        #    str unwantedTypeName;
        #    int unwantedTypeValue;
        #    SysLabelInterval sysLabelInterval;
        #
        #    project                  = this.getXMLParameterValue(#XMLProject, _topNode);
        #
        #    bestPractice             = _topNode.selectSingleNode(#XMLBestPractice);
        #    settings.parmGateCompileErrors(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLCompileErrors, bestPractice)));
        #    settings.parmGateCompileWarnings(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLCompileWarnings, bestPractice)));
        #    settings.parmGateCompileToDos(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLCompileToDos, bestPractice)));
        #    settings.parmGateBestPracticeErrors(SysVersionControlSystem::xml2GateSetting(this.getXMLParameterValue(#XMLBPErrors, bestPractice)));
        #    settings.parmRunTitleCaseUpdate(#PropertyValueYes == this.getXMLParameterValue(#XMLTitleCaseUpdate, bestPractice));
        #    testProject              = this.getXMLParameterValue(#XMLCheckInTestProject, bestPractice);
        #
        #    label = _topNode.selectSingleNode(#XMLLabel);
        #    if (label)
        #    {
        #        settings.parmDefaultLabelFile(this.getXMLParameterValue(#XMLLabelDefault, label));
        #        settings.parmLabelIntervalMin(str2int(this.getXMLParameterValue(#XMLLabelIntervalMin, label)));
        #        settings.parmLabelIntervalMax(str2int(this.getXMLParameterValue(#XMLLabelIntervalMax, label)));
        #
        #        if (settings.parmDefaultLabelFile())
        #        {
        #            delete_from sysLabelInterval;
        #
        #            if (settings.parmLabelIntervalMin() &&
        #                settings.parmLabelIntervalMax())
        #            {
        #                sysLabelInterval.LabelModuleId = settings.parmDefaultLabelFile();
        #                sysLabelInterval.LabelIntervalFrom = settings.parmLabelIntervalMin();
        #                sysLabelInterval.LabelIntervalTo = settings.parmLabelIntervalMax();
        #                sysLabelInterval.LabelIntervalStatus = LabelIntervalStatus::Free;
        #
        #                if (sysLabelInterval.validateWrite())
        #                {
        #                    sysLabelInterval.insert();
        #                }
        #            }
        #        }
        #    }
        #
        #    unwantedObjectTypes = new Set(Types::Enum);
        #    unwObjectTypes = _topNode.selectSingleNode(#XMLUnwantedObjectTypes);
        #    if (unwObjectTypes)
        #    {
        #        unwObjectType = unwObjectTypes.firstChild();
        #        while (unwObjectType)
        #        {
        #            unwantedTypeName = unwObjectType.getAttribute(#XMLValue);
        #            unwantedTypeValue = typesEnum.name2Value(unwantedTypeName);
        #            if(unwantedTypeValue < 250 )
        #            {
        #                unwantedObjectTypes.add(unwantedTypeValue);
        #            }
        #            else
        #            {
        #                warning(strFmt("@SYS94402",unwantedTypeName));
        #            }
        #            unwObjectType = unwObjectType.nextSibling();
        #        }
        #    }
        #
        #    unwantedObjectNames = new Set(Types::String);
        #    unwObjectNames = _topNode.selectSingleNode(#XMLUnwantedObjectNames);
        #    if (unwObjectNames)
        #    {
        #        unwObjectName = unwObjectNames.firstChild();
        #        while (unwObjectName)
        #        {
        #            unwantedObjectNames.add(unwObjectName.getAttribute(#XMLValue));
        #            unwObjectName = unwObjectName.nextSibling();
        #        }
        #    }
        #
        #    // ModelFolders
        #    modelFolders = new Map(Types::String, Types::String);
        #    modelsNode = _topNode.selectSingleNode(#XMLModels);
        #
        #    if (modelsNode)
        #    {
        #        modelNode = modelsNode.firstChild();
        #        while (modelNode)
        #        {
        #            modelFolders.insert(modelNode.getAttribute(#XMLModelFolder), modelNode.getAttribute(#XMLDescription));
        #
        #            if (modelNode.hasAttribute(#XMLModelAldLocation))
        #            {
        #                aldLocationsFromXML.insert(modelNode.getAttribute(#XMLModelFolder), modelNode.getAttribute(#XMLModelAldLocation));
        #            }
        #            modelNode = modelNode.nextSibling();
        #        }
        #    }
        #
        #    // Additional folders.
        #    additionalFolders = new Map(Types::String, Types::String);
        #    additionalFolders.insert(strFmt('%1', currentAOLayer()), "@SYS85919");
        #
        #    foldersNode = _topNode.selectSingleNode(#XMLAdditionalFolders);
        #    if (foldersNode)
        #    {
        #        folderNode = foldersNode.firstChild();
        #        while (folderNode)
        #        {
        #            additionalFolders.insert(folderNode.getAttribute(#XMLValue), folderNode.getAttribute(#XMLDescription));
        #            folderNode = folderNode.nextSibling();
        #        }
        #    }
        #
        #    pluginSettings = _topNode.selectSingleNode(#XMLPluginSettings);
        #    this.interpretXMLPluginParameters(pluginSettings);
        #
        #    this.createModelsMap();
        #}
      ENDSOURCE
      SOURCE #interpretXMLPluginParameters
        #protected void interpretXMLPluginParameters(XmlElement _topNode)
        #{
        #}
      ENDSOURCE
      SOURCE #isTmpItemOpenedForDelete
        #/// <summary>
        #/// Checks whether a version control object is opened for delete.
        #/// </summary>
        #/// <param name="_sysVersionControlTmpItem">
        #/// A temporary <c>SysVersionControlTmpItem</c> buffer to check.
        #/// </param>
        #/// <returns>
        #/// true if the version control object is opened for delete; otherwise, false.
        #/// </returns>
        #public abstract boolean isTmpItemOpenedForDelete(SysVersionControlTmpItem _sysVersionControlTmpItem)
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    settings = SysVersionControlSettings::construct();
        #    unwantedObjectTypes = new Set(Types::Enum);
        #    unwantedObjectNames = new Set(Types::String);
        #    additionalFolders = new Map(Types::String, Types::String);
        #    modelFolders = new Map(Types::String, Types::String);
        #    models = new Map(Types::Integer, Types::Class);
        #    aldLocationsFromXML = new Map(Types::String, Types::String);  //model folder, aldLocation
        #}
      ENDSOURCE
      SOURCE #parmAdditionalFolders
        #public Map parmAdditionalFolders(Map _additionalFolders = additionalFolders)
        #{
        #    additionalFolders = _additionalFolders;
        #
        #    return additionalFolders;
        #}
      ENDSOURCE
      SOURCE #parmAOTColoring
        #public boolean parmAOTColoring (boolean _aotColoring = aotColoring)
        #{
        #    aotColoring = _aotColoring;
        #    return aotColoring;
        #}
      ENDSOURCE
      SOURCE #parmFolder
        #public FilePath parmFolder(FilePath _folder = folder)
        #{
        #    folder = _folder;
        #
        #    return folder;
        #}
        #
      ENDSOURCE
      SOURCE #parmModelFolders
        #public Map parmModelFolders(Map _modelFolders = modelFolders)
        #{
        #    modelFolders = _modelFolders;
        #
        #    return modelFolders;
        #}
        #
      ENDSOURCE
      SOURCE #parmModels
        #public Map parmModels(Map _models = models)
        #{
        #    models = _models;
        #
        #    return models;
        #}
        #
      ENDSOURCE
      SOURCE #parmProject
        #public SysVersionControlProject parmProject(SysVersionControlProject _project = project)
        #{
        #    project = _project;
        #
        #    return project;
        #}
        #
      ENDSOURCE
      SOURCE #parmSettings
        #public SysVersionControlSettings parmSettings(SysVersionControlSettings _settings = settings)
        #{
        #    settings = _settings;
        #
        #    return settings;
        #}
        #
      ENDSOURCE
      SOURCE #parmTestProject
        #public SysVersionControlTestProject parmTestProject(SysVersionControlTestProject _testProject = testProject)
        #{
        #    testProject = _testProject;
        #
        #    return testProject;
        #}
        #
      ENDSOURCE
      SOURCE #parmUnwantedObjectNames
        #public Set parmUnwantedObjectNames()
        #{
        #    return unwantedObjectNames;
        #}
      ENDSOURCE
      SOURCE #parmUnwantedObjectTypes
        #public Set parmUnwantedObjectTypes()
        #{
        #    return unwantedObjectTypes;
        #}
      ENDSOURCE
      SOURCE #parmWarnWhenReverting
        #public boolean parmWarnWhenReverting (boolean _warnWhenReverting = warnWhenReverting)
        #{
        #    warnWhenReverting = _warnWhenReverting;
        #    return warnWhenReverting;
        #}
      ENDSOURCE
      SOURCE #preCheckInUpdate
        #protected boolean preCheckInUpdate(Filename _filename, SysVersionControllable _controllable)
        #{
        #    return _controllable.preCheckInUpdate(_filename, settings);
        #}
      ENDSOURCE
      SOURCE #promptCheckin
        #protected boolean promptCheckin(SysVersionControlTmpItem _itemsToCheckIn)
        #{
        #    SysVersionControlTmpItem itemsCheckedOut = this.getCheckedOutItems();
        #
        #    return versioncontrol.parmUserInterfaceProvider().promptCheckin(_itemsToCheckIn, itemsCheckedOut);
        #}
      ENDSOURCE
      SOURCE #removeModelFolder
        #/// <summary>
        #/// Removes the model from the current session.
        #/// </summary>
        #/// <param name="_model">
        #/// The specified model.
        #/// </param>
        #public void removeModelFolder(SysVersionControlModelFile _model)
        #{
        #    if (_model)
        #    {
        #        if (modelFolders.exists(_model.parmRelativeModelFolder()))
        #        {
        #            modelFolders.remove(_model.parmRelativeModelFolder());
        #        }
        #
        #        models.remove(_model.parmModelId());
        #    }
        #}
      ENDSOURCE
      SOURCE #requireTeamServer
        #protected boolean requireTeamServer()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #runTestProject
        #protected boolean runTestProject()
        #{
        #    boolean                     ret = true;
        #    SysTestProject              sysTestProject;
        #    SysTestRunnerProject        runner;
        #    Query                       query;
        #    SysInfoAction_FormrunQuery  infoAction;
        #    SysTestJobId                sysTestJobId;
        #    SysTestListenerDB           listener;
        #    #Aot
        #
        #    if (testProject)
        #    {
        #        sysTestProject = SysTestProject::construct(testProject, ProjectSharedPrivate::ProjShared);
        #
        #        if (sysTestProject)
        #        {
        #            runner = new SysTestRunnerProject(sysTestProject);
        #            listener = new SysTestListenerDB();
        #            runner.getResult().addListener(listener);
        #
        #            runner.run();
        #
        #            if (runner.getResult().getFailureCount() == 0)
        #            {
        #                ret = true;
        #            }
        #            else
        #            {
        #                sysTestJobId = listener.parmJobId();
        #                query = new Query();
        #                query.addDataSource(tableNum(SysTestJobTable)).addRange(fieldNum(SysTestJobTable, TestJobId)).value(queryValue(sysTestJobId)) ;
        #
        #                infoAction = SysInfoAction_FormrunQuery::newFormnameQuery(formStr(SysTestJobTable), query);
        #                throw error("@SYS87671", '', infoAction);
        #            }
        #        }
        #        else
        #        {
        #            throw error(strFmt("@SYS87274", #ProjectSharedPath, testProject));
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #}
      ENDSOURCE
      SOURCE #showStatusLine
        #public boolean showStatusLine()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportAdditionalFolders
        #public boolean supportAdditionalFolders()
        #{
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #supportChangeVersion
        #public boolean supportChangeVersion()
        #{
        #    //version is fundamental for compare so set true as default value and let underlying vcs override
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportCheckInWizard
        #public boolean supportCheckInWizard()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportImportOfPendingElements
        #public boolean supportImportOfPendingElements()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportModels
        #public boolean supportModels()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportMultipleCheckout
        #public boolean supportMultipleCheckout()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportPendingChangeLists
        #public boolean supportPendingChangeLists()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportReviews
        #public boolean supportReviews()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSubmittedChangeLists
        #public boolean supportSubmittedChangeLists()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSyncDeleteLocalFiles
        #public boolean supportSyncDeleteLocalFiles()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #supportSynchronization
        #public boolean supportSynchronization()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #supportSyncLabel
        #public boolean supportSyncLabel()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #validateGlobalSettings
        #/// <summary>
        #/// Validates the definition file.
        #/// </summary>
        #/// <returns>
        #/// true if the definition file is valid; otherwise, false.
        #/// </returns>
        #public boolean validateGlobalSettings()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #verifyOwnerPrefix
        #/// <summary>
        #/// Checks whether the element name contains valid owner prefix.
        #/// </summary>
        #/// <param name="elementName">
        #/// The name of the element.
        #/// </param>
        #/// <returns>
        #/// true if the element name contains valid owner prefix; otherwise, false
        #/// </returns>
        #public boolean verifyOwnerPrefix(str elementName)
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #workItemProvider
        #/// <summary>
        #/// Gets a work item provider that can be used to associate work items with a check-in.
        #/// </summary>
        #/// <returns>
        #/// An initialized <c>SysVersionControlWorkItemProvider</c> object.
        #/// </returns>
        #public SysVersionControlWorkItemProvider workItemProvider()
        #{
        #    return null;
        #}
      ENDSOURCE
      SOURCE #gateSetting2Xml
        #/// <summary>
        #/// Converts a <c>SysVersionControlGateSetting</c> enumeration value to an XML string.
        #/// </summary>
        #/// <param name="_gateSetting">
        #/// The <c>SysVersionControlGateSetting</c> enumeration value.
        #/// </param>
        #/// <returns>
        #/// The xml string.
        #/// </returns>
        #public static XML gateSetting2Xml(SysVersionControlGateSetting _gateSetting)
        #{
        #    XML ret;
        #
        #    switch (_gateSetting)
        #    {
        #        case SysVersionControlGateSetting::Accept:
        #            ret = #PropertyValueYes;
        #            break;
        #
        #        case SysVersionControlGateSetting::Reject:
        #            ret = #PropertyValueNo;
        #            break;
        #
        #        case SysVersionControlGateSetting::Prompt:
        #            ret = #XmlPrompt;
        #            break;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newType
        #public static SysVersionControlSystem newType(SysVersionControlType _type)
        #{
        #    switch (_type)
        #    {
        #        case SysVersionControlType::SysVersionControlSourceDepot:
        #            return SysVersionControlSystemFileBased::newBackEnd(SysVersionControlFileBasedBackEndSD::construct());
        #
        #        case SysVersionControlType::SysVersionControlSourceSafe:
        #            return SysVersionControlSystemFileBased::newBackEnd(SysVersionControlFileBasedBackEndVSS::construct());
        #
        #        case SysVersionControlType::SysVersionControlMorphX:
        #            return SysVersionControlSystemMorphX::construct();
        #
        #        case SysVersionControlType::SysVersionControlTfs:
        #            return SysVersionControlSystemFileBased::newBackEnd(SysVersionControlFilebasedBackEndTfs::construct());
        #
        #        // HM_Version Control Testing, added by Daniel at 1/13/2017
        #        case SysVersionControlType::SysVersionControlGit:
        #            return SysVersionControlSystemFileBased::newBackEnd(SysVersionControlFileBasedBackEndGit::construct());
        #    }
        #    return null;
        #}
        #
      ENDSOURCE
      SOURCE #path2Image
        #public static ImageRes path2Image(TreeNodePath _path)
        #{
        ##ResAppl
        ##AOT
        ##define.LabelPath('\\labels\\')
        #
        #    ImageRes imageRes = #ImageMenu;
        #
        #    imageRes = ImageListAppl_Aot::utilElementType2Image(SysTreeNode::path2ApplObjectType(_path),0,0);
        #    if (!imageRes)
        #    {
        #        if (subStr(_path,1,strLen(#LabelPath)) == #LabelPath)
        #        {
        #            imageRes = #ImageLabel;
        #        }
        #        if (subStr(_path,1,strLen(#ApplicationDocPath)) == #ApplicationDocPath ||
        #            subStr(_path,1,strLen(#SystemDocPath)) == #SystemDocPath ||
        #            subStr(_path,1,strLen(#ApplicationDeveloperDocPath)) == #ApplicationDeveloperDocPath)
        #        {
        #            imageRes = #ImageDocumentationItem;
        #        }
        #        if (subStr(_path, 1, strLen(#DefFile)) == #DefFile)
        #        {
        #            imageRes = #ImageWebPageDefinition;
        #        }
        #    }
        #
        #    return imageRes;
        #}
      ENDSOURCE
      SOURCE #xml2GateSetting
        #/// <summary>
        #/// Converts an XML string to a <c>SysVersionControlGateSetting</c> enumeration value.
        #/// </summary>
        #/// <param name="_xml">
        #/// The XML string.
        #/// </param>
        #/// <returns>
        #/// The <c>SysVersionControlGateSetting</c> enumeration value.
        #/// </returns>
        #public static SysVersionControlGateSetting xml2GateSetting(XML _xml)
        #{
        #    SysVersionControlGateSetting ret;
        #
        #    switch (_xml)
        #    {
        #        case #PropertyValueYes:
        #            ret = SysVersionControlGateSetting::Accept;
        #            break;
        #
        #        case #PropertyValueNo:
        #            ret = SysVersionControlGateSetting::Reject;
        #            break;
        #
        #        case #XmlPrompt:
        #            ret = SysVersionControlGateSetting::Prompt;
        #            break;
        #    }
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: VersionControl unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #VersionControl
    PROPERTIES
      Name                #VersionControl
      Extends             #xVersionControl
      RunOn               #Client
      Origin              #{2D0EF007-0000-1000-0BF4-8C429AD9FE53}
      LegacyId            #61447
    ENDPROPERTIES
    
    METHODS
      SOURCE #addProcessedSyncElement
        #/// <summary>
        #/// Adds the record ID to the processed synchronization log.
        #/// </summary>
        #/// <param name="_recId">
        #/// The record ID.
        #/// </param>
        #public void addProcessedSyncElement(RecId _recId)
        #{
        #    SysVersionControlTmpChange processedElement;
        #
        #    if (_recId)
        #    {
        #        processedElement.setTmpData(processedSyncElements);
        #
        #        select firstOnly processedElement where processedElement.ChangeNumber == _recId;
        #
        #        if (!processedElement.RecId)
        #        {
        #            processedElement.clear();
        #            processedElement.ChangeNumber = _recId;
        #
        #            // skip insert logic
        #            processedElement.doInsert();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #allowCreate
        #public boolean allowCreate(TreeNode _node)
        #{
        #    SysVersionControllable controllable;
        #
        #    try
        #    {
        #        if (_node && sysVersionControlSystem)
        #        {
        #            controllable = SysTreeNode::newTreeNode(_node);
        #            return sysVersionControlSystem.allowCreate(controllable);
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowDelete
        #public boolean allowDelete(TreeNode _node, boolean _justInTime = false)
        #{
        #    SysVersionControllable  controllable;
        #
        #    try
        #    {
        #        if (_node && sysVersionControlSystem)
        #        {
        #            //Always all deletion of nodes not in version control
        #            if (this.allowCreate(_node))
        #                return true;
        #
        #            controllable = SysTreeNode::newTreeNode(_node);
        #            return sysVersionControlSystem.allowDelete(controllable);
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowEdit
        #public boolean allowEdit(TreeNode _node)
        #{
        #    boolean ret = true;
        #    TreeNode treeNode = SysTreeNode::getVCSControllableElement(_node);
        #    SysVersionControllable  controllable;
        #
        #    try
        #    {
        #        if (this.allowCreate(treeNode))
        #            return true;
        #
        #        if (!treeNode)
        #            treeNode = _node;
        #
        #        ret = treeNode.AOTAllowEdit();
        #
        #        if (ret && treeNode && sysVersionControlSystem)
        #        {
        #            controllable = SysTreeNode::newTreeNode(treeNode);
        #            return sysVersionControlSystem.allowEdit(controllable);
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #allowMoveToModel
        #public boolean allowMoveToModel(TreeNode _node, int _modelId)
        #{
        #    if (_node && sysVersionControlSystem && _modelId >= 1)
        #    {
        #        // A move to model is equal to changing the file's location, only if the element are already tracked in VCS.
        #        // It must not be possible to move to a different model if the element is already checked out.
        #        // If not root element then abort. Root element only supported for now
        #        if (!_node.treeNodeType().isRootElement())
        #        {
        #            return checkFailed(strFmt("@SYS327413", _node.treeNodePath()));
        #        }
        #
        #        return sysVersionControlSystem.allowMoveToModel(SysTreeNode::newTreeNode(_node), _modelId);
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #allowRename
        #public boolean allowRename(TreeNode _node, boolean _justInTime = false)
        #{
        #    try
        #    {
        #        if (_node && sysVersionControlSystem)
        #        {
        #            //Always allow rename of nodes not in version control
        #            if (this.allowCreate(_node))
        #                return true;
        #
        #            return sysVersionControlSystem.allowRename(SysTreeNode::newTreeNode(_node), _justInTime);
        #        }
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #canCheckOut
        #/// <summary>
        #/// Indicates whether the base rules can be checked out.
        #/// </summary>
        #/// <param name="treeNode">
        #/// The tree node instance.
        #/// </param>
        #/// <returns>
        #/// true if the tree node can be checked-out; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called before the <c>SystemVersionControlSystem.commandSynchronizeAndCheckout</c>
        #/// method.
        #/// </remarks>
        #public boolean canCheckOut(TreeNode treeNode)
        #{
        #    if(SysTreeNode::isUnwanted(treeNode))
        #    {
        #        error(strFmt("@SYS85681", treeNode.treeNodePath()));
        #        return false;
        #    }
        #
        #    if (treeNode.treeNodeType().isLayerAware() &&
        #        treeNode.AOTLayer() > currentAOLayer())
        #    {
        #        error("@SYS86215");
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #canCreate
        #/// <summary>
        #/// Indicates whether the base rules can be created in version control.
        #/// </summary>
        #/// <param name="_node">
        #/// The tree node instance.
        #/// </param>
        #/// <returns>
        #/// true if the tree node can be created in version control; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called before the <c>SystemVersionControlSystem.commandAdd</c> method.
        #/// </remarks>
        #public boolean canCreate(TreeNode _node)
        #{
        #    SysVersionControllable controllable;
        #
        #    //Not saved yet, and hence not in a layer yet
        #    if (!_node.applObjectLayerMask())
        #        _node.AOTsave();
        #
        #    controllable = SysTreeNode::newTreeNode(_node);
        #    if (controllable != null)
        #    {
        #        controllable.preAddAction();
        #        return controllable.canCreate();
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkIn
        #public void checkIn(TreeNode _node)
        #{
        #    MenuFunction menuFunction;
        #    LastAotSelection lastAotSelection;
        #
        #    setPrefix("@SYS85680");
        #    if (sysVersionControlSystem)
        #    {
        #        lastAotSelection = new LastAotSelection();
        #
        #        if (!lastAotSelection.first() || //Open when not started from the AOT
        #             lastAotSelection.first().treeNodePath() == _node.treeNodePath()) // Only open the changelist check-in form once
        #        {
        #            menuFunction = new MenuFunction(menuitemDisplayStr(SysVersionControlCheckIn), MenuItemType::Display);
        #            menuFunction.run();
        #        }
        #    }
        #    else
        #    {
        #        super(_node);
        #    }
        #}
      ENDSOURCE
      SOURCE #checkInChangelist
        #public void checkInChangelist(
        #    SysVersionControlTmpItem _items,
        #    SysVersionControlItemComment _comment,
        #    SysVersionControlChangeListId _changeList = '',
        #    SysVersionControlTmpWorkItems _workItems = null)
        #{
        #    setPrefix("@SYS85680");
        #
        #    if (sysVersionControlSystem)
        #    {
        #        sysVersionControlSystem.checkInChangelist(_items, _comment, _changeList, _workItems);
        #        this.colorAOT();
        #    }
        #}
      ENDSOURCE
      SOURCE #checkInItems
        #/// <summary>
        #/// Checks-in the list of AOT paths.
        #/// </summary>
        #/// <param name="_aotPaths">
        #/// The list of AOT paths.
        #/// </param>
        #/// <param name="_comments">
        #/// The comments made at check-in.
        #/// </param>
        #public void checkInItems(Set _aotPaths, SysVersionControlItemComment _comments)
        #{
        #    SysVersionControlTmpItem checkedOutItem;
        #
        #    // Get the full set of items to check-in
        #    // This will include also sub-items from tree-node containers
        #    Set pathsToCheckIn = SysTreeNodeContainerDispatcher::collectAllPaths(_aotPaths.getEnumerator());
        #
        #    if (sysVersionControlSystem)
        #    {
        #        checkedOutItem = sysVersionControlSystem.getCheckedOutItems();
        #
        #        while select checkedOutItem
        #        {
        #            if (!pathsToCheckIn.in(checkedOutItem.ItemPath))
        #            {
        #                checkedOutItem.delete();
        #            }
        #        }
        #
        #        sysVersionControlSystem.checkInChangelist(checkedOutItem, _comments);
        #    }
        #}
      ENDSOURCE
      SOURCE #checkOut
        #public boolean checkOut(TreeNode _node)
        #{
        #    boolean isCheckedOut;
        #    SysVersionControllable  controllable;
        #
        #    setPrefix("@SYS85679");
        #
        #    if (sysVersionControlSystem)
        #    {
        #        if (!this.canCheckOut(_node))
        #        {
        #            return false;
        #        }
        #
        #        controllable = SysTreeNode::newTreeNode(_node);
        #        isCheckedOut = sysVersionControlSystem.commandSynchronizeAndCheckout(controllable);
        #
        #        if (isCheckedOut)
        #        {
        #            this.colorAOT();
        #        }
        #        return isCheckedOut;
        #
        #    }
        #
        #    return super(_node);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class VersionControl extends xVersionControl
        #{
        #    #SysVersionControl
        #
        #    SysVersionControlSystem sysVersionControlSystem;
        #    SysVersionControlUserInterfaceProvider uiProvider;
        #    boolean isSynchronizing;
        #
        #    // <TreeNodePath, SysVersionControlSynchronizationLog RecID>
        #    Map itemPath2SyncLog;
        #
        #    SysVersionControlTmpChange processedSyncElements;
        #}
      ENDSOURCE
      SOURCE #colorAOT
        #public void colorAOT()
        #{
        #    Set checkedOutObjects = new Set(Types::String);
        #    SysVersionControlTmpItem items;
        #    SysVersionControlItemPath itemPath;
        #    Filename filename;
        #    MapEnumerator modelFolderEnumerator;
        #    MapEnumerator additionalFolderEnumerator;
        #    int pos;
        #    int len;
        #    str subFolder;
        #    str checkedOutPath;
        #    #File
        #
        #    void checkMap(MapEnumerator mapEnumerator)
        #    {
        #        str addFolder;
        #
        #        mapEnumerator.reset();
        #        while (mapEnumerator.moveNext())
        #        {
        #            addFolder = mapEnumerator.currentKey();
        #            addFolder = strReplace(addFolder,#FilePathDelimiter,'/');
        #            len = strLen(addFolder);
        #            if (strScan(subfolder,addFolder,strLen(subFolder),-(len+1)))
        #            {
        #                checkedOutObjects.add(checkedOutPath);
        #                break;
        #            }
        #        }
        #    }
        #
        #    if (sysVersionControlSystem && sysVersionControlSystem.parmAOTColoring())
        #    {
        #        items = sysVersionControlSystem.getCheckedOutItems();
        #
        #        if (sysVersionControlSystem.parmModelFolders())
        #        {
        #            modelFolderEnumerator = sysVersionControlSystem.parmModelFolders().getEnumerator();
        #        }
        #
        #        if (sysVersionControlSystem.parmAdditionalFolders())
        #        {
        #            additionalFolderEnumerator = sysVersionControlSystem.parmAdditionalFolders().getEnumerator();
        #        }
        #
        #        while select items
        #        {
        #
        #            if (SysTreeNode::SupportsGranularVcsOperations(items.ItemPath))
        #            {
        #                // If this node supports graular check-out operations, make sure checked-out path point to the
        #                // application object path. Only application object paths are colored.
        #                checkedOutPath = SysTreeNode::applObjectPath(items.ItemPath);
        #            }
        #            else
        #            {
        #                checkedOutPath = items.ItemPath;
        #            }
        #
        #            itemPath = strReplace(checkedOutPath,#FilePathDelimiter,'/');
        #            filename = items.InternalFilename;
        #            len = strLen(filename);
        #            pos = strScan(filename,itemPath,len,-len);
        #            if(pos)
        #            {
        #                subFolder = subStr(filename,1,pos);
        #
        #                if (modelFolderEnumerator)
        #                {
        #                    checkMap(modelFolderEnumerator);
        #                }
        #
        #                if (additionalFolderEnumerator)
        #                {
        #                    checkMap(additionalFolderEnumerator);
        #                }
        #            }
        #        }
        #    }
        #
        #    this.updateCheckedOutList(checkedOutObjects);
        #
        #}
      ENDSOURCE
      SOURCE #create
        #public boolean create(TreeNode _node)
        #{
        #    boolean isCreated;
        #    SysVersionControllable controllable;
        #    setPrefix("@SYS14364");
        #
        #    if (sysVersionControlSystem)
        #    {
        #        if (!this.canCreate(_node))
        #        {
        #            return false;
        #        }
        #
        #        controllable = SysTreeNode::newTreeNode(_node);
        #        isCreated = sysVersionControlSystem.commandAdd(controllable);
        #
        #        if (isCreated)
        #        {
        #            this.colorAOT();
        #        }
        #        return isCreated;
        #    }
        #
        #    return super(_node);
        #}
      ENDSOURCE
      SOURCE #delete
        #public boolean delete(TreeNode _node)
        #{
        #    SysVersionControllable  controllable;
        #
        #    setPrefix("@SYS10308");
        #
        #    if (sysVersionControlSystem && !isSynchronizing)
        #    {
        #        if (this.allowDelete(_node))
        #        {
        #            //Ignore deletion of nodes not in version control
        #            if (this.allowCreate(_node))
        #                return true;
        #
        #            controllable = SysTreeNode::newTreeNode(_node);
        #            return sysVersionControlSystem.commandDelete(controllable);
        #        }
        #        return false;
        #    }
        #    return super(_node);
        #}
      ENDSOURCE
      SOURCE #getAvailableLabelId
        #public int getAvailableLabelId(str _labelFile, str _language, IdAllocationSchema _idAllocationSchema=IdAllocationSchema::Classic)
        #{
        #    return super(_labelFile, _language, IdAllocationSchema::Classic);
        #}
      ENDSOURCE
      SOURCE #getChangeNumberContents
        #/// <summary>
        #/// Gets a collection of <c>SysVersionControlTmpItem</c> records that is included in the specified
        #/// changelist.
        #/// </summary>
        #/// <param name="_changeNumber">
        #/// The changelist in which to retrieve information.
        #/// </param>
        #/// <param name="_changeDateTime">
        #/// The time and date when the change was submitted.
        #/// </param>
        #/// <param name="_changeComments">
        #/// The comments that are associated with the change.
        #/// </param>
        #/// <returns>
        #/// A <c>SysVersionControlTmpItem</c> record for each change in the changelist.
        #/// </returns>
        #public SysVersionControlTmpItem getChangeNumberContents(SysVersionControlChangeNumber _changeNumber, utcdatetime _changeDateTime, SysVersionControlItemComment _changeComments)
        #{
        #    SysVersionControlChangeLists changeListSupportingClass = sysVersionControlSystem as SysVersionControlChangeLists;
        #
        #    if (changeListSupportingClass)
        #    {
        #        startLengthyOperation();
        #        return changeListSupportingClass.getChangeNumberContents(_changeNumber, _changeDateTime, _changeComments);
        #    }
        #    throw error("@SYS112528");
        #}
      ENDSOURCE
      SOURCE #getChangesHistory
        #public SysVersionControlTmpChange getChangesHistory()
        #{
        #    SysVersionControlChangeLists changeListSupportingClass = sysVersionControlSystem as SysVersionControlChangeLists;
        #
        #    if (this.parmSysVersionControlSystem().supportSubmittedChangeLists() && changeListSupportingClass)
        #    {
        #        startLengthyOperation();
        #        return changeListSupportingClass.getChangesHistory();
        #    }
        #    throw error("@SYS112528");
        #}
      ENDSOURCE
      SOURCE #getCheckedOutItems
        #public SysVersionControlTmpItem getCheckedOutItems()
        #{
        #    if (sysVersionControlSystem)
        #    {
        #        startLengthyOperation();
        #        return sysVersionControlSystem.getCheckedOutItems();
        #    }
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getCheckedOutStatus
        #/// <summary>
        #/// Gets the checked-out status of the tree node.
        #/// </summary>
        #/// <param name="node">
        #/// The instance of the tree node.
        #/// </param>
        #/// <returns>
        #/// The value from <c>SysVersionControlItemStatus</c> that represents the checked-out action of the
        #/// tree node item.
        #/// </returns>
        #public SysVersionControlItemStatus getCheckedOutStatus(TreeNode node)
        #{
        #    SysVersionControlItemStatus status;
        #    int lines;
        #
        #    if (sysVersionControlSystem)
        #    {
        #        //getCheckedOutStatus is a background query, in case of any error no message to infolog should be written
        #        //instead the Uncontrolled value should be returned.
        #
        #        lines = infologLine();
        #        status = sysVersionControlSystem.getActionText(SysTreeNode::newTreeNode(node));
        #        infolog.clear(lines);
        #        return status;
        #    }
        #
        #    return SysVersionControlItemStatus::Uncontrolled;
        #}
      ENDSOURCE
      SOURCE #getItemHistory
        #public SysVersionControlTmpItem getItemHistory(SysVersionControllable _controllable)
        #{
        #    startLengthyOperation();
        #    if (sysVersionControlSystem)
        #        return sysVersionControlSystem.getItemHistory(_controllable);
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getItemVersion
        #public Filename getItemVersion(SysVersionControllable _controllable, SysVersionControlTmpItem _version)
        #{
        #    if (sysVersionControlSystem)
        #    {
        #        startLengthyOperation();
        #        return sysVersionControlSystem.getItemVersion(_controllable, _version);
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getLabelVersion
        #public void getLabelVersion(TreeNode _node = null, str _label = '')
        #{
        #    SysVersionControlSyncParameters syncParm;
        #    if (sysVersionControlSystem)
        #    {
        #        syncParm = SysVersionControlSyncParameters::construct();
        #        syncParm.parmSilent(false);
        #        syncParm.parmForce(_node == null ? false : true);
        #        syncParm.parmDeleteLocalObjects(false);
        #        syncParm.parmLabel(_label);
        #        syncParm.parmSyncAll(false);
        #
        #        if (_node)
        #        {
        #            sysVersionControlSystem.commandSynchronize(SysTreeNode::newTreeNode(_node), syncParm);
        #        }
        #        else
        #        {
        #            syncParm.parmSyncAll(true);
        #            sysVersionControlSystem.commandSynchronize(null, syncParm);
        #        }
        #    }
        #    else
        #    {
        #        super(_node, _label);
        #    }
        #    this.resetAfterGetLatest();
        #}
      ENDSOURCE
      SOURCE #getLatestVersion
        #public void getLatestVersion(TreeNode _node = null, boolean _delLocalFiles = false)
        #{
        #    SysVersionControlSyncParameters syncParm;
        #    SysVersionControllable controllable;
        #
        #    if (sysVersionControlSystem)
        #    {
        #        syncParm = SysVersionControlSyncParameters::construct();
        #        syncParm.parmSilent(false);
        #        syncParm.parmForce(_node == null ? false : true);
        #        syncParm.parmDeleteLocalObjects(_delLocalFiles);
        #        syncParm.parmSyncAll(false);
        #
        #        if (_node)
        #        {
        #            if (_node.treeNodePath() == TreeNode::rootNode().treeNodePath())
        #            {
        #                syncParm.parmSyncAll(true);
        #            }
        #
        #            controllable = SysTreeNode::newTreeNode(_node);
        #            sysVersionControlSystem.commandSynchronize(controllable, syncParm);
        #        }
        #        else
        #        {
        #            syncParm.parmSyncAll(true);
        #            sysVersionControlSystem.commandSynchronize(null, syncParm);
        #        }
        #    }
        #    else
        #    {
        #        super(_node, _delLocalFiles);
        #    }
        #    this.resetAfterGetLatest();
        #}
      ENDSOURCE
      SOURCE #ideIntegration
        #public boolean ideIntegration()
        #{
        #    if (sysVersionControlSystem)
        #    {
        #        return sysVersionControlSystem.ideIntegration();
        #    }
        #    return super();
        #}
      ENDSOURCE
      SOURCE #init
        #public void init(SysVersionControlParameters _parameters = SysVersionControlParameters::find())
        #{
        #    #File
        #    #SysVersionControl
        #
        #    SysDictEnum typeEnum    = new SysDictEnum(enumNum(SysVersionControlType));
        #
        #    sysVersionControlSystem = null;
        #    infolog.writeCustomStatlineItem('');
        #
        #    //
        #    // Only set the ui provider if it hasn't already been set, e.g. externally from VS
        #    //
        #    if (!uiProvider)
        #    {
        #        uiProvider = SysVersionControlUserInterfaceMorphX::construct();
        #    }
        #
        #    if (_parameters &&
        #        _parameters.vcsEnabled == EnableDisable::Enable &&
        #        typeEnum.value2Symbol(_parameters.vcsType) &&
        #        isDeveloper())
        #    {
        #        sysVersionControlSystem = SysVersionControlSystem::newType(_parameters.vcsType);
        #        if (sysVersionControlSystem)
        #        {
        #            if(!sysVersionControlSystem.init(_parameters) ||
        #                // HM_Version Control Testing, modified by Daniel at 1/13/2017, start
        #                (_parameters.VCSType != SysVersionControlType::SysVersionControlGit &&
        #                // HM_Version Control Testing, modified by Daniel at 1/13/2017, end
        #                (!sysVersionControlSystem.applyGlobalSettings() ||
        #                !sysVersionControlSystem.validateGlobalSettings())))
        #            {
        #                sysVersionControlSystem = null;
        #            }
        #            else
        #            {
        #                if (sysVersionControlSystem.showStatusLine())
        #                {
        #                    xUserInfo::statusLine_CustomText(true);
        #                    infolog.writeCustomStatlineItem(strFmt('%1: %2', sysVersionControlSystem.description(), sysVersionControlSystem.parmProject()));
        #                }
        #                sysVersionControlSystem.parmWarnWhenReverting(_parameters.uiFlags & #VCWarnWhenReverting);
        #                sysVersionControlSystem.parmAOTColoring(_parameters.uiFlags & #VCAOTColoring);
        #            }
        #        }
        #    }
        #    else
        #    {
        #        sysVersionControlSystem = null;
        #    }
        #
        #    versioncontrol.reload();
        #
        #    if(hasGUI())
        #        this.colorAOT();
        #}
      ENDSOURCE
      SOURCE #initSynchronizationProcess
        #/// <summary>
        #/// Initializes the synchronization process.
        #/// </summary>
        #public void initSynchronizationProcess()
        #{
        #    // <TreeNodePath, SysVersionControlSynchronizationLog RecID>
        #    itemPath2SyncLog = new Map(Types::String, Types::Int64);
        #    processedSyncElements.clear();
        #}
      ENDSOURCE
      SOURCE #isGranularVCSEnabled
        #private boolean isGranularVCSEnabled()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #moveToModel
        #/// <summary>
        #/// Moves the tree node to the model.
        #/// </summary>
        #/// <param name="_node">
        #/// The tree node that is being moved.
        #/// </param>
        #/// <param name="_modelId">
        #/// The model to which the tree node is moved.
        #/// </param>
        #/// <returns>
        #/// true if the move was successful; otherwise, false.
        #/// </returns>
        #public boolean moveToModel(TreeNode _node, int _modelId)
        #{
        #    boolean isMoved;
        #    SysVersionControllable controllable;
        #    #TreeNodeSysNodeType
        #
        #    if (sysVersionControlSystem)
        #    {
        #        if (!isSynchronizing)
        #        {
        #            if (this.allowMoveToModel(_node, _modelId))
        #            {
        #                // Ignore moveToModel when not in versioncontrol
        #                if (this.allowCreate(_node))
        #                {
        #                    isMoved = true;
        #                }
        #                else
        #                {
        #                    if (_node.treeNodeType().id() == #NT_LABELFILELANGUAGE)
        #                    {
        #                        controllable = SysLabelFile::newTreeNode(_node);
        #                    }
        #                    else
        #                    {
        #                        controllable = SysTreeNode::newTreeNode(_node);
        #                    }
        #
        #                    isMoved = sysVersionControlSystem.commandMoveToModel(controllable, _modelId);
        #
        #                    if (isMoved)
        #                    {
        #                        this.colorAOT();
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                isMoved = false;
        #            }
        #        }
        #        else
        #        {
        #            // Allow move when synchronizing
        #            isMoved = true;
        #        }
        #    }
        #    else
        #    {
        #        isMoved = super(_node, _modelId);
        #    }
        #
        #    return isMoved;
        #}
      ENDSOURCE
      SOURCE #onAfterItemDeleted
        #/// <summary>
        #/// Deletes the item from VCS after it has been deleted from the repository.
        #/// </summary>
        #/// <param name="itemPath">
        #/// The AOT path of the deleted item.
        #/// </param>
        #/// <returns>
        #/// true if the item was succesfully deleted; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called when the tree node and corresponding file have been already deleted.
        #/// </remarks>
        #public boolean onAfterItemDeleted(str itemPath)
        #{
        #    boolean isDeleted = false;
        #    SysVersionControllable controllable;
        #
        #    if (sysVersionControlSystem)
        #    {
        #        controllable = SysTreeNodeVirtualDeleted::newTreeNodePath(itemPath);
        #        isDeleted = sysVersionControlSystem.commandDelete(controllable);
        #    }
        #
        #    return isDeleted;
        #}
      ENDSOURCE
      SOURCE #onAfterItemRenamed
        #/// <summary>
        #/// Renames an AOT element in the version control system.
        #/// </summary>
        #/// <param name="oldTreeNodePath">
        #/// The path of the old tree node.
        #/// </param>
        #/// <param name="newTreeNode">
        #/// The new instance of the tree node.
        #/// </param>
        #/// <returns>
        #/// true if the renaming is successful; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called when the tree node and corresponding file have already been renamed.
        #/// </remarks>
        #public boolean onAfterItemRenamed(str oldTreeNodePath, TreeNode newTreeNode)
        #{
        #    boolean isRenamed = false;
        #    SysVersionControllable oldControllable;
        #    SysVersionControllable newControllable;
        #
        #    if (sysVersionControlSystem)
        #    {
        #        oldControllable = SysTreeNodeVirtualDeleted::newTreeNodePath(oldTreeNodePath);
        #        newControllable = SysTreeNode::newTreeNode(newTreeNode);
        #        isRenamed = sysVersionControlSystem.commandOnAfterRename(oldControllable, newControllable);
        #    }
        #
        #    return isRenamed;
        #}
      ENDSOURCE
      SOURCE #parmIsSynchronizing
        #public boolean parmIsSynchronizing(boolean _isSynchronizing = isSynchronizing)
        #{
        #    isSynchronizing = _isSynchronizing;
        #
        #    return isSynchronizing;
        #}
        #
      ENDSOURCE
      SOURCE #parmProcessedSyncElements
        #public SysVersionControlTmpChange parmProcessedSyncElements(SysVersionControlTmpChange _processedSyncElements = processedSyncElements)
        #{
        #    processedSyncElements = _processedSyncElements;
        #
        #    return processedSyncElements;
        #}
      ENDSOURCE
      SOURCE #parmSysVersionControlSystem
        #public SysVersionControlSystem parmSysVersionControlSystem(SysVersionControlSystem _versionControlSystem = sysVersionControlSystem)
        #{
        #    sysVersionControlSystem = _versionControlSystem;
        #    return sysVersionControlSystem;
        #}
      ENDSOURCE
      SOURCE #parmTreeNodePath2SyncLog
        #public Map parmTreeNodePath2SyncLog(Map _itemPath2SyncLog = itemPath2SyncLog)
        #{
        #    return itemPath2SyncLog;
        #}
      ENDSOURCE
      SOURCE #parmUserInterfaceProvider
        #public SysVersionControlUserInterfaceProvider parmUserInterfaceProvider(SysVersionControlUserInterfaceProvider _uiProvider = uiProvider)
        #{
        #    uiProvider = _uiProvider;
        #    return uiProvider;
        #}
      ENDSOURCE
      SOURCE #queryRename
        #/// <summary>
        #/// Indicates whether the tree node can be renamed.
        #/// </summary>
        #/// <param name="_node">
        #/// The tree node to be renamed.
        #/// </param>
        #/// <param name="_newname">
        #/// New name of the new tree node.
        #/// </param>
        #/// <returns>
        #/// true if node can be renamed; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method is called by AX source control plugin in Visual Studio.
        #/// </remarks>
        #public boolean queryRename(TreeNode _node, str _newname)
        #{
        #    SysVersionControllable controllable;
        #    setPrefix("@SYS27865");
        #
        #    controllable = SysTreeNode::newTreeNode(_node);
        #    if (sysVersionControlSystem)
        #    {
        #        if (!this.allowRename(_node, true))
        #        {
        #            return false;
        #        }
        #        else
        #        {
        #            //Ignore rename when not in versioncontrol
        #            if (!this.allowCreate(_node))
        #            {
        #                return controllable.isNewNameValid(_newname);
        #            }
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #rename
        #public boolean rename(TreeNode _node, str _newname)
        #{
        #    boolean isRenamed;
        #    Set unwantedNames;
        #    SetEnumerator senum;
        #
        #    setPrefix("@SYS27865");
        #
        #    if (sysVersionControlSystem)
        #    {
        #        if (this.allowRename(_node))
        #        {
        #            //Ignore rename when not in versioncontrol
        #            if (this.allowCreate(_node))
        #                isRenamed = true;
        #            else
        #            {
        #                unwantedNames = sysVersionControlSystem.parmUnwantedObjectNames();
        #                senum = unwantedNames.getEnumerator();
        #                while(senum.moveNext())
        #                {
        #                    if(match(senum.current(), _newName))
        #                    {
        #                        error(strFmt("@SYS85681", _newName));
        #                        return false;
        #                    }
        #                }
        #                isRenamed = sysVersionControlSystem.commandRename(SysTreeNode::newTreeNode(_node), _newName);
        #                if (isRenamed)
        #                {
        #                    this.colorAOT();
        #                }
        #            }
        #        }
        #        else
        #            isRenamed = false;
        #    }
        #    else
        #    {
        #        isRenamed = super(_node, _newname);
        #    }
        #    return isRenamed;
        #}
      ENDSOURCE
      SOURCE #resetAfterGetLatest
        #protected void resetAfterGetLatest()
        #{
        #    processedSyncElements.clear();
        #    itemPath2SyncLog = null;
        #
        #    this.init();
        #    SysCompilerOutput::updateParm();
        #}
      ENDSOURCE
      SOURCE #save
        #public void save(TreeNode _treeNode)
        #{
        #    SysVersionControllable  controllable;
        #
        #    setPrefix("@SYS12229");
        #
        #    try
        #    {
        #        if (sysVersionControlSystem && _treeNode)
        #        {
        #            if (!this.allowCreate(_treeNode) && !SysTreeNode::existsInLayer(_treeNode, currentAOLayer()))
        #            {
        #                warning(strFmt("@SYS4007197", _treeNode.treeNodePath()));
        #            }
        #
        #            controllable = SysTreeNode::newTreeNode(_treeNode);
        #            sysVersionControlSystem.commandSave(controllable);
        #        }
        #    }
        #    catch(Exception::Break)
        #    {
        #         throw Exception::Break;
        #    }
        #    catch
        #    {
        #        exceptionTextFallThrough();
        #    }
        #}
      ENDSOURCE
      SOURCE #showHistory
        #public void showHistory(TreeNode _node)
        #{
        #    if (sysVersionControlSystem)
        #    {
        #        sysVersionControlSystem.commandShowHistory(SysTreeNode::newTreeNode(_node));
        #    }
        #    else
        #    {
        #        super(_node);
        #    }
        #}
      ENDSOURCE
      SOURCE #showInfo
        #public void showInfo()
        #{
        #    if (sysVersionControlSystem)
        #        sysVersionControlSystem.showInfo();
        #}
      ENDSOURCE
      SOURCE #undoCheckOut
        #public boolean undoCheckOut(TreeNode _node, boolean showDialog = true)
        #{
        #    boolean isUndone;
        #    SysVersionControllable  controllable;
        #
        #    setPrefix("@SYS83894");
        #
        #    if (sysVersionControlSystem)
        #    {
        #        controllable = SysTreeNode::newTreeNode(_node);
        #        isUndone = sysVersionControlSystem.commandUndoCheckOut(controllable, showDialog);
        #
        #        if (isUndone)
        #        {
        #            this.colorAOT();
        #        }
        #        return isUndone;
        #    }
        #
        #    return super(_node);
        #}
      ENDSOURCE
      SOURCE #unwantedObjectTypes
        #public Set unwantedObjectTypes()
        #{
        #    if(this.parmSysVersionControlSystem())
        #        return this.parmSysVersionControlSystem().parmUnwantedObjectTypes();
        #    return null;
        #}
      ENDSOURCE
      SOURCE #modelQueryable
        #/// <summary>
        #/// Indicates whether the tree node can query if the model exists.
        #/// </summary>
        #/// <param name="_node">
        #/// The specified tree node.
        #/// </param>
        #/// <returns>
        #/// true if the tree node can query if the model exists; otherwise, false.
        #/// </returns>
        #public static boolean modelQueryable(TreeNode _node)
        #{
        #    TreeNodeType nodeType;
        #    if (_node)
        #    {
        #        nodeType = _node.treeNodeType();
        #        return nodeType.isModelElement() && _node.AOTIsPersisted();
        #    }
        #    return false;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlItemHistory
  PROPERTIES
    Name                #SysVersionControlItemHistory
    Origin              #{1727EE45-E35C-45ED-99C0-0E54740D636D}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    SysVersionControllable controllable;
      #    SysVersionControlTmpItem item;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    SysVersionControlSystem sysVersionControlSystem = versioncontrol.parmSysVersionControlSystem();
      #
      #    if (SysVersionControlParameters::find().vcsEnabled == EnableDisable::Disable)
      #    {
      #        throw error("@SYS135983" + ' ' + strfmt("@SYS120745", "@SYS85914"), '', SysInfoAction_Formrun::newFormname(formstr(SysVersionControlParametersDev)));
      #    }
      #
      #    super();
      #
      #    if (sysVersionControlSystem)
      #    {
      #        if(!sysVersionControlSystem.supportSubmittedChangeLists())
      #        {
      #            gridOverview_ChangeNumber.visible(false);
      #            sysVersionControlChangeContents.visible(false);
      #        }
      #
      #        if (!sysVersionControlSystem.supportSyncLabel())
      #        {
      #            gridOverview_Label.visible(false);
      #        }
      #
      #        if (!sysVersionControlSystem.supportChangeVersion())
      #        {
      #            gridOverview_Version.visible(false);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    SysContextMenu sysContextMenu;
      #    SysVersionControlTmpItem callerItem;
      #    SysDictClass sysDictClass;
      #
      #    if (SysContextMenu::startedFrom(element.args()))
      #    {
      #        sysContextMenu = element.args().parmObject();
      #        controllable   = SysTreeNode::newTreeNode(sysContextMenu.getFirstNode());
      #    }
      #    else
      #    {
      #        if (element.args() &&
      #            SysDictClass::isEqualOrSuperclass(classidget(element.args().caller()), classnum(TreeNode)))
      #        {
      #            controllable   = SysTreeNode::newTreeNode(element.args().caller());
      #        }
      #        else
      #        {
      #            if (element.args() &&
      #                element.args().record() &&
      #                element.args().record() is SysVersionControlTmpItem)
      #            {
      #                callerItem   = element.args().record() as SysVersionControlTmpItem;
      #                controllable = callerItem.getControllable();
      #            }
      #            else
      #            {
      #                if (element.args() && element.args().caller())
      #                {
      #                    sysDictClass = new SysDictClass(classidget(element.args().caller()));
      #                    if (sysDictClass.isImplementing(classnum(SysVersionControllable)))
      #                    {
      #                        controllable = element.args().caller();
      #                    }
      #                }
      #            }
      #        }
      #    }
      #
      #    if (controllable)
      #    {
      #        item = versioncontrol.getItemHistory(controllable);
      #
      #        if (SysVersionControlTmpItem::hasSeveralNames(item))
      #        {
      #            overview_M_itemPathUsingObjectName.visible(true);
      #        }
      #        // BP deviation documented
      #        sysVersionControlTmpItem.setTmp();
      #        sysVersionControlTmpItem.checkRecord(false);
      #        sysVersionControlTmpItem.setTmpData(item);
      #    }
      #
      #    super();
      #
      #    if (sysVersionControlTmpItem)
      #    {
      #        buttonGroup.enabled(true);
      #        sysCompare.enabled(sysVersionControlTmpItem_ds.twoMarked());
      #    }
      #    else
      #        buttonGroup.enabled(false);
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpItem
          Table               #SysVersionControlTmpItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #twoMarked
          #boolean twoMarked()
          #{
          #    SysVersionControlTmpItem tmpitem  = this.getFirst(1) as SysVersionControlTmpItem;
          #
          #    if (!tmpitem)
          #        return false;
          #
          #    tmpitem = this.getNext() as SysVersionControlTmpItem;
          #
          #    if (!tmpitem)
          #        return false;
          #
          #    tmpitem = this.getNext() as SysVersionControlTmpItem;
          #
          #    if (!tmpitem)
          #        return true;
          #
          #    return false;
          #}
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    if (sysVersionControlTmpItem)
          #    {
          #        buttonGroup.enabled(true);
          #        sysCompare.enabled(this.twoMarked());
          #    }
          #    else
          #    {
          #        buttonGroup.enabled(false);
          #    }
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    super();
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpItem)).addSortField(fieldnum(SysVersionControlTmpItem, vcsDate),SortOrder::Descending);
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpItem)).addSortField(fieldnum(SysVersionControlTmpItem, vcsTime),SortOrder::Descending);
          #    this.query().dataSourceTable(tablenum(SysVersionControlTmpItem)).addSortField(fieldnum(SysVersionControlTmpItem, ChangeNumber),SortOrder::Ascending);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS10575
      TitleDatasource     #SysVersionControlTmpItem
      WindowType          #Workspace
      SetCompany          #No
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          VerticalSpacing     #4
          ElementPosition     #1073741823
          HierarchyParent     #OverviewTab
          DataSource          #SysVersionControlTmpItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Comment
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #GeneralTab
          DataSource          #SysVersionControlTmpItem
          AlignChild          #No
          DataGroup           #Comment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ModifiedBy
          ElementPosition     #1073741823
          HierarchyParent     #GeneralTab
          DataSource          #SysVersionControlTmpItem
          DataGroup           #ModifiedBy
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Overview
          ElementPosition     #1073741823
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #SysVersionControlTmpItem
          DataGroup           #Overview
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          HelpText            #@SYS35017
          ElementPosition     #1610612734
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #GeneralTab
          ElementPosition     #1610612734
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #OverviewTab
          VerticalSpacing     #0
          ElementPosition     #1073741823
          HierarchyParent     #Tab
          Caption             #@SYS9039
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #OpenNewWindow
          HelpText            #@SYS85924
          ElementPosition     #2013265918
          HierarchyParent     #ButtonGroup
          Text                #@SYS53405
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    sysVersionControlTmpItem.openNewWindow();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #ViewFile
          HelpText            #@SYS85923
          ElementPosition     #2080374782
          HierarchyParent     #ButtonGroup
          Text                #@SYS85921
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    sysVersionControlTmpItem.viewFile();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DATEEDIT
        PROPERTIES
          Name                #GridOverview_VCSDate
          ElementPosition     #1879048190
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #VCSDate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INT64EDIT
        PROPERTIES
          Name                #gridOverview_ChangeNumber
          AutoDeclaration     #Yes
          ElementPosition     #2143289342
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #ChangeNumber
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #GridOverview_Version
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #Version
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #sysCompare
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroup
          MultiSelect         #Yes
          MenuItemType        #Action
          MenuItemName        #sysCompare
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlChangeContents
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          MenuItemName        #SysVersionControlChangeContents
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SysVersionControlGet
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroup
          MenuItemType        #Action
          MenuItemName        #SysVersionControlGet
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Comment_Comment
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
          HierarchyParent     #Comment
          ShowLabel           #No
          DataSource          #SysVersionControlTmpItem
          DataField           #Comment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GridOverview_ActionText
          ElementPosition     #1610612734
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #ActionText
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #gridOverview_Label
          AutoDeclaration     #Yes
          ElementPosition     #2139095038
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #Label
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GridOverview_ShortComment
          ElementPosition     #2113929214
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #ShortComment
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #GridOverview_User
          ElementPosition     #2080374782
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #User
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Overview_M_itemPathUsingObjectName
          AutoDeclaration     #Yes
          Visible             #No
          AllowEdit           #No
          ElementPosition     #2130706430
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataMethod          #itemPathUsingObjectName
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TIMEEDIT
        PROPERTIES
          Name                #GridOverview_VCSTime
          ElementPosition     #2013265918
          HierarchyParent     #Overview
          DataSource          #SysVersionControlTmpItem
          DataField           #VCSTime
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlParametersAdm
  PROPERTIES
    Name                #SysVersionControlParametersAdm
    Origin              #{47C5009C-EE21-4EC7-8437-C38136994D69}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    #SysVersionControlSourceDepotXML
      #    #SysVersionControl
      #    #Properties
      #    #file
      #
      #    FilenameFilter fileNameLookupFilter;
      #    str fileNameLookupName;
      #    str fileNameLookupTitle;
      #    str filePathLookupTitle;
      #
      #    SysVersionControlSystem         sysVersionControlSystem;
      #    SysVersionControlTmpItem        defItem;
      #    SysVersionControlDefFile        defFile;
      #    SysVersionControlParameters     sysVersionControlParameters;
      #}
      #
    ENDSOURCE
    SOURCE #activatePluginTab
      #void activatePluginTab(SysVersionControlType type)
      #{
      #    FormControl tabpage;
      #    SysDictEnum typeEnum    = new SysDictEnum(enumNum(SysVersionControlType));
      #    Object      obj;
      #    int i;
      #
      #    fileNameLookupFilter = ['',''];
      #    fileNameLookupName = '';
      #    fileNameLookupTitle = '';
      #    filePathLookupTitle = '';
      #
      #    for(i=1; i<=tab.controlCount(); i++)
      #    {
      #        tabpage = tab.controlNum(i);
      #        if(match('<Plugin',tabpage.name()))
      #        {
      #            if ( tabpage.name() == 'Plugin_' + typeEnum.value2Symbol(type))
      #            {
      #                tabpage.visible(true);
      #                if( TreeNode::findNode('\\forms\\'+this.name()+'\\Designs\\DesignList\\'+tabpage.name()+'\\methods\\setPluginSettings'))
      #                {
      #                    obj = tabpage;
      #                    obj.setPluginSettings();
      #                }
      #            }
      #            else
      #            {
      #                tabpage.visible(false);
      #            }
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #aldFolderLookup
      #public void aldFolderLookup(SysVersionControlTmpAdditionalFolders _buffer, FormControl _formControl, str _filterStr)
      #{
      #    str modelFullPath;
      #    str aldFullPath;
      #    str aldModelDefaultFullPath;
      #    str selectedFolderPath;
      #    str vcsRoot;
      #    str outOfModelAldPath;
      #    FormStringControl folderControl = _formControl as FormStringControl;
      #    System.IO.DirectoryInfo dirInfo;
      #    int numberOfDirs;
      #
      #    vcsRoot = sysVersionControlSystem.parmFolder();
      #    aldFullPath = System.IO.Path::Combine(vcsRoot, _buffer.Folder, #labelFiles, _buffer.AldLocation);
      #
      #    dirInfo = new System.IO.DirectoryInfo(aldFullPath);
      #    aldFullPath = dirInfo.get_FullName();
      #
      #    if (!System.IO.Directory::Exists(aldFullPath))
      #    {
      #        System.IO.Directory::CreateDirectory(aldFullPath);
      #    }
      #
      #    selectedFolderPath = WinAPI::browseForFolderDialog("@SYS4000767", aldFullPath);
      #
      #    if (selectedFolderPath)
      #    {
      #        aldModelDefaultFullPath = System.IO.Path::Combine(vcsRoot, _buffer.Folder, #labelFiles);
      #        dirInfo = new System.IO.DirectoryInfo(aldModelDefaultFullPath);
      #        aldModelDefaultFullPath = dirInfo.get_FullName();
      #
      #        if (selectedFolderPath == aldModelDefaultFullPath)
      #        {
      #            error(strFmt("@SYS4000781", aldModelDefaultFullPath));
      #            return;
      #        }
      #
      #        // Ald folder must exists beneath VCS root
      #        if (!strStartsWith(selectedFolderPath, vcsRoot))
      #        {
      #            error(strFmt("@SYS110339", selectedFolderPath, vcsRoot));
      #            return;
      #        }
      #
      #        modelFullPath = System.IO.Path::Combine(vcsRoot, _buffer.Folder);
      #        dirInfo = new System.IO.DirectoryInfo(modelFullPath);
      #        modelFullPath  = dirInfo.get_FullName();
      #
      #        // Ald folder is beneath model
      #        if (strStartsWith(selectedFolderPath, modelFullPath))
      #        {
      #            aldFullPath = modelFullPath + #FilePathDelimiter + #labelFiles;
      #
      #            // Beneath model\label files
      #            if (strStartsWith(selectedFolderPath, aldFullPath))
      #            {
      #               selectedFolderPath = subStr(selectedFolderPath, strLen(aldFullPath + #FilePathDelimiter) + 1, maxInt());
      #            }
      #            else
      #            {
      #                // Beneath model\<some here>
      #                selectedFolderPath = @'..\' + subStr(selectedFolderPath, strLen(modelFullPath + #FilePathDelimiter) + 1, maxInt());
      #            }
      #        }
      #        else
      #        {
      #            // Ald folder is beneath VCS root, calculate relative path to model folder
      #            // ((count of directories in model folder + 1 for "Label files") * '..\' ) + 'Selected folder' + parents
      #            outOfModelAldPath  = subStr(selectedFolderPath, strLen(vcsRoot + #FilePathDelimiter) + 1, maxInt());
      #
      #            // "label files"
      #            numberOfDirs = strSplit(_buffer.Folder, @'\').elements() + 1;
      #
      #            selectedFolderPath = strRep(@'..\', numberOfDirs);
      #
      #
      #            // selected folder
      #            selectedFolderPath += outOfModelAldPath;
      #        }
      #
      #        // If we still have a selectedFolderPath it means it has been checked and ok, otherwise it would have been empty.
      #        if (selectedFolderPath && folderControl)
      #        {
      #            _buffer.AldLocation = selectedFolderPath;
      #            folderControl.text(selectedFolderPath);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #checkFolderIsRelative
      #public boolean checkFolderIsRelative(str _subFolderPath)
      #{
      #    // Sub folder must be relative path, cannot be absolute (full path)
      #    if (match(@'^[a-zA-Z]\:\\.*', _subFolderPath))
      #    {
      #        error(strFmt("@SYS4000755", _subFolderPath));
      #        return false;
      #    }
      #    return true;
      #}
    ENDSOURCE
    SOURCE #checkSubFolderPath
      #/// <summary>
      #/// Checks if the argument _subFolderPath exists and is located beneath VCS root folder path.
      #/// </summary>
      #/// <param name="_subFolderPath">
      #/// The folder path to check.
      #/// </param>
      #/// <returns>
      #/// true if the argument subFolderPath exists and is located beneath VCS root folder path; otherwise, false.
      #/// </returns>
      #/// <remarks>
      #/// If the argument subFolderPath is relative to the VCS repository path, it concatenates the VCS repository's path and the argument
      #/// and checks the path the same way as if an absolute path was given as argument.
      #/// </remarks>
      #public boolean checkSubFolderPath(str _subFolderPath)
      #{
      #    str checkFolderPath = _subFolderPath;
      #    str vcsRoot;
      #
      #    #File
      #
      #    vcsRoot = sysVersionControlSystem.parmFolder();
      #
      #    if (checkFolderPath)
      #    {
      #        // If folder path does not exists concatenate with VCS root folder path.
      #        if (!WinAPI::folderExists(checkFolderPath))
      #        {
      #            // Concatenate vcsRoot and subFolderPath
      #            checkFolderPath = strFmt('%1%2%3', vcsRoot, #FilePathDelimiter, checkFolderPath);
      #
      #            // Check if the folder exists
      #            if (!WinAPI::folderExists(checkFolderPath))
      #            {
      #                error(strFmt("@SYS110338", checkFolderPath));
      #                return false;
      #            }
      #        }
      #
      #        // Check that the selected folder exists beneath vcs root
      #        if (!(strStartsWith(checkFolderPath, vcsRoot) && strLen(checkFolderPath) > strLen(vcsRoot)))
      #        {
      #            error(strFmt("@SYS110339", checkFolderPath, vcsRoot));
      #            return false;
      #        }
      #
      #        // Folder path to check cannot be the same as VCS rootFolder
      #        if (checkFolderPath == vcsRoot)
      #        {
      #            error(strFmt("@SYS110340", checkFolderPath, vcsRoot));
      #            return false;
      #        }
      #
      #        return true;
      #    }
      #
      #    return false;
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    if (sysVersionControlParameters && sysVersionControlSystem)
      #    {
      #        if (sysVersionControlSystem.editDefFile(this.generateXML()))
      #        {
      #            versioncontrol.init(sysVersionControlParameters);
      #        }
      #    }
      #    super();
      #}
    ENDSOURCE
    SOURCE #filenameLookupFileName
      #str filenameLookupFileName()
      #{
      #    return fileNameLookupName;
      #}
    ENDSOURCE
    SOURCE #filenameLookupFilter
      #FilenameFilter filenameLookupFilter()
      #{
      #    return fileNameLookupFilter;
      #}
    ENDSOURCE
    SOURCE #filenameLookupInitialPath
      #str filenameLookupInitialPath()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupTitle
      #str filenameLookupTitle()
      #{
      #    return fileNameLookupTitle;
      #}
    ENDSOURCE
    SOURCE #filepathLookupTitle
      #str filepathLookupTitle()
      #{
      #    return filePathLookupTitle;
      #}
    ENDSOURCE
    SOURCE #folderLookup
      #public void folderLookup(SysVersionControlTmpAdditionalFolders _buffer, FormControl _formControl, str _filterStr)
      #{
      #    str subFolderPath;
      #    str rootFolder = '';
      #    str vcsRoot;
      #    FormStringControl folderControl = _formControl as FormStringControl;
      #
      #    vcsRoot = sysVersionControlSystem.parmFolder();
      #
      #    // Get the root folder. If current record already has a subfolder, use that as the starting folder when browsing for folder.
      #    if (_buffer.RecId && _buffer.Folder)
      #    {
      #        rootFolder = strFmt('%1%2%3', vcsRoot,
      #                                      #FilePathDelimiter,
      #                                      _buffer.Folder);
      #    }
      #
      #    // If no rootFolder, use the one from vcs
      #    if (!WinAPI::folderExists(rootFolder))
      #    {
      #        rootFolder = vcsRoot;
      #    }
      #
      #    // Let the user select a sub folder and do validation
      #    subFolderPath = WinAPI::browseForFolderDialog("@SYS110341", rootFolder);
      #
      #    if (subFolderPath)
      #    {
      #        // Subtract the sub folder path from vcs root.
      #        subFolderPath = element.getSubFolderPathFromVcsRoot(subFolderPath);
      #
      #        // If we still have a subFolderPath it means it has been checked and ok, otherwise it would have been empty.
      #        if (subFolderPath && folderControl)
      #        {
      #            _buffer.Folder = subFolderPath;
      #            folderControl.text(subFolderPath);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #generatePluginXML
      #protected void generatePluginXML(XmlElement elem)
      #{
      #    FormControl tabpage;
      #    SysDictEnum             typeEnum    = new SysDictEnum(enumNum(SysVersionControlType));
      #    Object obj;
      #    int i;
      #
      #    for(i=1; i<=tab.controlCount(); i++)
      #    {
      #        tabpage = tab.controlNum(i);
      #        if(match('<Plugin',tabpage.name()))
      #        {
      #            if(tabpage.name()=='Plugin_'+typeEnum.value2Symbol(sysVersionControlParameters.vcsType))
      #            {
      #                if( TreeNode::findNode('\\forms\\'+this.name()+'\\Designs\\DesignList\\'+tabpage.name()+'\\methods\\generatePluginXML'))
      #                {
      #                    obj = tabpage;
      #                    obj.generatePluginXML(elem);
      #                    break;
      #                }
      #            }
      #        }
      #    }
      #
      #    return;
      #}
    ENDSOURCE
    SOURCE #generateXML
      #protected XmlDocument generateXML()
      #{
      #    XmlDocument             xml;
      #    XmlProcessingInstruction instr;
      #    XmlElement              topNode;
      #    XmlElement              nodeLevel1;
      #    XmlElement              nodeLevel2;
      #    SysDictEnum             typesEnum = new SysDictEnum(enumNum(UtilElementType));
      #    str                     folderName;
      #
      #    xml = new XmlDocument();
      #    instr = xml.createProcessingInstruction('xml', 'version="1.0" encoding="utf-8"');
      #    xml.appendChild(instr);
      #    topNode =  xml.appendChild(xml.createElement(#XMLVCS));
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLProject));
      #    nodeLevel1.setAttribute(#XMLValue, projectName.text());
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLBestPractice));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCompileErrors));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(compilerErrors.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCompileWarnings));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(compilerWarnings.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCompileToDos));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(compilerToDos.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLBPErrors));
      #    nodeLevel2.setAttribute(#XMLValue, SysVersionControlSystem::gateSetting2Xml(bestPracticeErrors.selection()));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLTitleCaseUpdate));
      #    nodeLevel2.setAttribute(#XMLValue, runTitleCaseUpdate.value() ? #PropertyValueYes : #PropertyValueNo);
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLCheckInTestProject));
      #    nodeLevel2.setAttribute(#XMLValue, testProject.text());
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLLabel));
      #    nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLLabelDefault));
      #    nodeLevel2.setAttribute(#XMLValue, labelFile.text());
      #    if (useLabelInterval.optionValue())
      #    {
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLLabelIntervalMin));
      #        nodeLevel2.setAttribute(#XMLValue, int2str(labelIntervalMin.value()));
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLLabelIntervalMax));
      #        nodeLevel2.setAttribute(#XMLValue, int2str(labelIntervalMax.value()));
      #    }
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLUnwantedObjectTypes));
      #    while select sysVersionControlTmpUnwantedTypes
      #    {
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLObjectType));
      #        nodeLevel2.setAttribute(#XMLValue, typesEnum.value2Name(sysVersionControlTmpUnwantedTypes.ObjectType));
      #    }
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLUnwantedObjectNames));
      #    while select sysVersionControlTmpUnwantedNames
      #    {
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLObjectName));
      #        nodeLevel2.setAttribute(#XMLValue, sysVersionControlTmpUnwantedNames.Name);
      #    }
      #
      #    // Additional folders
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLAdditionalFolders));
      #    while select sysVersionControlTmpAdditionalFolders
      #    {
      #        folderName = sysVersionControlTmpAdditionalFolders.Folder;
      #        if (folderName != strFmt('%1', currentAOLayer()))
      #        {
      #            nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLFolder));
      #            nodeLevel2.setAttribute(#XMLValue, folderName);
      #            nodeLevel2.setAttribute(#XMLDescription, sysVersionControlTmpAdditionalFolders.Description);
      #        }
      #    }
      #
      #    // Models
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLModels));
      #    while select sysVersionControlTmpModelFolders
      #    {
      #        folderName = sysVersionControlTmpModelFolders.Folder;
      #        nodeLevel2 = nodeLevel1.appendChild(xml.createElement(#XMLModel));
      #        nodeLevel2.setAttribute(#XMLModelFolder, folderName);
      #        nodeLevel2.setAttribute(#XMLDescription, sysVersionControlTmpModelFolders.Description);
      #        nodeLevel2.setAttribute(#XMLModelAldLocation, sysVersionControlTmpModelFolders.AldLocation);
      #    }
      #
      #    nodeLevel1 = topNode.appendChild(xml.createElement(#XMLPluginSettings));
      #    this.generatePluginXML(nodeLevel1);
      #
      #    return xml;
      #}
    ENDSOURCE
    SOURCE #getSubFolderPathFromVcsRoot
      #/// <summary>
      #/// Substracts the sub folder path from VCS root folder path.
      #/// </summary>
      #/// <param name="_subFolderPath">
      #/// A relative or absolute path.
      #/// </param>
      #/// <returns>
      #/// Relative path to the VCS root folder path.
      #/// </returns>
      #/// <remarks>
      #/// Returns blank if sub folder path does not exists.
      #/// </remarks>
      #public str getSubFolderPathFromVcsRoot(str _subFolderPath)
      #{
      #    str vcsRoot = sysVersionControlSystem.parmFolder();
      #    #File
      #
      #    if (element.checkSubFolderPath(_subFolderPath))
      #    {
      #         // Subtract the sub folder path from vcs root
      #        if (_subFolderPath && WinAPI::folderExists(_subFolderPath) && vcsRoot)
      #        {
      #            return subStr(_subFolderPath, strLen(vcsRoot + #FilePathDelimiter) + 1, maxInt());
      #        }
      #    }
      #    return '';
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    Set unwantedNames;
      #    Set unwantedTypes;
      #
      #    Map addFolders;
      #    Map addModels;
      #
      #    SetEnumerator senum;
      #    MapEnumerator menum;
      #    str currentLayer = strFmt('%1', currentAOLayer());
      #    SysInfoAction_Formrun  actionRun;
      #
      #    super();
      #
      #    sysVersionControlParameters = SysVersionControlParameters::find();
      #
      #    if (sysVersionControlParameters.vcsEnabled == EnableDisable::Disable)
      #    {
      #        actionRun = SysInfoAction_Formrun::newFormname(formStr(SysVersionControlParametersDev));
      #        error("@SYS120744" + ' ' + strFmt("@SYS120745", "@SYS85914"), '', actionRun);
      #        element.closeCancel();
      #        return;
      #    }
      #
      #    // clear the base.
      #    versioncontrol.parmSysVersionControlSystem(null);
      #
      #    sysVersionControlSystem = SysVersionControlSystem::newType(sysVersionControlParameters.vcsType);
      #
      #    if (sysVersionControlSystem && sysVersionControlSystem.init(sysVersionControlParameters))
      #    {
      #        versioncontrol.parmSysVersionControlSystem(sysVersionControlSystem);
      #
      #        sysVersionControlSystem.applyGlobalSettings();
      #
      #        compilerWarnings.selection(sysVersionControlSystem.parmSettings().parmGateCompileWarnings());
      #        compilerErrors.selection(sysVersionControlSystem.parmSettings().parmGateCompileErrors());
      #        compilerToDos.selection(sysVersionControlSystem.parmSettings().parmGateCompileToDos());
      #        bestPracticeErrors.selection(sysVersionControlSystem.parmSettings().parmGateBestPracticeErrors());
      #        runTitleCaseUpdate.value(sysVersionControlSystem.parmSettings().parmRunTitleCaseUpdate());
      #        projectName.text(sysVersionControlSystem.parmProject());
      #        testProject.text(sysVersionControlSystem.parmTestProject());
      #
      #        labelFile.text(sysVersionControlSystem.parmSettings().parmDefaultLabelFile());
      #
      #        if (sysVersionControlSystem.parmSettings().parmLabelIntervalMin() ||
      #            sysVersionControlSystem.parmSettings().parmLabelIntervalMax())
      #        {
      #            useLabelInterval.optionValue(true);
      #
      #            labelIntervalMin.value(sysVersionControlSystem.parmSettings().parmLabelIntervalMin());
      #            labelIntervalMax.value(sysVersionControlSystem.parmSettings().parmLabelIntervalMax());
      #        }
      #        else
      #        {
      #            useLabelInterval.optionValue(false);
      #        }
      #
      #        unwantedNames = sysVersionControlSystem.parmUnwantedObjectNames();
      #        senum = unwantedNames.getEnumerator();
      #        while(senum.moveNext())
      #        {
      #            sysVersionControlTmpUnwantedNames.Name = senum.current();
      #            sysVersionControlTmpUnwantedNames.doInsert();
      #        }
      #        sysVersionControlTmpUnwantedNames_DS.research();
      #
      #        unwantedTypes = sysVersionControlSystem.parmUnwantedObjectTypes();
      #        senum = unwantedTypes.getEnumerator();
      #        while(senum.moveNext())
      #        {
      #            sysVersionControlTmpUnwantedTypes.ObjectType = senum.current();
      #            sysVersionControlTmpUnwantedTypes.doInsert();
      #        }
      #        sysVersionControlTmpUnwantedTypes_DS.research();
      #
      #
      #        // Insert the additional folders
      #        if (sysVersionControlSystem.supportAdditionalFolders())
      #        {
      #            addFolders = sysVersionControlSystem.parmAdditionalFolders();
      #
      #            //
      #            // Additional folders are being replaced with Models in AX 2012.
      #            // Support for configurating additional folders is kept
      #            // to allow customers to transition.
      #            //
      #            // It is not supported to use both Additional folders and Models simultaneously.
      #            //
      #            if (addFolders.elements() > 1) // The current layer is always added as an additional folder.
      #            {
      #                menum = addFolders.getEnumerator();
      #
      #                while(menum.moveNext())
      #                {
      #                    if(menum.currentKey() != currentLayer)
      #                    {
      #                        sysVersionControlTmpAdditionalFolders.Folder = menum.currentKey();
      #                        sysVersionControlTmpAdditionalFolders.Description = menum.currentValue();
      #                        sysVersionControlTmpAdditionalFolders.doInsert();
      #                    }
      #                }
      #
      #                sysVersionControlTmpAdditionalFolders_DS.research();
      #            }
      #            else
      #            {
      #                additionalSubFolders.visible(false);
      #            }
      #        }
      #        else
      #        {
      #            additionalSubFolders.visible(false);
      #        }
      #
      #        // Insert the models
      #        if (sysVersionControlSystem.supportModels())
      #        {
      #            addModels = sysVersionControlSystem.parmModelFolders();
      #            menum = addModels.getEnumerator();
      #
      #            while(menum.moveNext())
      #            {
      #                sysVersionControlTmpModelFolders.Folder = menum.currentKey();
      #                sysVersionControlTmpModelFolders.Description = menum.currentValue();
      #                sysVersionControlTmpModelFolders.AldLocation = sysVersionControlSystem.aldLocationFromFolder(sysVersionControlTmpModelFolders.Folder);
      #                sysVersionControlTmpModelFolders.doInsert();
      #            }
      #
      #            sysVersionControlTmpModelFolders_ds.research();
      #        }
      #        else
      #        {
      #            models.visible(false);
      #        }
      #
      #        this.activatePluginTab(sysVersionControlParameters.vcsType);
      #    }
      #    else
      #    {
      #        actionRun = SysInfoAction_Formrun::newFormname(formStr(SysVersionControlParametersDev));
      #        error("@SYS120746" + ' ' + strFmt("@SYS120745", "@SYS85914"), '', actionRun);
      #        element.closeCancel();
      #    }
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpUnwantedNames
          Table               #SysVersionControlTmpUnwantedNames
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpAdditionalFolders
          Table               #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Folder
            PROPERTIES
              Mandatory           #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    element.folderlookup(sysVersionControlTmpAdditionalFolders, _formControl, _filterStr);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #
          #    ret = super();
          #
          #    if (ret)
          #    {
          #        if (!element.checkSubFolderPath(sysVersionControlTmpAdditionalFolders.Folder))
          #        {
          #            ret = false;
          #        }
          #    }
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpUnwantedTypes
          Table               #SysVersionControlTmpUnwantedTypes
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlTmpModelFolders
          Table               #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Folder
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    element.folderlookup(sysVersionControlTmpModelFolders, _formControl, _filterStr);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AldLocation
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    element.aldFolderLookup(sysVersionControlTmpModelFolders, _formControl, _filterStr);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #    FilePath currentAldFolderFullPath;
          #    str vcsRoot;
          #    System.IO.DirectoryInfo diInfo;
          #
          #    ret = super();
          #
          #    if (ret)
          #    {
          #        vcsRoot = sysVersionControlSystem.parmFolder();
          #
          #        if (!element.checkFolderIsRelative(sysVersionControlTmpModelFolders.Folder) ||
          #            !element.checkSubFolderPath(sysVersionControlTmpModelFolders.Folder))
          #        {
          #            ret = false;
          #        }
          #
          #        if (sysVersionControlTmpModelFolders.AldLocation)
          #        {
          #            if (!element.checkFolderIsRelative(sysVersionControlTmpModelFolders.AldLocation))
          #            {
          #                ret = false;
          #            }
          #
          #            try
          #            {
          #                currentAldFolderFullPath = System.IO.Path::Combine(vcsRoot, sysVersionControlTmpModelFolders.Folder, #labelfiles, sysVersionControlTmpModelFolders.AldLocation);
          #                diInfo = new System.IO.DirectoryInfo(currentAldFolderFullPath);
          #                currentAldFolderFullPath = diInfo.get_FullName();
          #
          #                // Check that the selected folder exists beneath vcs root
          #                if (!strStartsWith(currentAldFolderFullPath, vcsRoot))
          #                {
          #                    error(strFmt("@SYS110339", sysVersionControlTmpModelFolders.AldLocation, vcsRoot));
          #                    return false;
          #                }
          #            }
          #            catch
          #            {
          #                ret = checkFailed("@SYS4000768");
          #            }
          #        }
          #    }
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS98154
      WindowType          #Workspace
      SetCompany          #No
      Columnspace         #100
      Style               #TableOfContents
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #AdditionalFoldersActionPane
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalFoldersListBodyGrp
          Style               #Strip
          DataSource          #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #AddModelsActionPane
          ElementPosition     #954437176
          HierarchyParent     #FoldersGroup
          Style               #Strip
          DataSource          #SysVersionControlTmpModelFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #UnwantedObjectNamesActionPane
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectNamesGroup
          Style               #Strip
          DataSource          #SysVersionControlTmpUnwantedNames
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #UnwantedObjectTypesActionPane
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectTypesGroup
          Style               #Strip
          DataSource          #SysVersionControlTmpUnwantedTypes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #AdditionalFoldersActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalFoldersActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #AddModelsActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #AddModelsActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #UnwantedObjectNamesActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #UnwantedObjectTypesActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #AdditionalFoldersButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalFoldersActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #Buttons
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ModelsButtonGrp
          ElementPosition     #1431655764
          HierarchyParent     #AddModelsActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #UnwantedObjectNamesButtonGrp
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #UnwantedObjectTypesButtonGrp
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #AdditionalFolders
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalFoldersListBodyGrp
          DataSource          #SysVersionControlTmpAdditionalFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #AddModels
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #FoldersGroup
          DataSource          #SysVersionControlTmpModelFolders
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #UnwantedObjectNamesObjectNames
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectNamesGroup
          DataSource          #SysVersionControlTmpUnwantedNames
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #UnwantedObjectTypes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectTypesGroup
          DataSource          #SysVersionControlTmpUnwantedTypes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AdditionalFoldersListBodyGrp
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalSubfoldersListBody
          Caption             #@SYS94390
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AdditionalSubfoldersListBody
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalSubFolders
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AdditionalSubfoldersListTitle
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalSubFolders
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BestPractices
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #GeneralBody
          Caption             #@SYS94381
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Buttons
          Top                 #Bottom edge
          VerticalSpacing     #0
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #FoldersGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #ModelsListBody
          Caption             #@SYS116817
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralBody
          ElementPosition     #1431655764
          HierarchyParent     #GeneralListBody
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListBody
          ElementPosition     #1610612733
          HierarchyParent     #GeneralTab
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListTitle
          ElementPosition     #1073741822
          HierarchyParent     #GeneralTab
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Labels
          Width               #Column width
          ElementPosition     #1789569705
          HierarchyParent     #GeneralBody
          Caption             #@SYS13322
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ModelsListBody
          ElementPosition     #1610612733
          HierarchyParent     #Models
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ModelsListTitle
          ElementPosition     #1073741822
          HierarchyParent     #Models
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SourceDepot
          ElementPosition     #1431655764
          HierarchyParent     #SourceDepotBody
          Caption             #@SYS343254
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SourceDepotBody
          ElementPosition     #1610612733
          HierarchyParent     #Plugin_SysVersionControlSourceDepot
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SourceDepotTitle
          ElementPosition     #1073741822
          HierarchyParent     #Plugin_SysVersionControlSourceDepot
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectNamesGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesListBody
          Caption             #@SYS94425
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectNamesListBody
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectNamesTab
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectNamesListTitle
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectNamesTab
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectTypesGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesListBody
          Caption             #@SYS94425
          Style               #MarginlessContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectTypesListBody
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectTypesTab
          Style               #TOCTopicList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UnwantedObjectTypesListTitle
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectTypesTab
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #UseLabelInterval
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #Labels
          FrameType           #Edged 3D
          Caption             #@SYS300000
          FrameOptionButton   #Check
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VCSSettings
          Width               #Column width
          ElementPosition     #715827882
          HierarchyParent     #GeneralBody
          Caption             #@SYS94379
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          Tabs                #5
          Style               #VerticalTabs
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #AdditionalSubFolders
          AutoDeclaration     #Yes
          ElementPosition     #1380525201
          HierarchyParent     #Tab
          Caption             #@SYS94390
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #GeneralTab
          ElementPosition     #613566756
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Models
          AutoDeclaration     #Yes
          ElementPosition     #1636178016
          HierarchyParent     #Tab
          Caption             #@SYS116817
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Plugin_SysVersionControlSourceDepot
          AutoDeclaration     #Yes
          ElementPosition     #1891830831
          HierarchyParent     #Tab
          Caption             #@SYS85682
        ENDPROPERTIES
        
        METHODS
          SOURCE #generatePluginXML
            #protected void generatePluginXML(XmlElement elem)
            #{
            #    XmlElement              nodeLevel1;
            #    str                     branchstr;
            #    int                     pos;
            #
            #    nodeLevel1 = elem.appendChild(elem.ownerDocument().createElement(#XMLBranch));
            #    branchstr = branch.text();
            #    branchstr = strRTrim(branchstr);
            #    branchstr = strLTrim(branchstr);
            #    if(branch)
            #    {
            #        pos = strScan(branchstr, sysVersionControlParameters.RepositoryFolder, 1, strLen(branchstr));
            #        if(pos)
            #        {
            #            branchstr = subStr(branchstr,pos + strLen(sysVersionControlParameters.RepositoryFolder), strLen(branchstr));
            #        }
            #
            #        while(subStr(branchstr, 1, 1) == #FilePathDelimiter)
            #        {
            #            branchstr = subStr(branchstr, 2, strLen(branchstr));
            #        }
            #        while(subStr(branchstr, strLen(branchstr),-1) == #FilePathDelimiter)
            #        {
            #            branchstr = subStr(branchstr,1,strLen(branchstr)-1);
            #        }
            #    }
            #    nodeLevel1.setAttribute(#XMLValue, branchstr);
            #
            #    return;
            #}
          ENDSOURCE
          SOURCE #setPluginSettings
            #void setPluginSettings()
            #{
            #    SysVersionControlFilebasedBackEnd backend;
            #    SysVersionControlFileBasedBackEndSD fileBasedSD;
            #    SysVersionControlSystemFileBased fileBased = versioncontrol.parmSysVersionControlSystem() as SysVersionControlSystemFileBased;
            #
            #    if ( fileBased )
            #    {
            #        backend = fileBased.parmBackend();
            #        fileBasedSD = backend as SysVersionControlFileBasedBackEndSD;
            #        if (fileBasedSD)
            #        {
            #            branch.text(fileBasedSD.parmBranch());
            #        }
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #UnwantedObjectNamesTab
          ElementPosition     #869219571
          HierarchyParent     #Tab
          Caption             #@SYS343255
          FastTabExpanded     #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #UnwantedObjectTypesTab
          ElementPosition     #1124872386
          HierarchyParent     #Tab
          Caption             #@SYS343256
          FastTabExpanded     #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #RunTitleCaseUpdate
          AutoDeclaration     #Yes
          ElementPosition     #1073741820
          HierarchyParent     #BestPractices
          Label               #@SYS94384
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #BestPracticeErrors
          AutoDeclaration     #Yes
          HelpText            #@SYS94432
          ElementPosition     #1610612730
          HierarchyParent     #BestPractices
          Label               #@SYS94386
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CompilerErrors
          AutoDeclaration     #Yes
          HelpText            #@SYS94430
          ElementPosition     #805306365
          HierarchyParent     #BestPractices
          Label               #@SYS94383
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CompilerToDos
          AutoDeclaration     #Yes
          HelpText            #@SYS94431
          ElementPosition     #1342177275
          HierarchyParent     #BestPractices
          Label               #@SYS94385
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #CompilerWarnings
          AutoDeclaration     #Yes
          HelpText            #@SYS94429
          ElementPosition     #536870910
          HierarchyParent     #BestPractices
          Label               #@SYS94382
          EnumType            #SysVersionControlGateSetting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #UnwantedTypes_ObjectType
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypes
          Label               #@SYS81228
          DataSource          #SysVersionControlTmpUnwantedTypes
          DataField           #ObjectType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #AdditionalFoldersRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalFoldersButtonGroup
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #AddtionalFoldersAddButton
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalFoldersButtonGroup
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonCancel
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroup
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonOK
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          DefaultButton       #Yes
          Command             #263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #ModelsAddButton
          ElementPosition     #1073741822
          HierarchyParent     #ModelsButtonGrp
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #ModelsRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #ModelsButtonGrp
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectNamesAddButton
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectNamesButtonGrp
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectNamesRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectNamesButtonGrp
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectTypesAddButton
          ElementPosition     #1073741822
          HierarchyParent     #UnwantedObjectTypesButtonGrp
          Text                #@SYS60080
          ButtonDisplay       #Text & Image left
          NormalImage         #11421
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #UnwantedObjectTypesRemoveButton
          ElementPosition     #1610612733
          HierarchyParent     #UnwantedObjectTypesButtonGrp
          Text                #@SYS26394
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #LabelIntervalMax
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #UseLabelInterval
          ExtendedDataType    
            ARRAY 
              #LabelIntervalTo
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #LabelIntervalMin
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #UseLabelInterval
          ExtendedDataType    
            ARRAY 
              #LabelIntervalFrom
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #AdditionalFoldersTitleText
          ElementPosition     #1431655764
          HierarchyParent     #AdditionalSubfoldersListTitle
          Text                #@SYS343259
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #ExcludeObjectNamesTitleText
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesListTitle
          Text                #@SYS343255
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #ExcludeObjectTypesTitleText
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectTypesListTitle
          Text                #@SYS343256
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #GeneralTitleText
          ElementPosition     #1431655764
          HierarchyParent     #GeneralListTitle
          Text                #@SYS343257
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #ModelTitleText
          ElementPosition     #1431655764
          HierarchyParent     #ModelsListTitle
          Text                #@SYS343258
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #SourceDepotTitleText
          ElementPosition     #1431655764
          HierarchyParent     #SourceDepotTitle
          Text                #@SYS343260
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #AdditionalFolders_Description
          ElementPosition     #1610612733
          HierarchyParent     #AdditionalFolders
          DisplayLength       #25
          DataSource          #SysVersionControlTmpAdditionalFolders
          DataField           #Description
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #AdditionalFolders_Folder
          ElementPosition     #1073741822
          HierarchyParent     #AdditionalFolders
          DisplayLength       #20
          DataSource          #SysVersionControlTmpAdditionalFolders
          DataField           #Folder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Branch
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #SourceDepot
          DisplayLength       #60
          ExtendedDataType    
            ARRAY 
              #SysVersionControlBranch
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #LabelFile
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Labels
          LookupButton        #Always
          ExtendedDataType    
            ARRAY 
              #LabelModuleId
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    SysLabelEdit::moduleIdLookup(this);
            #}
          ENDSOURCE
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    if (ret)
            #    {
            #        if (this.text() && !SysLabelEdit::validateModuleId(this.text()))
            #        {
            #            this.text(SysLabel::defaultModuleId());
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelFolders_AldLocation
          ElementPosition     #1717986916
          HierarchyParent     #AddModels
          DisplayLength       #20
          DataSource          #SysVersionControlTmpModelFolders
          DataField           #AldLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelFolders_Description
          Width               #Column width
          HelpText            #@SYS342658
          ElementPosition     #1288490187
          HierarchyParent     #AddModels
          DisplayLength       #25
          DataSource          #SysVersionControlTmpModelFolders
          DataField           #Description
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ModelFolders_Folder
          HelpText            #@SYS342657
          ElementPosition     #858993458
          HierarchyParent     #AddModels
          DisplayLength       #20
          DataSource          #SysVersionControlTmpModelFolders
          DataField           #Folder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #ProjectName
          AutoDeclaration     #Yes
          HelpText            #@SYS120748
          ElementPosition     #1431655764
          HierarchyParent     #VCSSettings
          Label               #@SYS120747
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TestProject
          AutoDeclaration     #Yes
          ElementPosition     #1879048185
          HierarchyParent     #BestPractices
          ExtendedDataType    
            ARRAY 
              #SysVersionControlTestProject
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #UnwantedNames_Name
          ElementPosition     #1431655764
          HierarchyParent     #UnwantedObjectNamesObjectNames
          Label               #@SYS31438
          DataSource          #SysVersionControlTmpUnwantedNames
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #SysVersionControlParametersDev
  PROPERTIES
    Name                #SysVersionControlParametersDev
    Origin              #{0B1E0000-0000-1000-136B-810ACED8B466}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    #SysVersionControl
      #
      #    FilenameFilter fileNameLookupFilter;
      #    str fileNameLookupName;
      #    str fileNameLookupTitle;
      #    str filePathLookupTitle;
      #}
    ENDSOURCE
    SOURCE #activatePluginTab
      #void activatePluginTab(SysVersionControlType type)
      #{
      #    FormControl tabpage;
      #    SysDictEnum typeEnum    = new SysDictEnum(enumNum(SysVersionControlType));
      #    Object      obj;
      #    int i;
      #    ;
      #
      #    fileNameLookupFilter = ['',''];
      #    fileNameLookupName = '';
      #    fileNameLookupTitle = '';
      #    filePathLookupTitle = '';
      #
      #    for(i=1; i<=tab.controlCount(); i++)
      #    {
      #        tabpage = tab.controlNum(i);
      #        if(match('<Plugin',tabpage.name()))
      #        {
      #            if(tabpage.name()=='Plugin_'+typeEnum.value2Symbol(type))
      #            {
      #                tabpage.visible(true);
      #                if( TreeNode::findNode('\\forms\\'+this.name()+'\\Designs\\Design\\[Tab:Tab]\\[TabPage:'+tabpage.name()+']\\methods\\setPluginSettings'))
      #                {
      #                    obj = tabpage;
      #                    obj.setPluginSettings();
      #                }
      #            }
      #            else
      #                tabpage.visible(false);
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #closeOk
      #public void closeOk()
      #{
      #    sysVersionControlParameters.write();
      #
      #    // HM_Version Control Testing, condition added by Daniel at 1/23/2017, start
      #    //if (sysVersionControlParameters.VCSType != SysVersionControlType::SysVersionControlGit)
      #    //{
      #        versioncontrol.init(sysVersionControlParameters);
      #    //}
      #    // HM_Version Control Testing, condition added by Daniel at 1/23/2017, start
      #
      #    super();
      #
      #
      #}
    ENDSOURCE
    SOURCE #filenameLookupFileName
      #str filenameLookupFileName()
      #{
      #    return fileNameLookupName;
      #}
    ENDSOURCE
    SOURCE #filenameLookupFilter
      #FilenameFilter filenameLookupFilter()
      #{
      #    return fileNameLookupFilter;
      #}
    ENDSOURCE
    SOURCE #filenameLookupInitialPath
      #str filenameLookupInitialPath()
      #{
      #    return '';
      #}
    ENDSOURCE
    SOURCE #filenameLookupTitle
      #str filenameLookupTitle()
      #{
      #    return fileNameLookupTitle;
      #}
    ENDSOURCE
    SOURCE #filepathLookupTitle
      #str filepathLookupTitle()
      #{
      #    return filePathLookupTitle;
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #    super();
      #    SysVersionControlParameters::find();
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #    this.setupFirstTabpage();
      #    this.activatePluginTab(sysVersionControlParameters.vcsType);
      #}
    ENDSOURCE
    SOURCE #setupFirstTabpage
      #void setupFirstTabpage()
      #{
      #    //
      #    // Hide repository folder when running morphX VCS
      #    //
      #    if (sysVersionControlParameters.vcsType == SysVersionControlType::SysVersionControlMorphX)
      #    {
      #        settings_RepositoryFolder.visible(false);
      #    }
      #    else
      #    {
      #        settings_RepositoryFolder.visible(true);
      #    }
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #SysVersionControlParameters
          Table               #SysVersionControlParameters
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD RepositoryFolder
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    FormStringControl folderControl = _formControl as FormStringControl;
                #    str repositoryFolder = WinAPI::browseForFolderDialog("@SYS85727", SysVersionControlParameters.RepositoryFolder);
                #
                #    if (repositoryFolder)
                #    {
                #        SysVersionControlParameters.RepositoryFolder = repositoryFolder;
                #        folderControl.text(repositoryFolder);
                #
                #    }
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #warnWhenReverting
          #//BP Deviation Documented
          #edit boolean warnWhenReverting(boolean set, boolean val)
          #{
          #    if(set)
          #    {
          #        if(val)
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags | #VCWarnWhenReverting;
          #        else
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags & ~#VCWarnWhenReverting;
          #    }
          #    else
          #        val = sysVersionControlParameters.uiFlags & #VCWarnWhenReverting > 0;
          #    return val;
          #}
        ENDSOURCE
        SOURCE #aotColoring
          #//BP Deviation Documented
          #edit boolean aotColoring(boolean set, boolean val)
          #{
          #    if(set)
          #    {
          #        if(val)
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags | #VCAOTColoring;
          #        else
          #            sysVersionControlParameters.uiFlags = sysVersionControlParameters.uiFlags & ~#VCAOTColoring;
          #    }
          #    else
          #        val = sysVersionControlParameters.uiFlags & #VCAOTColoring > 0;
          #    return val;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #800
      Height              #450
      Caption             #@SYS85914
      TitleDatasource     #SysVersionControlParameters
      WindowType          #Workspace
      HideToolbar         #Yes
      SetCompany          #No
      Style               #TableOfContents
      ViewEditMode        #Edit
    ENDPROPERTIES
    
    CONTAINER
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #Buttons
          Style               #DialogCommitContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Buttons
          Top                 #Bottom edge
          VerticalSpacing     #0
          ElementPosition     #1431655764
          Style               #DialogCommit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EnvironmentSettings
          ElementPosition     #1610612733
          HierarchyParent     #GeneralListBody
          Caption             #@SYS94387
          DataSource          #SysVersionControlParameters
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListBody
          ElementPosition     #1610612733
          HierarchyParent     #General
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralListTitle
          ElementPosition     #1073741822
          HierarchyParent     #General
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Settings
          ElementPosition     #1073741822
          HierarchyParent     #GeneralListBody
          DataSource          #SysVersionControlParameters
          DataGroup           #DevSettings
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Tfs
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #TFSListBody
          DataSource          #SysVersionControlParameters
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TFSListBody
          ElementPosition     #1610612733
          HierarchyParent     #Plugin_SysVersionControlTfs
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TFSListTitle
          ElementPosition     #1073741822
          HierarchyParent     #Plugin_SysVersionControlTfs
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VSS
          ElementPosition     #1431655764
          HierarchyParent     #VSSListBody
          DataSource          #SysVersionControlParameters
          DataGroup           #VSS
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VSSListBody
          ElementPosition     #1610612733
          HierarchyParent     #Plugin_SysVersionControlSourceSafe
          Style               #TOCTopicSimple
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VSSListTitle
          ElementPosition     #1073741822
          HierarchyParent     #Plugin_SysVersionControlSourceSafe
          Style               #TOCTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #715827882
          Style               #VerticalTabs
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #General
          ElementPosition     #858993458
          HierarchyParent     #Tab
          Caption             #@SYS2952
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Plugin_SysVersionControlSourceSafe
          ElementPosition     #1288490187
          HierarchyParent     #Tab
          Caption             #@SYS94374
        ENDPROPERTIES
        
        METHODS
          SOURCE #setPluginSettings
            #void setPluginSettings()
            #{
            #    #file
            #
            #    fileNameLookupFilter = ["@SYS98810",#AllFilesName+'.ini'];
            #    fileNameLookupName = 'srcsafe.ini';
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Plugin_SysVersionControlTfs
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #Tab
          Caption             #@SYS117839
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #AOTColoring
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #EnvironmentSettings
          Label               #@SYS94388
          DataSource          #SysVersionControlParameters
          DataMethod          #AOTColoring
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Tfs_EnforcePolicies
          AutoDeclaration     #Yes
          ElementPosition     #1968526675
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #TfsEnforceCheckInPolicies
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #WarnWhenReverting
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #EnvironmentSettings
          Label               #@SYS94389
          DataSource          #SysVersionControlParameters
          DataMethod          #WarnWhenReverting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #DevSettings_VCSType
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Settings
          DataSource          #SysVersionControlParameters
          DataField           #VCSType
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    element.setupFirstTabpage();
            #    element.activatePluginTab(sysVersionControlParameters.vcsType);
            #
            #    element.redraw();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonCancel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          SaveRecord          #No
          Command             #264
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CommandButtonOK
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          Command             #263
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #GeneralTitleText
          ElementPosition     #1431655764
          HierarchyParent     #GeneralListTitle
          Text                #@SYS343175
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #TFSTitleText
          ElementPosition     #1431655764
          HierarchyParent     #TFSListTitle
          Text                #@SYS343177
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #VSSTitleText
          ElementPosition     #1431655764
          HierarchyParent     #VSSListTitle
          Text                #@SYS343176
          Style               #MainInstruction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Settings_RepositoryFolder
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #Settings
          DataSource          #SysVersionControlParameters
          DataField           #RepositoryFolder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_AppRoot
          ElementPosition     #1789569705
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #AppRoot
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_TfsBranch
          ElementPosition     #1431655764
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #TfsBranch
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_TfsProject
          ElementPosition     #1073741823
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #TfsProject
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #Tfs_TfsServer
          ElementPosition     #715827882
          HierarchyParent     #Tfs
          DataSource          #SysVersionControlParameters
          DataField           #TfsServer
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    // next & prev, enabling the SysURLLookup to get the value from control.valueStr()
            #    // even though the record is not saved or if the value has been changed and not committed.
            #    element.nextField();
            #    element.prevField();
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: MNU

; Microsoft Dynamics AX Menu : SysContextMenu unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      Label               #@SYS28637
      SecurityKey         #SysDevelopment
      Origin              #{100E0000-0000-1000-FB09-5DBF82A26477}
    ENDPROPERTIES
    
    MENU #Git
      PROPERTIES
        Name                #Git
        Label               #Git
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Add
          MenuItemType        #Action
          MenuItemName        #GitAddToStage
        ENDPROPERTIES
        
      ENDMENUITEM
      SEPARATOR
      MENUITEM
        PROPERTIES
          Name                #Diff
          MenuItemType        #Action
          MenuItemName        #GitDiff
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Diff with previous version
          MenuItemType        #Action
          MenuItemName        #GitDiffWithPreviousVersion
        ENDPROPERTIES
        
      ENDMENUITEM
      SEPARATOR
      MENUITEM
        PROPERTIES
          Name                #Show log
          MenuItemType        #Action
          MenuItemName        #GitShowLog
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Stash save
          MenuItemType        #Action
          MenuItemName        #GitStashSave
        ENDPROPERTIES
        
      ENDMENUITEM
      SEPARATOR
      MENUITEM
        PROPERTIES
          Name                #Delete
          MenuItemType        #Action
          MenuItemName        #GitDelete
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Delete(Keep local)
          MenuItemType        #Action
          MenuItemName        #GitDeleteKeepLocal
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Compare existing code to proposed fix
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareUpgrade
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Auto-resolve source code rule conflict
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleAutoResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compare altered code to original code
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareOrigina
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Revert auto-resolve source code rule conflict
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleRevertResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as resolved
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as unresolved
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as resolved (including subnodes)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolvedRecursive
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Mark as unresolved (including subnodes)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolvedRecursi
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Rerun conflict detection
        MenuItemType        #Action
        MenuItemName        #SysUpgradeDetectConflictsRerun
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS24666
      PROPERTIES
        Name                #@SYS24666
        Label               #@SYS24666
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Used by
          MenuItemName        #XRefReferencesUsedBy
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Using (instant view)
          MenuItemType        #Action
          MenuItemName        #xRefUpdateTmpReferences
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Names
          MenuItemName        #XRefNames
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Using
          MenuItemName        #XRefReferencesUsing
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Update
          MenuItemType        #Action
          MenuItemName        #xRefUpdate
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENU #@SYS310448
      PROPERTIES
        Name                #SecTools
        Label               #@SYS310448
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #XRef analyzer
          MenuItemName        #syssecanalysisaddIn
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Metadata analyzer
          MenuItemName        #syssecanalysisaddInmetadataAnalyzer
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #View related security roles
          MenuItemName        #SysSecObjectsAnalyze
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #View related security objects
          MenuItemName        #SysSecObjectsInRole
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Apply changes
          MenuItemType        #Action
          MenuItemName        #SysSecSecurityApply
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Table browser
        MenuItemName        #sysTableBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Auto-report
        MenuItemName        #SysTableForm
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Reverse engineer
        MenuItemName        #SysVisioAddIn
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Extract XML documentation
        MenuItemType        #Output
        MenuItemName        #SysXmlDocumentationCreateFile
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Run tests
        MenuItemType        #Action
        MenuItemName        #SysTestToolbarOpen
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Type hierarchy browser
        MenuItemName        #SysTypeHierarchyBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Compare
        MenuItemType        #Action
        MenuItemName        #sysCompare
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compile forward
        MenuItemType        #Action
        MenuItemName        #sysCompileForward
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Impact Analysis
        MenuItemType        #Action
        MenuItemName        #SysImpactAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Find and replace
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceText
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Syntactic renaming
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceSyntax
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Duplicates
        MenuItemName        #SysDictIndexShowDuplicates
      ENDPROPERTIES
      
    ENDMENUITEM
    MENU #@SYS16245
      PROPERTIES
        Name                #@SYS16245
        Label               #@SYS16245
        NeededAccessLevel   #NoAccess
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Entire path
          MenuItemType        #Action
          MenuItemName        #SysTreeNodePathCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Name
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeNameCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Copy to current layer
          MenuItemType        #Action
          MenuItemName        #systreenodecopyToCurrentLayer
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Check best practices
        MenuItemType        #Action
        MenuItemName        #SysBPCheck
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Check form style best practices
        MenuItemName        #SysBPStyleCheckAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Source code title case update
        MenuItemType        #Action
        MenuItemName        #SysSourceNameWash
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Generate Axd query
        MenuItemType        #Action
        MenuItemName        #AxdGenerateAxdQuery
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #AIF Document Service Wizard
        MenuItemName        #AxdWizard
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Register service
        MenuItemType        #Action
        MenuItemName        #AifRegisterService
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Help properties
        MenuItemName        #HelpTopicID
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS53405
      PROPERTIES
        Name                #SysContextMenuOpenNewWindow
        Label               #@SYS53405
        SetCompany          #Yes
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Open application object window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeApplObjectOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open parent in window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeParentOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open new window
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@SYS57839
        PROPERTIES
          Name                #@SYS57839
          Label               #@SYS57839
          NeededAccessLevel   #NoAccess
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #usp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #usr
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsr
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cup
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cus
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCus
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #vap
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVap
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #var
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVar
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isv
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsv
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #slp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sln
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSln
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpk
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpk
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #glp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #gls
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGls
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #syp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSyp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sys
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSys
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENUITEM
        PROPERTIES
          Name                #Open used table
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used table field group
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowFieldGroup
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used Extended Data Type
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowExtendedType
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used Enum
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowEnum
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used class
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowClass
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used form
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowForm
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used report
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowReport
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Open used menu item
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowMenuItem
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Properties
        MenuItemType        #Action
        MenuItemName        #SysTreeNodeShowProperties
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Full CIL generation from X++
        MenuItemType        #Action
        MenuItemName        #SysXppILFullBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Incremental CIL generation from X++
        MenuItemType        #Action
        MenuItemName        #SysXppILIncrementalBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Approval wizard...
        MenuItemName        #WorkflowAOTWizardApproval
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Task wizard...
        MenuItemName        #WorkflowAOTWizardTask
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Workflow type wizard...
        MenuItemName        #WorkflowAOTWizardType
      ENDPROPERTIES
      
    ENDMENUITEM
  ENDMENU
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitAddToStage unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitAddToStage
    Type: 3
    PROPERTIES
      Name                #GitAddToStage
      Label               #@SYS60080
      ObjectType          #Class
      Object              #HM_GitOperationHelper
      EnumTypeParameter   #HM_GitOperationType
      Origin              #{03C57AD3-EEC6-45DB-B30B-42522809BB78}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitCreateTag unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitCreateTag
    Type: 3
    PROPERTIES
      Name                #GitCreateTag
      Label               #Create tag
      ObjectType          #Class
      Origin              #{1FC7ED07-A91B-4AC6-BF45-AA9F5B28F775}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitCreateBranch unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitCreateBranch
    Type: 3
    PROPERTIES
      Name                #GitCreateBranch
      Label               #Create branch
      ObjectType          #Class
      Origin              #{B3D68D2B-ED4C-4585-9CFE-CFEB08E36F6E}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitSwitchBranch unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitSwitchBranch
    Type: 3
    PROPERTIES
      Name                #GitSwitchBranch
      Label               #Switch/ Checkout
      ObjectType          #Class
      Origin              #{662C486A-ACCE-473A-A2AC-7D4EB0248A28}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitMerge unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitMerge
    Type: 3
    PROPERTIES
      Name                #GitMerge
      Label               #Merge
      ObjectType          #Class
      Origin              #{50E87EAA-00D6-4E4D-94F2-0A290BC9C2B2}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitRebase unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitRebase
    Type: 3
    PROPERTIES
      Name                #GitRebase
      Label               #Rebase
      ObjectType          #Class
      Origin              #{605F29C1-FE38-44A9-9426-19B24E0C87F2}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitDelete unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitDelete
    Type: 3
    PROPERTIES
      Name                #GitDelete
      Label               #Delete
      ObjectType          #Class
      Origin              #{7D9AAABE-925A-4A1C-BB4C-95E7AB0DF70D}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitDeleteKeepLocal unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitDeleteKeepLocal
    Type: 3
    PROPERTIES
      Name                #GitDeleteKeepLocal
      Label               #Delete(Keep local)
      ObjectType          #Class
      Origin              #{41F12C27-0F9B-4D1A-801D-13B95308ED47}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitStashSave unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitStashSave
    Type: 3
    PROPERTIES
      Name                #GitStashSave
      Label               #Stash save
      ObjectType          #Class
      Origin              #{8052527D-132E-448E-89A2-21F3BB474649}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitShowReflog unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitShowReflog
    Type: 3
    PROPERTIES
      Name                #GitShowReflog
      Label               #Show Reflog
      ObjectType          #Class
      Origin              #{9E224B60-81BB-4D98-AF45-4B3E0F64C952}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitShowLog unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitShowLog
    Type: 3
    PROPERTIES
      Name                #GitShowLog
      Label               #@SYS335975
      ObjectType          #Class
      Origin              #{3979581E-047C-4B5F-AA62-0BF17A392900}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitDiffWithPreviousVersion unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitDiffWithPreviousVersion
    Type: 3
    PROPERTIES
      Name                #GitDiffWithPreviousVersion
      Label               #Diff with previous version
      ObjectType          #Class
      Origin              #{C75C137E-CF8A-46FB-B3AE-A73181CF5452}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitDiff unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitDiff
    Type: 3
    PROPERTIES
      Name                #GitDiff
      Label               #Diff
      ObjectType          #Class
      Origin              #{03FD21B6-5C9F-40CF-9848-11F38A3442D3}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : GitRevertFormStage unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #GitRevertFormStage
    Type: 3
    PROPERTIES
      Name                #GitRevertFormStage
      Label               #Revert
      ObjectType          #Class
      Origin              #{111F656C-7641-404C-B700-9EF88A51CF8C}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: PRN

; Microsoft Dynamics AX Project : VersionControlTest unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #VersionControlTest
  PRIVATE
  PROPERTIES
    Name                #VersionControlTest
    Origin              #{114BE76D-8250-4BFD-BECF-64267881E8E8}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #sysContextMenuJob
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #executeCmdJob1
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 5
      UTILOBJECTID 0
      NODETYPE 215
      NAME #executeCmdJob
    ENDNODE
    GROUP #DataDictionary
      PROPERTIES
        Name                #DataDictionary
        ProjectGroupType    #DataDictionary
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #BaseEnums
        PROPERTIES
          Name                #BaseEnums
          ProjectGroupType    #BaseEnums
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 40
          UTILOBJECTID 1357
          NODETYPE 209
          NAME #SysVersionControlType
        ENDNODE
        ENDGROUP
        
      GROUP #Tables
        PROPERTIES
          Name                #Tables
          ProjectGroupType    #Tables
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 1984
          NODETYPE 204
          NAME #SysVersionControlTmpItem
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 44
          UTILOBJECTID 1981
          NODETYPE 204
          NAME #SysVersionControlParameters
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 18386
        NODETYPE 329
        NAME #SysVersionControlFileBasedBackEndSD
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 841
        NODETYPE 329
        NAME #SysVersionControlAddIn
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 13633
        NODETYPE 329
        NAME #SysVersionControlSystemFileBased
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1046573
        NODETYPE 329
        NAME #SysVersionControlFileBasedBackEndGit
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 860
        NODETYPE 329
        NAME #SysVersionControlSystem
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 61447
        NODETYPE 329
        NAME #VersionControl
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlItemHistory
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlParametersAdm
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #SysVersionControlParametersDev
      ENDNODE
      ENDGROUP
      
    GROUP #Menus
      PROPERTIES
        Name                #Menus
        ProjectGroupType    #Menus
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #SysContextMenu
      ENDNODE
      ENDGROUP
      
    GROUP #MenuItems
      PROPERTIES
        Name                #MenuItems
        ProjectGroupType    #MenuItems
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Display
        PROPERTIES
          Name                #Display
          ProjectGroupType    #Display
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        ENDGROUP
        
      GROUP #Action
        PROPERTIES
          Name                #Action
          ProjectGroupType    #Action
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitAddToStage
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitCreateTag
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitCreateBranch
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitSwitchBranch
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitMerge
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitRebase
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitDelete
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitDeleteKeepLocal
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitStashSave
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitShowReflog
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitShowLog
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitDiffWithPreviousVersion
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitDiff
        ENDNODE
        BEGINNODE
          FILETYPE 0
          UTILTYPE 3
          UTILOBJECTID 0
          NODETYPE 296
          NAME #GitRevertFormStage
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
